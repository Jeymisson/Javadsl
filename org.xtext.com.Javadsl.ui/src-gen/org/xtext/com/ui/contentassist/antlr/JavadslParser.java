/*
 * generated by Xtext
 */
package org.xtext.com.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.xtext.com.services.JavadslGrammarAccess;

public class JavadslParser extends AbstractContentAssistParser {
	
	@Inject
	private JavadslGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.xtext.com.ui.contentassist.antlr.internal.InternalJavadslParser createParser() {
		org.xtext.com.ui.contentassist.antlr.internal.InternalJavadslParser result = new org.xtext.com.ui.contentassist.antlr.internal.InternalJavadslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getTypeDeclarationAccess().getAlternatives_0(), "rule__TypeDeclaration__Alternatives_0");
					put(grammarAccess.getFieldDeclarationAccess().getAlternatives(), "rule__FieldDeclaration__Alternatives");
					put(grammarAccess.getFieldDeclarationAccess().getDeclarationAlternatives_0_0(), "rule__FieldDeclaration__DeclarationAlternatives_0_0");
					put(grammarAccess.getMethodDeclarationAccess().getAlternatives_7(), "rule__MethodDeclaration__Alternatives_7");
					put(grammarAccess.getVariableInitializerAccess().getAlternatives(), "rule__VariableInitializer__Alternatives");
					put(grammarAccess.getNumericExpressionAccess().getAlternatives(), "rule__NumericExpression__Alternatives");
					put(grammarAccess.getNumericExpressionAccess().getAlternatives_0_0(), "rule__NumericExpression__Alternatives_0_0");
					put(grammarAccess.getNumericExpressionAccess().getAlternatives_1_1(), "rule__NumericExpression__Alternatives_1_1");
					put(grammarAccess.getNumericExpressionAccess().getAlternatives_1_1_0(), "rule__NumericExpression__Alternatives_1_1_0");
					put(grammarAccess.getNumericExpressionAccess().getAlternatives_1_1_1_1(), "rule__NumericExpression__Alternatives_1_1_1_1");
					put(grammarAccess.getBitExpressionAccess().getAlternatives(), "rule__BitExpression__Alternatives");
					put(grammarAccess.getBitExpressionAccess().getAlternatives_1_1_1(), "rule__BitExpression__Alternatives_1_1_1");
					put(grammarAccess.getTestingExpressionAccess().getAlternatives_1_1(), "rule__TestingExpression__Alternatives_1_1");
					put(grammarAccess.getLogicalExpressionAccess().getAlternatives(), "rule__LogicalExpression__Alternatives");
					put(grammarAccess.getLogicalExpressionAccess().getAlternatives_1_1(), "rule__LogicalExpression__Alternatives_1_1");
					put(grammarAccess.getLogicalExpressionAccess().getAlternatives_1_1_0_1(), "rule__LogicalExpression__Alternatives_1_1_0_1");
					put(grammarAccess.getArgsExpressionAccess().getAlternatives_1(), "rule__ArgsExpression__Alternatives_1");
					put(grammarAccess.getCreatingExpressionAccess().getAlternatives_1_1(), "rule__CreatingExpression__Alternatives_1_1");
					put(grammarAccess.getPrimaryExpressionAccess().getAlternatives_1(), "rule__PrimaryExpression__Alternatives_1");
					put(grammarAccess.getLiteralExpressionAccess().getLiteral_valueAlternatives_0(), "rule__LiteralExpression__Literal_valueAlternatives_0");
					put(grammarAccess.getTypeSpecifierAccess().getNameAlternatives_0(), "rule__TypeSpecifier__NameAlternatives_0");
					put(grammarAccess.getModifierAccess().getAlternatives(), "rule__Modifier__Alternatives");
					put(grammarAccess.getIntegerLiteralAccess().getAlternatives(), "rule__IntegerLiteral__Alternatives");
					put(grammarAccess.getHexa_numeralAccess().getAlternatives(), "rule__Hexa_numeral__Alternatives");
					put(grammarAccess.getHexa_numeralAccess().getAlternatives_0_0(), "rule__Hexa_numeral__Alternatives_0_0");
					put(grammarAccess.getFloatLiteralAccess().getAlternatives(), "rule__FloatLiteral__Alternatives");
					put(grammarAccess.getForStatementAccess().getAlternatives_2(), "rule__ForStatement__Alternatives_2");
					put(grammarAccess.getStatementAccess().getAlternatives(), "rule__Statement__Alternatives");
					put(grammarAccess.getSwitchStatementAccess().getAlternatives_5(), "rule__SwitchStatement__Alternatives_5");
					put(grammarAccess.getCompilationUnitAccess().getGroup(), "rule__CompilationUnit__Group__0");
					put(grammarAccess.getPackageStatementAccess().getGroup(), "rule__PackageStatement__Group__0");
					put(grammarAccess.getImportStatementAccess().getGroup(), "rule__ImportStatement__Group__0");
					put(grammarAccess.getImportStatement_Access().getGroup(), "rule__ImportStatement___Group__0");
					put(grammarAccess.getImportStatement_Access().getGroup_1(), "rule__ImportStatement___Group_1__0");
					put(grammarAccess.getObjectNameAccess().getGroup(), "rule__ObjectName__Group__0");
					put(grammarAccess.getObjectNameAccess().getGroup_1(), "rule__ObjectName__Group_1__0");
					put(grammarAccess.getTypeDeclarationAccess().getGroup(), "rule__TypeDeclaration__Group__0");
					put(grammarAccess.getClassDeclarationAccess().getGroup(), "rule__ClassDeclaration__Group__0");
					put(grammarAccess.getClassDeclarationAccess().getGroup_4(), "rule__ClassDeclaration__Group_4__0");
					put(grammarAccess.getClassDeclarationAccess().getGroup_5(), "rule__ClassDeclaration__Group_5__0");
					put(grammarAccess.getClassDeclarationAccess().getGroup_5_2(), "rule__ClassDeclaration__Group_5_2__0");
					put(grammarAccess.getInterfaceDeclarationAccess().getGroup(), "rule__InterfaceDeclaration__Group__0");
					put(grammarAccess.getInterfaceDeclarationAccess().getGroup_4(), "rule__InterfaceDeclaration__Group_4__0");
					put(grammarAccess.getInterfaceDeclarationAccess().getGroup_4_2(), "rule__InterfaceDeclaration__Group_4_2__0");
					put(grammarAccess.getFieldDeclarationAccess().getGroup_2(), "rule__FieldDeclaration__Group_2__0");
					put(grammarAccess.getStaticInitializerAccess().getGroup(), "rule__StaticInitializer__Group__0");
					put(grammarAccess.getMethodDeclarationAccess().getGroup(), "rule__MethodDeclaration__Group__0");
					put(grammarAccess.getMethodDeclarationAccess().getGroup_6(), "rule__MethodDeclaration__Group_6__0");
					put(grammarAccess.getConstructorDeclarationAccess().getGroup(), "rule__ConstructorDeclaration__Group__0");
					put(grammarAccess.getParameterListAccess().getGroup(), "rule__ParameterList__Group__0");
					put(grammarAccess.getParameterListAccess().getGroup_1(), "rule__ParameterList__Group_1__0");
					put(grammarAccess.getParameterAccess().getGroup(), "rule__Parameter__Group__0");
					put(grammarAccess.getParameterAccess().getGroup_2(), "rule__Parameter__Group_2__0");
					put(grammarAccess.getStatementBlockAccess().getGroup(), "rule__StatementBlock__Group__0");
					put(grammarAccess.getVariableDeclarationAccess().getGroup(), "rule__VariableDeclaration__Group__0");
					put(grammarAccess.getVariableDeclarationAccess().getGroup_3(), "rule__VariableDeclaration__Group_3__0");
					put(grammarAccess.getVariableDeclaratorAccess().getGroup(), "rule__VariableDeclarator__Group__0");
					put(grammarAccess.getVariableDeclaratorAccess().getGroup_2(), "rule__VariableDeclarator__Group_2__0");
					put(grammarAccess.getVariableDeclaratorAccess().getGroup_3(), "rule__VariableDeclarator__Group_3__0");
					put(grammarAccess.getVariableInitializerAccess().getGroup_1(), "rule__VariableInitializer__Group_1__0");
					put(grammarAccess.getVariableInitializerAccess().getGroup_1_1(), "rule__VariableInitializer__Group_1_1__0");
					put(grammarAccess.getVariableInitializerAccess().getGroup_1_1_1(), "rule__VariableInitializer__Group_1_1_1__0");
					put(grammarAccess.getTypeAccess().getGroup(), "rule__Type__Group__0");
					put(grammarAccess.getTypeAccess().getGroup_1(), "rule__Type__Group_1__0");
					put(grammarAccess.getNumericExpressionAccess().getGroup_0(), "rule__NumericExpression__Group_0__0");
					put(grammarAccess.getNumericExpressionAccess().getGroup_1(), "rule__NumericExpression__Group_1__0");
					put(grammarAccess.getNumericExpressionAccess().getGroup_1_1_1(), "rule__NumericExpression__Group_1_1_1__0");
					put(grammarAccess.getBitExpressionAccess().getGroup_0(), "rule__BitExpression__Group_0__0");
					put(grammarAccess.getBitExpressionAccess().getGroup_1(), "rule__BitExpression__Group_1__0");
					put(grammarAccess.getBitExpressionAccess().getGroup_1_1(), "rule__BitExpression__Group_1_1__0");
					put(grammarAccess.getTestingExpressionAccess().getGroup(), "rule__TestingExpression__Group__0");
					put(grammarAccess.getTestingExpressionAccess().getGroup_1(), "rule__TestingExpression__Group_1__0");
					put(grammarAccess.getLogicalExpressionAccess().getGroup_0(), "rule__LogicalExpression__Group_0__0");
					put(grammarAccess.getLogicalExpressionAccess().getGroup_1(), "rule__LogicalExpression__Group_1__0");
					put(grammarAccess.getLogicalExpressionAccess().getGroup_1_1_0(), "rule__LogicalExpression__Group_1_1_0__0");
					put(grammarAccess.getLogicalExpressionAccess().getGroup_1_1_1(), "rule__LogicalExpression__Group_1_1_1__0");
					put(grammarAccess.getLogicalExpressionAccess().getGroup_2(), "rule__LogicalExpression__Group_2__0");
					put(grammarAccess.getLogicalExpressionAccess().getGroup_3(), "rule__LogicalExpression__Group_3__0");
					put(grammarAccess.getArgsExpressionAccess().getGroup(), "rule__ArgsExpression__Group__0");
					put(grammarAccess.getArgsExpressionAccess().getGroup_1_0(), "rule__ArgsExpression__Group_1_0__0");
					put(grammarAccess.getArgsExpressionAccess().getGroup_1_1(), "rule__ArgsExpression__Group_1_1__0");
					put(grammarAccess.getArgsExpressionAccess().getGroup_1_2(), "rule__ArgsExpression__Group_1_2__0");
					put(grammarAccess.getArgsExpressionAccess().getGroup_1_3(), "rule__ArgsExpression__Group_1_3__0");
					put(grammarAccess.getArgsExpressionAccess().getGroup_1_4(), "rule__ArgsExpression__Group_1_4__0");
					put(grammarAccess.getArglistAccess().getGroup(), "rule__Arglist__Group__0");
					put(grammarAccess.getArglistAccess().getGroup_1(), "rule__Arglist__Group_1__0");
					put(grammarAccess.getCastingExpressionAccess().getGroup(), "rule__CastingExpression__Group__0");
					put(grammarAccess.getCastingExpressionAccess().getGroup_1(), "rule__CastingExpression__Group_1__0");
					put(grammarAccess.getCreatingExpressionAccess().getGroup(), "rule__CreatingExpression__Group__0");
					put(grammarAccess.getCreatingExpressionAccess().getGroup_1(), "rule__CreatingExpression__Group_1__0");
					put(grammarAccess.getCreatingExpressionAccess().getGroup_1_1_0(), "rule__CreatingExpression__Group_1_1_0__0");
					put(grammarAccess.getCreatingExpressionAccess().getGroup_1_1_1(), "rule__CreatingExpression__Group_1_1_1__0");
					put(grammarAccess.getCreatingExpressionAccess().getGroup_1_1_1_1(), "rule__CreatingExpression__Group_1_1_1_1__0");
					put(grammarAccess.getCreatingExpressionAccess().getGroup_1_1_1_2(), "rule__CreatingExpression__Group_1_1_1_2__0");
					put(grammarAccess.getParenthesisExpressionAccess().getGroup(), "rule__ParenthesisExpression__Group__0");
					put(grammarAccess.getParenthesisExpressionAccess().getGroup_1(), "rule__ParenthesisExpression__Group_1__0");
					put(grammarAccess.getPrimaryExpressionAccess().getGroup(), "rule__PrimaryExpression__Group__0");
					put(grammarAccess.getDecimal_digitsAccess().getGroup(), "rule__Decimal_digits__Group__0");
					put(grammarAccess.getDoStatementAccess().getGroup(), "rule__DoStatement__Group__0");
					put(grammarAccess.getDecimal_integer_literalAccess().getGroup(), "rule__Decimal_integer_literal__Group__0");
					put(grammarAccess.getHex_integer_literalAccess().getGroup(), "rule__Hex_integer_literal__Group__0");
					put(grammarAccess.getHexa_numeralAccess().getGroup_0(), "rule__Hexa_numeral__Group_0__0");
					put(grammarAccess.getOctal_integer_literalAccess().getGroup(), "rule__Octal_integer_literal__Group__0");
					put(grammarAccess.getFloatLiteralAccess().getGroup_0(), "rule__FloatLiteral__Group_0__0");
					put(grammarAccess.getFloatLiteralAccess().getGroup_1(), "rule__FloatLiteral__Group_1__0");
					put(grammarAccess.getForStatementAccess().getGroup(), "rule__ForStatement__Group__0");
					put(grammarAccess.getForStatementAccess().getGroup_2_1(), "rule__ForStatement__Group_2_1__0");
					put(grammarAccess.getIfStatementAccess().getGroup(), "rule__IfStatement__Group__0");
					put(grammarAccess.getIfStatementAccess().getGroup_5(), "rule__IfStatement__Group_5__0");
					put(grammarAccess.getStatementAccess().getGroup_1(), "rule__Statement__Group_1__0");
					put(grammarAccess.getStatementAccess().getGroup_9(), "rule__Statement__Group_9__0");
					put(grammarAccess.getStatementAccess().getGroup_9_1(), "rule__Statement__Group_9_1__0");
					put(grammarAccess.getStatementAccess().getGroup_10(), "rule__Statement__Group_10__0");
					put(grammarAccess.getStatementAccess().getGroup_10_1(), "rule__Statement__Group_10_1__0");
					put(grammarAccess.getStatementAccess().getGroup_11(), "rule__Statement__Group_11__0");
					put(grammarAccess.getStatementAccess().getGroup_11_1(), "rule__Statement__Group_11_1__0");
					put(grammarAccess.getStatementAccess().getGroup_12(), "rule__Statement__Group_12__0");
					put(grammarAccess.getStatementAccess().getGroup_12_1(), "rule__Statement__Group_12_1__0");
					put(grammarAccess.getStatementAccess().getGroup_13(), "rule__Statement__Group_13__0");
					put(grammarAccess.getStatementAccess().getGroup_13_1(), "rule__Statement__Group_13_1__0");
					put(grammarAccess.getStatementAccess().getGroup_14(), "rule__Statement__Group_14__0");
					put(grammarAccess.getStatementAccess().getGroup_14_1(), "rule__Statement__Group_14_1__0");
					put(grammarAccess.getStatementAccess().getGroup_15(), "rule__Statement__Group_15__0");
					put(grammarAccess.getSwitchStatementAccess().getGroup(), "rule__SwitchStatement__Group__0");
					put(grammarAccess.getSwitchStatementAccess().getGroup_5_0(), "rule__SwitchStatement__Group_5_0__0");
					put(grammarAccess.getSwitchStatementAccess().getGroup_5_1(), "rule__SwitchStatement__Group_5_1__0");
					put(grammarAccess.getTryStatementAccess().getGroup(), "rule__TryStatement__Group__0");
					put(grammarAccess.getTryStatementAccess().getGroup_2(), "rule__TryStatement__Group_2__0");
					put(grammarAccess.getTryStatementAccess().getGroup_3(), "rule__TryStatement__Group_3__0");
					put(grammarAccess.getWhile_statementAccess().getGroup(), "rule__While_statement__Group__0");
					put(grammarAccess.getHeadAccess().getJavaAssignment(), "rule__Head__JavaAssignment");
					put(grammarAccess.getCompilationUnitAccess().getPackageAssignment_1(), "rule__CompilationUnit__PackageAssignment_1");
					put(grammarAccess.getCompilationUnitAccess().getImportsAssignment_2(), "rule__CompilationUnit__ImportsAssignment_2");
					put(grammarAccess.getCompilationUnitAccess().getType_declarationsAssignment_3(), "rule__CompilationUnit__Type_declarationsAssignment_3");
					put(grammarAccess.getTypeDeclarationAccess().getClass_declarationAssignment_0_0(), "rule__TypeDeclaration__Class_declarationAssignment_0_0");
					put(grammarAccess.getTypeDeclarationAccess().getInterface_declarationAssignment_0_1(), "rule__TypeDeclaration__Interface_declarationAssignment_0_1");
					put(grammarAccess.getClassDeclarationAccess().getModifiersAssignment_1(), "rule__ClassDeclaration__ModifiersAssignment_1");
					put(grammarAccess.getClassDeclarationAccess().getField_declarationsAssignment_7(), "rule__ClassDeclaration__Field_declarationsAssignment_7");
					put(grammarAccess.getInterfaceDeclarationAccess().getField_declarationsAssignment_6(), "rule__InterfaceDeclaration__Field_declarationsAssignment_6");
					put(grammarAccess.getFieldDeclarationAccess().getDeclarationAssignment_0(), "rule__FieldDeclaration__DeclarationAssignment_0");
					put(grammarAccess.getMethodDeclarationAccess().getStatement_blockAssignment_7_0(), "rule__MethodDeclaration__Statement_blockAssignment_7_0");
					put(grammarAccess.getConstructorDeclarationAccess().getStatement_blockAssignment_5(), "rule__ConstructorDeclaration__Statement_blockAssignment_5");
					put(grammarAccess.getParameterListAccess().getParametersAssignment_1_1(), "rule__ParameterList__ParametersAssignment_1_1");
					put(grammarAccess.getStatementBlockAccess().getStatementsAssignment_2(), "rule__StatementBlock__StatementsAssignment_2");
					put(grammarAccess.getVariableDeclarationAccess().getTypeAssignment_1(), "rule__VariableDeclaration__TypeAssignment_1");
					put(grammarAccess.getVariableDeclarationAccess().getVariable_declaratorAssignment_2(), "rule__VariableDeclaration__Variable_declaratorAssignment_2");
					put(grammarAccess.getVariableDeclarationAccess().getVariable_declaratorsAssignment_3_1(), "rule__VariableDeclaration__Variable_declaratorsAssignment_3_1");
					put(grammarAccess.getVariableDeclaratorAccess().getVariable_initializerAssignment_3_1(), "rule__VariableDeclarator__Variable_initializerAssignment_3_1");
					put(grammarAccess.getVariableInitializerAccess().getExprAssignment_0(), "rule__VariableInitializer__ExprAssignment_0");
					put(grammarAccess.getVariableInitializerAccess().getVariable_initializerAssignment_1_1_0(), "rule__VariableInitializer__Variable_initializerAssignment_1_1_0");
					put(grammarAccess.getVariableInitializerAccess().getVariable_initializersAssignment_1_1_1_1(), "rule__VariableInitializer__Variable_initializersAssignment_1_1_1_1");
					put(grammarAccess.getTypeAccess().getSpecifierAssignment_0(), "rule__Type__SpecifierAssignment_0");
					put(grammarAccess.getNumericExpressionAccess().getRightAssignment_1_1_1_2(), "rule__NumericExpression__RightAssignment_1_1_1_2");
					put(grammarAccess.getBitExpressionAccess().getRightAssignment_1_1_2(), "rule__BitExpression__RightAssignment_1_1_2");
					put(grammarAccess.getTestingExpressionAccess().getRightAssignment_1_2(), "rule__TestingExpression__RightAssignment_1_2");
					put(grammarAccess.getLogicalExpressionAccess().getRightAssignment_0_1(), "rule__LogicalExpression__RightAssignment_0_1");
					put(grammarAccess.getLogicalExpressionAccess().getRightAssignment_1_1_0_2(), "rule__LogicalExpression__RightAssignment_1_1_0_2");
					put(grammarAccess.getLogicalExpressionAccess().getRightAssignment_1_1_1_2(), "rule__LogicalExpression__RightAssignment_1_1_1_2");
					put(grammarAccess.getLogicalExpressionAccess().getTernary_endAssignment_1_1_1_5(), "rule__LogicalExpression__Ternary_endAssignment_1_1_1_5");
					put(grammarAccess.getArgsExpressionAccess().getArg_listAssignment_1_0_1(), "rule__ArgsExpression__Arg_listAssignment_1_0_1");
					put(grammarAccess.getArgsExpressionAccess().getRightAssignment_1_1_2(), "rule__ArgsExpression__RightAssignment_1_1_2");
					put(grammarAccess.getArgsExpressionAccess().getRightAssignment_1_2_2(), "rule__ArgsExpression__RightAssignment_1_2_2");
					put(grammarAccess.getArgsExpressionAccess().getRightAssignment_1_3_2(), "rule__ArgsExpression__RightAssignment_1_3_2");
					put(grammarAccess.getArglistAccess().getArgAssignment_0(), "rule__Arglist__ArgAssignment_0");
					put(grammarAccess.getArglistAccess().getArgsAssignment_1_1(), "rule__Arglist__ArgsAssignment_1_1");
					put(grammarAccess.getCastingExpressionAccess().getTypesAssignment_1_2(), "rule__CastingExpression__TypesAssignment_1_2");
					put(grammarAccess.getCastingExpressionAccess().getRightAssignment_1_4(), "rule__CastingExpression__RightAssignment_1_4");
					put(grammarAccess.getCreatingExpressionAccess().getArg_listAssignment_1_1_0_2(), "rule__CreatingExpression__Arg_listAssignment_1_1_0_2");
					put(grammarAccess.getCreatingExpressionAccess().getType_specifiersAssignment_1_1_1_0(), "rule__CreatingExpression__Type_specifiersAssignment_1_1_1_0");
					put(grammarAccess.getCreatingExpressionAccess().getParenthesisAssignment_1_1_1_1_1(), "rule__CreatingExpression__ParenthesisAssignment_1_1_1_1_1");
					put(grammarAccess.getParenthesisExpressionAccess().getParenthesisAssignment_1_1(), "rule__ParenthesisExpression__ParenthesisAssignment_1_1");
					put(grammarAccess.getPrimaryExpressionAccess().getValueAssignment_1_0(), "rule__PrimaryExpression__ValueAssignment_1_0");
					put(grammarAccess.getLiteralExpressionAccess().getLiteral_valueAssignment(), "rule__LiteralExpression__Literal_valueAssignment");
					put(grammarAccess.getTypeSpecifierAccess().getNameAssignment(), "rule__TypeSpecifier__NameAssignment");
					put(grammarAccess.getDoStatementAccess().getStatementAssignment_1(), "rule__DoStatement__StatementAssignment_1");
					put(grammarAccess.getDoStatementAccess().getExpressionAssignment_4(), "rule__DoStatement__ExpressionAssignment_4");
					put(grammarAccess.getForStatementAccess().getVariable_declarationAssignment_2_0(), "rule__ForStatement__Variable_declarationAssignment_2_0");
					put(grammarAccess.getForStatementAccess().getFor_expression1Assignment_2_1_0(), "rule__ForStatement__For_expression1Assignment_2_1_0");
					put(grammarAccess.getForStatementAccess().getFor_expression2Assignment_3(), "rule__ForStatement__For_expression2Assignment_3");
					put(grammarAccess.getForStatementAccess().getFor_expression3Assignment_5(), "rule__ForStatement__For_expression3Assignment_5");
					put(grammarAccess.getForStatementAccess().getStatementAssignment_8(), "rule__ForStatement__StatementAssignment_8");
					put(grammarAccess.getIfStatementAccess().getExpressionAssignment_2(), "rule__IfStatement__ExpressionAssignment_2");
					put(grammarAccess.getIfStatementAccess().getIf_statementAssignment_4(), "rule__IfStatement__If_statementAssignment_4");
					put(grammarAccess.getIfStatementAccess().getElse_statementAssignment_5_1(), "rule__IfStatement__Else_statementAssignment_5_1");
					put(grammarAccess.getStatementAccess().getVariable_declarationAssignment_0(), "rule__Statement__Variable_declarationAssignment_0");
					put(grammarAccess.getStatementAccess().getStatement_expressionAssignment_1_0(), "rule__Statement__Statement_expressionAssignment_1_0");
					put(grammarAccess.getStatementAccess().getStatement_blockAssignment_2(), "rule__Statement__Statement_blockAssignment_2");
					put(grammarAccess.getStatementAccess().getIf_statementAssignment_3(), "rule__Statement__If_statementAssignment_3");
					put(grammarAccess.getStatementAccess().getDo_statementAssignment_4(), "rule__Statement__Do_statementAssignment_4");
					put(grammarAccess.getStatementAccess().getWhile_statementAssignment_5(), "rule__Statement__While_statementAssignment_5");
					put(grammarAccess.getStatementAccess().getFor_statementAssignment_6(), "rule__Statement__For_statementAssignment_6");
					put(grammarAccess.getStatementAccess().getTry_statementAssignment_7(), "rule__Statement__Try_statementAssignment_7");
					put(grammarAccess.getStatementAccess().getSwith_statementAssignment_8(), "rule__Statement__Swith_statementAssignment_8");
					put(grammarAccess.getStatementAccess().getSync_expressionAssignment_9_1_2(), "rule__Statement__Sync_expressionAssignment_9_1_2");
					put(grammarAccess.getStatementAccess().getSync_statementAssignment_9_1_4(), "rule__Statement__Sync_statementAssignment_9_1_4");
					put(grammarAccess.getStatementAccess().getReturn_expressionAssignment_10_1_1(), "rule__Statement__Return_expressionAssignment_10_1_1");
					put(grammarAccess.getStatementAccess().getThrow_expressionAssignment_11_1_1(), "rule__Statement__Throw_expressionAssignment_11_1_1");
					put(grammarAccess.getStatementAccess().getNamed_statementAssignment_12_1_2(), "rule__Statement__Named_statementAssignment_12_1_2");
					put(grammarAccess.getSwitchStatementAccess().getSwitch_expressionAssignment_2(), "rule__SwitchStatement__Switch_expressionAssignment_2");
					put(grammarAccess.getSwitchStatementAccess().getCase_expressionsAssignment_5_0_1(), "rule__SwitchStatement__Case_expressionsAssignment_5_0_1");
					put(grammarAccess.getSwitchStatementAccess().getStatementsAssignment_5_2(), "rule__SwitchStatement__StatementsAssignment_5_2");
					put(grammarAccess.getTryStatementAccess().getTry_statementAssignment_1(), "rule__TryStatement__Try_statementAssignment_1");
					put(grammarAccess.getTryStatementAccess().getParamentersAssignment_2_2(), "rule__TryStatement__ParamentersAssignment_2_2");
					put(grammarAccess.getTryStatementAccess().getCatch_statementsAssignment_2_4(), "rule__TryStatement__Catch_statementsAssignment_2_4");
					put(grammarAccess.getTryStatementAccess().getFinally_statementAssignment_3_1(), "rule__TryStatement__Finally_statementAssignment_3_1");
					put(grammarAccess.getWhile_statementAccess().getExpressionAssignment_2(), "rule__While_statement__ExpressionAssignment_2");
					put(grammarAccess.getWhile_statementAccess().getStatementAssignment_4(), "rule__While_statement__StatementAssignment_4");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.xtext.com.ui.contentassist.antlr.internal.InternalJavadslParser typedParser = (org.xtext.com.ui.contentassist.antlr.internal.InternalJavadslParser) parser;
			typedParser.entryRuleHead();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public JavadslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(JavadslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
