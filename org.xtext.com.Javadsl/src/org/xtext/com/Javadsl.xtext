grammar org.xtext.com.Javadsl with org.eclipse.xtext.common.Terminals

generate javadsl "http://www.xtext.org/com/Javadsl"

Head:
	java+=CompilationUnit
;

CompilationUnit:
  {CompilationUnit} package=(PackageStatement)? imports+=ImportStatement* type_declarations+=TypeDeclaration*
;

PackageStatement:
    'package' ObjectName ';'
;

ImportStatement:
    'import' ImportStatement_ 
;

ImportStatement_:
    ObjectName ('.' '*')? ';' 
;

ObjectName:
	ID ('.' ID)*
;

TypeDeclaration:
    (class_declaration=ClassDeclaration | interface_declaration=InterfaceDeclaration) ';' 
;

ClassDeclaration:
	{ClassDeclaration} modifiers+=Modifier* 'class' ID ('extends' ObjectName)? ('implements' ObjectName ('.' ObjectName)*)?  
	'{' (field_declarations+=FieldDeclaration)* '}'
;

InterfaceDeclaration:
	{InterfaceDeclaration} (Modifier)* 'interface' ID ('extends' ObjectName ( '.' ObjectName)* )? 
	'{' (field_declarations+=FieldDeclaration)* '}'
;

FieldDeclaration:
    ( declaration=(MethodDeclaration 
      | ConstructorDeclaration 
      | VariableDeclaration ) ) 
      | StaticInitializer 
      | {FieldDeclaration} ';'
;

StaticInitializer: 
      "static" StatementBlock ;

MethodDeclaration: 
      modifiers+=(Modifier)* type=Type ID 
      '(' (ParameterList)? ')' ('[' ']')* 
      (body=StatementBlock | ';') ;

ConstructorDeclaration: 
      (Modifier)* ID '(' (ParameterList)? ')' 
      statement_block=StatementBlock ;
      
ParameterList: 
      Parameter (',' parameters+=Parameter)* ;
      
Parameter: 
      Type ID ('[' ']')* ;
      
StatementBlock: '{' {StatementBlock} (statements+=Statement)* '}' ;
      
VariableDeclaration: 
      modifiers+=(Modifier)* type=Type variable_declarator=VariableDeclarator 
      (',' variable_declarators+=VariableDeclarator)* ';' ;

VariableDeclarator: 
      {VariableDeclarator} ID ('[' ']')* ( '=' variable_initializer=VariableInitializer )? ;

VariableInitializer: 
      expr=Expression 
      | ('{' (variable_initializer=VariableInitializer 
      (',' variable_initializers+=VariableInitializer)* (',')? )? '}') ;

Type: 
	specifier=TypeSpecifier ('[' ']')*
;

Expression returns Expression: 
	NumericExpression 
; 

NumericExpression returns Expression: 
	('-' | '++' | '--') BitExpression
      
	| BitExpression (('++' | '--') | ({NumericExpression.left=current} tokens=('+' | '+=' | '-' | '-=' | '*' | '*=' | '/' | '/=' | '%' | '%=') right=BitExpression)*)
;

BitExpression returns Expression:
	'~' LogicalExpression
    | LogicalExpression ({BitExpression.left=current} tokens=('>>=' | '<<' | '>>' | '>>>') right=LogicalExpression)* 
;

TestingExpression returns Expression: 
      ArgsExpression
      ({TestingExpression.left=current} tokens=('>' | '<' | '>=' | '<=' | '==' | '!=') right=ArgsExpression )*
;

LogicalExpression returns Expression: 
    '!' right=TestingExpression
      | TestingExpression ({LogicalExpression.left=current} tokens=(LOGIC_TOKENS) right=TestingExpression | {LogicalExpression.left=current}'?' right=TestingExpression {LogicalExpression.ternary=current}':' ternary_end=TestingExpression)* 
      | {LogicalExpression} "true" 
      | {LogicalExpression} "false"
;

terminal LOGIC_TOKENS:
	("&" | "&=" | '|' | '|=' | '^' | '^=' | "&&" | '||=' | '||')
;

ArgsExpression returns Expression:
	CastingExpression ('(' arg_list+=Arglist? ')'| {ArgsExpression.left=current}'.' right=CastingExpression | {ArgsExpression.left=current}'[' right=CastingExpression ']' | {ArgsExpression.left=current}',' right=CastingExpression | {Args.left=current}'instanceof' ObjectName )*
;

Arglist: arg=CastingExpression (',' args+=CastingExpression)* ;
      
CastingExpression returns Expression: 
      CreatingExpression ({CastingExpression.left=current}'(' types+=Type ')' right=CreatingExpression)*;
      
CreatingExpression returns Expression: 
	ParenthesisExpression
      ("new" (
      	(ObjectName '(' (arg_list+=Arglist)? ')') | (type_specifiers+=TypeSpecifier ('[' parenthesis+=ParenthesisExpression ']')? ('[' ']')*)
      ))* ;

ParenthesisExpression returns Expression:
	PrimaryExpression ('(' parenthesis+=PrimaryExpression ')')*
;

PrimaryExpression returns Expression: 
	literal=(IntegerLiteral | FloatLiteral| StringLiteral| CharacterLiteral|
		NullLiteral| SuperLiteral| ThisLiteral | ObjectLiteral
	)
;

ObjectLiteral:
	{ObjectType} ID
;

ThisLiteral:
	{ThisType} "this"
;

SuperLiteral:
	{SuperType} "super"
;

NullLiteral:
	{NullType} "null"
;

StringLiteral:
	{ObjectType} STRING
;

TypeSpecifier: 
	BooleanType
	| ByteType 
	| CharType
	| ShortType 
	| IntType 
	| FloatType 
	| LongType 
	| DoubleType
	| VoidType
	| ObjectType
;

CharType:
	{CharType} name="char"
;

BooleanType:
	{BooleanType} name="boolean"
;

ObjectType:
	{ObjectType} name=ID
;

VoidType:
	{VoidType} name="void"
;

DoubleType:
	{DoubleType} name="double"
;

LongType:
	{LongType} name="long"
;

ByteType:
	{ByteType} name="byte"
;

ShortType:
	{ShortType} name="short"
;

FloatType:
	{FloatType} name="float"
;

IntType:
	{IntType} name="int"
;


Modifier:
	"public" 
	| "private" 
	| "protected" 
	| "static" 
	| "final" 
	| "native" 
	| "synchronized" 
	| "abstract" 
	| "threadsafe" 
	| "transient" 
;

CharacterLiteral: 
	{CharType} STRING ;

decimal_digits: 
	INT INT*
;

DoStatement: 
      "do" statement=Statement "while" '(' expression=Expression ')' ';' ;

exponent_part: 
	('0..9e');

IntegerLiteral:
	{IntType} (decimal_integer_literal |
	hex_integer_literal |
	octal_integer_literal)
;

decimal_integer_literal: decimal_digits NUMBER_SUFFIX?;

hex_integer_literal: hexa_numeral NUMBER_SUFFIX?;

hexa_numeral:
	('0x'|'0X') HEXA | HEXA
;

octal_integer_literal: octal_numeral NUMBER_SUFFIX?;

octal_numeral:
	ZERO_TO_SEVEN*	
;

FloatLiteral: 
	{FloatType} (decimal_digits '.'? decimal_digits? (exponent_part)? FLOAT_SUFFIX?
	| '.' decimal_digits (exponent_part)? FLOAT_SUFFIX?) 	
;

ForStatement: 
	"for" '(' (variable_declaration=VariableDeclaration | (for_expression1=Expression ';') | ';') 
	for_expression2=Expression? ';' 
	for_expression3=Expression? ';' 
	')' statement=Statement ;

IfStatement: 
      "if" '(' expression=Expression')' if_statement=Statement 
      ("else" else_statement=Statement)? ;	   

Statement: 
	variable_declaration=VariableDeclaration 
	| (statement_expression=Expression ';') 
	| (statement_block=StatementBlock) 
	| (if_statement=IfStatement) 
	| (do_statement=DoStatement) 
	| (while_statement=while_statement) 
	| (for_statement=ForStatement) 
	| (try_statement=TryStatement) 
	| (swith_statement=SwitchStatement)
	| {Statement} ID '=' assignment_statement=VariableInitializer ';'
	| {Statement} ("synchronized" '(' sync_expression=Expression ')' sync_statement=Statement) 
	| {ReturnStatement} ("return" return_expression=Expression? ';') 
	| {Statement} ("throw" throw_expression=Expression ';') 
	| {Statement} (ID ':' named_statement=Statement) 
	| {Statement} ("break" (ID)? ';') 
	| {Statement} ("continue" (ID)? ';') 
	| {Statement} (';');

SwitchStatement: 
	"switch" '(' switch_expression=Expression ')' '{' 
	( ("case" case_expressions+=Expression ':') 
	| ("default" ':') 
	| statements+=Statement )*
	'}' ;

TryStatement: 
	"try" try_statement=Statement 
	("catch" '(' paramenters+=Parameter ')' catch_statements+=Statement)* 
	("finally" finally_statement=Statement)? ;

while_statement: 
	"while" '(' expression=Expression ')' statement=Statement ;

terminal HEXA:
	('0..9a..f')
;

terminal FLOAT_SUFFIX:
	('0..9f') | ('0..9d')
;

terminal NUMBER_SUFFIX:
	('0..9L') | ('0..9l')
;

terminal ZERO_TO_SEVEN:
	('0..7')
;