/*
 * generated by Xtext
 */
package org.xtext.com.validation

import org.eclipse.xtext.validation.Check
import org.xtext.com.javadsl.IfStatement
import org.xtext.com.javadsl.JavadslPackage
import org.xtext.com.javadsl.LogicalExpression
import org.xtext.com.javadsl.TestingExpression
import org.xtext.com.javadsl.VariableDeclaration

//import org.eclipse.xtext.validation.Check

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class JavadslValidator extends AbstractJavadslValidator {
	
	public static val INVALID_TYPE = 'invalidType'
	
	@Check
	def checkType(VariableDeclaration v){
		if(v.type.specifier.equals("int") //&& (TODO:) check return
		){
			error("Invalid type, int required", JavadslPackage.Literals.TYPE__SPECIFIER)
			return
		}
	}
	
	@Check
	def checkType(IfStatement statement){
		if(!(statement.expression instanceof TestingExpression) && !(statement.expression instanceof LogicalExpression)){
			error("It's not boolean", JavadslPackage.Literals.IF_STATEMENT__EXPRESSION)
			return
		}
	}

//	
//	@Check
//	def checkTypes(ClassDeclaration c) {
//		val fields = c.getField_declarations();
//		
//		val List<MethodDeclaration> methods = new LinkedList<MethodDeclaration>();
//		val List<ConstructorDeclaration> constructors = new LinkedList<ConstructorDeclaration>();
//		val List<VariableDeclaration> variables = new LinkedList<VariableDeclaration>();
//		
//		for(field: fields){
//			val declaration = field.declaration;
//			if(declaration instanceof MethodDeclaration){
//				methods.add(declaration);
//				error("Test validator", declaration, JavadslPackage.Literals.FIELD_DECLARATION__DECLARATION);
//			}else if(declaration instanceof ConstructorDeclaration){
//				constructors.add(declaration);
//			}else if(declaration instanceof VariableDeclaration){
//				variables.add(declaration);
//			}
//		}
//		
//		checkMethodsTypes(methods);
//		checkVariablesTypes(variables);
//		checkConstructorsTypes(constructors);
//	}
//	
//	def checkConstructorsTypes(List<ConstructorDeclaration> declarations) {
//		throw new UnsupportedOperationException("TODO: auto-generated method stub")
//	}
//	
//	def checkVariablesTypes(List<VariableDeclaration> declarations) {
//		val variablesMap = new HashMap<String, List<VariableDeclarator>>();
//		for(declaration: declarations){
//			if(declaration.type != null){
//				val variables = new LinkedList<VariableDeclarator>();
//				variables.addAll(declaration.variable_declarators);
//				variables.add(declaration.variable_declarator);
//				variablesMap.put(declaration.type.specifier.name, variables);
//				
//			}
//		}
//		
//		for(String type: variablesMap.keySet()){
//			val variables = variablesMap.get(type);
//			for(variable: variables){
//				checkVariableExpressionType(variable.variable_initializer.expr, type);
//				checkVariableExpressionType(variable.variable_initializer.variable_initializer.expr, type)
//				for(initalizers:variable.variable_initializer.variable_initializers){
//					checkVariableExpressionType(variable.variable_initializer.expr, type)
//				}
//			}
//		}
//	}
//	
//	def checkVariableExpressionType(Expression expr, String type) {
//		if(expr!=null){
//			if(expr instanceof LiteralExpressionElements){
//				if(type.equals("String")){
//					error("Type error variable should be a string type", expr, JavadslPackage.Literals.EXPRESSION__LITERAL_VALUE)
//				}
//			}		
//		}
//	}
//	
//	def checkMethodsTypes(List<MethodDeclaration> declarations) {
//		throw new UnsupportedOperationException("TODO: auto-generated method stub")
//	}
}