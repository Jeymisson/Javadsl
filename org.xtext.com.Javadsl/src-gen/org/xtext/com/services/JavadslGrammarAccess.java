/*
 * generated by Xtext
 */
package org.xtext.com.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class JavadslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class HeadElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Head");
		private final Assignment cJavaAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cJavaCompilationUnitParserRuleCall_0 = (RuleCall)cJavaAssignment.eContents().get(0);
		
		//Head:
		//	java+=CompilationUnit;
		@Override public ParserRule getRule() { return rule; }

		//java+=CompilationUnit
		public Assignment getJavaAssignment() { return cJavaAssignment; }

		//CompilationUnit
		public RuleCall getJavaCompilationUnitParserRuleCall_0() { return cJavaCompilationUnitParserRuleCall_0; }
	}

	public class CompilationUnitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CompilationUnit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCompilationUnitAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cPackageAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPackagePackageStatementParserRuleCall_1_0 = (RuleCall)cPackageAssignment_1.eContents().get(0);
		private final Assignment cImportsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cImportsImportStatementParserRuleCall_2_0 = (RuleCall)cImportsAssignment_2.eContents().get(0);
		private final Assignment cType_declarationsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cType_declarationsTypeDeclarationParserRuleCall_3_0 = (RuleCall)cType_declarationsAssignment_3.eContents().get(0);
		
		//CompilationUnit:
		//	{CompilationUnit} package=PackageStatement? imports+=ImportStatement* type_declarations+=TypeDeclaration*;
		@Override public ParserRule getRule() { return rule; }

		//{CompilationUnit} package=PackageStatement? imports+=ImportStatement* type_declarations+=TypeDeclaration*
		public Group getGroup() { return cGroup; }

		//{CompilationUnit}
		public Action getCompilationUnitAction_0() { return cCompilationUnitAction_0; }

		//package=PackageStatement?
		public Assignment getPackageAssignment_1() { return cPackageAssignment_1; }

		//PackageStatement
		public RuleCall getPackagePackageStatementParserRuleCall_1_0() { return cPackagePackageStatementParserRuleCall_1_0; }

		//imports+=ImportStatement*
		public Assignment getImportsAssignment_2() { return cImportsAssignment_2; }

		//ImportStatement
		public RuleCall getImportsImportStatementParserRuleCall_2_0() { return cImportsImportStatementParserRuleCall_2_0; }

		//type_declarations+=TypeDeclaration*
		public Assignment getType_declarationsAssignment_3() { return cType_declarationsAssignment_3; }

		//TypeDeclaration
		public RuleCall getType_declarationsTypeDeclarationParserRuleCall_3_0() { return cType_declarationsTypeDeclarationParserRuleCall_3_0; }
	}

	public class PackageStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PackageStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cObjectNameParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//PackageStatement:
		//	"package" ObjectName ";";
		@Override public ParserRule getRule() { return rule; }

		//"package" ObjectName ";"
		public Group getGroup() { return cGroup; }

		//"package"
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }

		//ObjectName
		public RuleCall getObjectNameParserRuleCall_1() { return cObjectNameParserRuleCall_1; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class ImportStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ImportStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cImportStatement_ParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//ImportStatement:
		//	"import" ImportStatement_;
		@Override public ParserRule getRule() { return rule; }

		//"import" ImportStatement_
		public Group getGroup() { return cGroup; }

		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//ImportStatement_
		public RuleCall getImportStatement_ParserRuleCall_1() { return cImportStatement_ParserRuleCall_1; }
	}

	public class ImportStatement_Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ImportStatement_");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cObjectNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ImportStatement_:
		//	ObjectName ("." "*")? ";";
		@Override public ParserRule getRule() { return rule; }

		//ObjectName ("." "*")? ";"
		public Group getGroup() { return cGroup; }

		//ObjectName
		public RuleCall getObjectNameParserRuleCall_0() { return cObjectNameParserRuleCall_0; }

		//("." "*")?
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//"*"
		public Keyword getAsteriskKeyword_1_1() { return cAsteriskKeyword_1_1; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class ObjectNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ObjectName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//ObjectName:
		//	ID ("." ID)*;
		@Override public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class TypeDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cClass_declarationAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final RuleCall cClass_declarationClassDeclarationParserRuleCall_0_0_0 = (RuleCall)cClass_declarationAssignment_0_0.eContents().get(0);
		private final Assignment cInterface_declarationAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final RuleCall cInterface_declarationInterfaceDeclarationParserRuleCall_0_1_0 = (RuleCall)cInterface_declarationAssignment_0_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//TypeDeclaration:
		//	(class_declaration=ClassDeclaration | interface_declaration=InterfaceDeclaration) ";";
		@Override public ParserRule getRule() { return rule; }

		//(class_declaration=ClassDeclaration | interface_declaration=InterfaceDeclaration) ";"
		public Group getGroup() { return cGroup; }

		//class_declaration=ClassDeclaration | interface_declaration=InterfaceDeclaration
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//class_declaration=ClassDeclaration
		public Assignment getClass_declarationAssignment_0_0() { return cClass_declarationAssignment_0_0; }

		//ClassDeclaration
		public RuleCall getClass_declarationClassDeclarationParserRuleCall_0_0_0() { return cClass_declarationClassDeclarationParserRuleCall_0_0_0; }

		//interface_declaration=InterfaceDeclaration
		public Assignment getInterface_declarationAssignment_0_1() { return cInterface_declarationAssignment_0_1; }

		//InterfaceDeclaration
		public RuleCall getInterface_declarationInterfaceDeclarationParserRuleCall_0_1_0() { return cInterface_declarationInterfaceDeclarationParserRuleCall_0_1_0; }

		//";"
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}

	public class ClassDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ClassDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cClassDeclarationAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cModifiersAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cModifiersModifierParserRuleCall_1_0 = (RuleCall)cModifiersAssignment_1.eContents().get(0);
		private final Keyword cClassKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cIDTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cExtendsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final RuleCall cObjectNameParserRuleCall_4_1 = (RuleCall)cGroup_4.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cImplementsKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final RuleCall cObjectNameParserRuleCall_5_1 = (RuleCall)cGroup_5.eContents().get(1);
		private final Group cGroup_5_2 = (Group)cGroup_5.eContents().get(2);
		private final Keyword cFullStopKeyword_5_2_0 = (Keyword)cGroup_5_2.eContents().get(0);
		private final RuleCall cObjectNameParserRuleCall_5_2_1 = (RuleCall)cGroup_5_2.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cField_declarationsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cField_declarationsFieldDeclarationParserRuleCall_7_0 = (RuleCall)cField_declarationsAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//ClassDeclaration:
		//	{ClassDeclaration} modifiers+=Modifier* "class" ID ("extends" ObjectName)? ("implements" ObjectName ("."
		//	ObjectName)*)? "{" field_declarations+=FieldDeclaration* "}";
		@Override public ParserRule getRule() { return rule; }

		//{ClassDeclaration} modifiers+=Modifier* "class" ID ("extends" ObjectName)? ("implements" ObjectName ("." ObjectName)*)?
		//"{" field_declarations+=FieldDeclaration* "}"
		public Group getGroup() { return cGroup; }

		//{ClassDeclaration}
		public Action getClassDeclarationAction_0() { return cClassDeclarationAction_0; }

		//modifiers+=Modifier*
		public Assignment getModifiersAssignment_1() { return cModifiersAssignment_1; }

		//Modifier
		public RuleCall getModifiersModifierParserRuleCall_1_0() { return cModifiersModifierParserRuleCall_1_0; }

		//"class"
		public Keyword getClassKeyword_2() { return cClassKeyword_2; }

		//ID
		public RuleCall getIDTerminalRuleCall_3() { return cIDTerminalRuleCall_3; }

		//("extends" ObjectName)?
		public Group getGroup_4() { return cGroup_4; }

		//"extends"
		public Keyword getExtendsKeyword_4_0() { return cExtendsKeyword_4_0; }

		//ObjectName
		public RuleCall getObjectNameParserRuleCall_4_1() { return cObjectNameParserRuleCall_4_1; }

		//("implements" ObjectName ("." ObjectName)*)?
		public Group getGroup_5() { return cGroup_5; }

		//"implements"
		public Keyword getImplementsKeyword_5_0() { return cImplementsKeyword_5_0; }

		//ObjectName
		public RuleCall getObjectNameParserRuleCall_5_1() { return cObjectNameParserRuleCall_5_1; }

		//("." ObjectName)*
		public Group getGroup_5_2() { return cGroup_5_2; }

		//"."
		public Keyword getFullStopKeyword_5_2_0() { return cFullStopKeyword_5_2_0; }

		//ObjectName
		public RuleCall getObjectNameParserRuleCall_5_2_1() { return cObjectNameParserRuleCall_5_2_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }

		//field_declarations+=FieldDeclaration*
		public Assignment getField_declarationsAssignment_7() { return cField_declarationsAssignment_7; }

		//FieldDeclaration
		public RuleCall getField_declarationsFieldDeclarationParserRuleCall_7_0() { return cField_declarationsFieldDeclarationParserRuleCall_7_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}

	public class InterfaceDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InterfaceDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInterfaceDeclarationAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cModifierParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cInterfaceKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cIDTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cExtendsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final RuleCall cObjectNameParserRuleCall_4_1 = (RuleCall)cGroup_4.eContents().get(1);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cFullStopKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final RuleCall cObjectNameParserRuleCall_4_2_1 = (RuleCall)cGroup_4_2.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cField_declarationsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cField_declarationsFieldDeclarationParserRuleCall_6_0 = (RuleCall)cField_declarationsAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//InterfaceDeclaration:
		//	{InterfaceDeclaration} Modifier* "interface" ID ("extends" ObjectName ("." ObjectName)*)? "{"
		//	field_declarations+=FieldDeclaration* "}";
		@Override public ParserRule getRule() { return rule; }

		//{InterfaceDeclaration} Modifier* "interface" ID ("extends" ObjectName ("." ObjectName)*)? "{"
		//field_declarations+=FieldDeclaration* "}"
		public Group getGroup() { return cGroup; }

		//{InterfaceDeclaration}
		public Action getInterfaceDeclarationAction_0() { return cInterfaceDeclarationAction_0; }

		//Modifier*
		public RuleCall getModifierParserRuleCall_1() { return cModifierParserRuleCall_1; }

		//"interface"
		public Keyword getInterfaceKeyword_2() { return cInterfaceKeyword_2; }

		//ID
		public RuleCall getIDTerminalRuleCall_3() { return cIDTerminalRuleCall_3; }

		//("extends" ObjectName ("." ObjectName)*)?
		public Group getGroup_4() { return cGroup_4; }

		//"extends"
		public Keyword getExtendsKeyword_4_0() { return cExtendsKeyword_4_0; }

		//ObjectName
		public RuleCall getObjectNameParserRuleCall_4_1() { return cObjectNameParserRuleCall_4_1; }

		//("." ObjectName)*
		public Group getGroup_4_2() { return cGroup_4_2; }

		//"."
		public Keyword getFullStopKeyword_4_2_0() { return cFullStopKeyword_4_2_0; }

		//ObjectName
		public RuleCall getObjectNameParserRuleCall_4_2_1() { return cObjectNameParserRuleCall_4_2_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }

		//field_declarations+=FieldDeclaration*
		public Assignment getField_declarationsAssignment_6() { return cField_declarationsAssignment_6; }

		//FieldDeclaration
		public RuleCall getField_declarationsFieldDeclarationParserRuleCall_6_0() { return cField_declarationsFieldDeclarationParserRuleCall_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class FieldDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FieldDeclaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cDeclarationAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Alternatives cDeclarationAlternatives_0_0 = (Alternatives)cDeclarationAssignment_0.eContents().get(0);
		private final RuleCall cDeclarationMethodDeclarationParserRuleCall_0_0_0 = (RuleCall)cDeclarationAlternatives_0_0.eContents().get(0);
		private final RuleCall cDeclarationConstructorDeclarationParserRuleCall_0_0_1 = (RuleCall)cDeclarationAlternatives_0_0.eContents().get(1);
		private final RuleCall cDeclarationVariableDeclarationParserRuleCall_0_0_2 = (RuleCall)cDeclarationAlternatives_0_0.eContents().get(2);
		private final RuleCall cStaticInitializerParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cFieldDeclarationAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		
		//FieldDeclaration:
		//	declaration=(MethodDeclaration | ConstructorDeclaration | VariableDeclaration) | StaticInitializer |
		//	{FieldDeclaration} ";";
		@Override public ParserRule getRule() { return rule; }

		//declaration=(MethodDeclaration | ConstructorDeclaration | VariableDeclaration) | StaticInitializer | {FieldDeclaration}
		//";"
		public Alternatives getAlternatives() { return cAlternatives; }

		//declaration=(MethodDeclaration | ConstructorDeclaration | VariableDeclaration)
		public Assignment getDeclarationAssignment_0() { return cDeclarationAssignment_0; }

		//MethodDeclaration | ConstructorDeclaration | VariableDeclaration
		public Alternatives getDeclarationAlternatives_0_0() { return cDeclarationAlternatives_0_0; }

		//MethodDeclaration
		public RuleCall getDeclarationMethodDeclarationParserRuleCall_0_0_0() { return cDeclarationMethodDeclarationParserRuleCall_0_0_0; }

		//ConstructorDeclaration
		public RuleCall getDeclarationConstructorDeclarationParserRuleCall_0_0_1() { return cDeclarationConstructorDeclarationParserRuleCall_0_0_1; }

		//VariableDeclaration
		public RuleCall getDeclarationVariableDeclarationParserRuleCall_0_0_2() { return cDeclarationVariableDeclarationParserRuleCall_0_0_2; }

		//StaticInitializer
		public RuleCall getStaticInitializerParserRuleCall_1() { return cStaticInitializerParserRuleCall_1; }

		//{FieldDeclaration} ";"
		public Group getGroup_2() { return cGroup_2; }

		//{FieldDeclaration}
		public Action getFieldDeclarationAction_2_0() { return cFieldDeclarationAction_2_0; }

		//";"
		public Keyword getSemicolonKeyword_2_1() { return cSemicolonKeyword_2_1; }
	}

	public class StaticInitializerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StaticInitializer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStaticKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cStatementBlockParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//StaticInitializer:
		//	"static" StatementBlock;
		@Override public ParserRule getRule() { return rule; }

		//"static" StatementBlock
		public Group getGroup() { return cGroup; }

		//"static"
		public Keyword getStaticKeyword_0() { return cStaticKeyword_0; }

		//StatementBlock
		public RuleCall getStatementBlockParserRuleCall_1() { return cStatementBlockParserRuleCall_1; }
	}

	public class MethodDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MethodDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cModifierParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cTypeParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final RuleCall cParameterListParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cLeftSquareBracketKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Alternatives cAlternatives_7 = (Alternatives)cGroup.eContents().get(7);
		private final Assignment cStatement_blockAssignment_7_0 = (Assignment)cAlternatives_7.eContents().get(0);
		private final RuleCall cStatement_blockStatementBlockParserRuleCall_7_0_0 = (RuleCall)cStatement_blockAssignment_7_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_7_1 = (Keyword)cAlternatives_7.eContents().get(1);
		
		//MethodDeclaration:
		//	Modifier* Type ID "(" ParameterList? ")" ("[" "]")* (statement_block=StatementBlock | ";");
		@Override public ParserRule getRule() { return rule; }

		//Modifier* Type ID "(" ParameterList? ")" ("[" "]")* (statement_block=StatementBlock | ";")
		public Group getGroup() { return cGroup; }

		//Modifier*
		public RuleCall getModifierParserRuleCall_0() { return cModifierParserRuleCall_0; }

		//Type
		public RuleCall getTypeParserRuleCall_1() { return cTypeParserRuleCall_1; }

		//ID
		public RuleCall getIDTerminalRuleCall_2() { return cIDTerminalRuleCall_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//ParameterList?
		public RuleCall getParameterListParserRuleCall_4() { return cParameterListParserRuleCall_4; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }

		//("[" "]")*
		public Group getGroup_6() { return cGroup_6; }

		//"["
		public Keyword getLeftSquareBracketKeyword_6_0() { return cLeftSquareBracketKeyword_6_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_6_1() { return cRightSquareBracketKeyword_6_1; }

		//statement_block=StatementBlock | ";"
		public Alternatives getAlternatives_7() { return cAlternatives_7; }

		//statement_block=StatementBlock
		public Assignment getStatement_blockAssignment_7_0() { return cStatement_blockAssignment_7_0; }

		//StatementBlock
		public RuleCall getStatement_blockStatementBlockParserRuleCall_7_0_0() { return cStatement_blockStatementBlockParserRuleCall_7_0_0; }

		//";"
		public Keyword getSemicolonKeyword_7_1() { return cSemicolonKeyword_7_1; }
	}

	public class ConstructorDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConstructorDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cModifierParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cParameterListParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cStatement_blockAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cStatement_blockStatementBlockParserRuleCall_5_0 = (RuleCall)cStatement_blockAssignment_5.eContents().get(0);
		
		//ConstructorDeclaration:
		//	Modifier* ID "(" ParameterList? ")" statement_block=StatementBlock;
		@Override public ParserRule getRule() { return rule; }

		//Modifier* ID "(" ParameterList? ")" statement_block=StatementBlock
		public Group getGroup() { return cGroup; }

		//Modifier*
		public RuleCall getModifierParserRuleCall_0() { return cModifierParserRuleCall_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//ParameterList?
		public RuleCall getParameterListParserRuleCall_3() { return cParameterListParserRuleCall_3; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//statement_block=StatementBlock
		public Assignment getStatement_blockAssignment_5() { return cStatement_blockAssignment_5; }

		//StatementBlock
		public RuleCall getStatement_blockStatementBlockParserRuleCall_5_0() { return cStatement_blockStatementBlockParserRuleCall_5_0; }
	}

	public class ParameterListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParameterList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cParameterParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cParametersAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cParametersParameterParserRuleCall_1_1_0 = (RuleCall)cParametersAssignment_1_1.eContents().get(0);
		
		//ParameterList:
		//	Parameter ("," parameters+=Parameter)*;
		@Override public ParserRule getRule() { return rule; }

		//Parameter ("," parameters+=Parameter)*
		public Group getGroup() { return cGroup; }

		//Parameter
		public RuleCall getParameterParserRuleCall_0() { return cParameterParserRuleCall_0; }

		//("," parameters+=Parameter)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//parameters+=Parameter
		public Assignment getParametersAssignment_1_1() { return cParametersAssignment_1_1; }

		//Parameter
		public RuleCall getParametersParameterParserRuleCall_1_1_0() { return cParametersParameterParserRuleCall_1_1_0; }
	}

	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTypeParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		
		//Parameter:
		//	Type ID ("[" "]")*;
		@Override public ParserRule getRule() { return rule; }

		//Type ID ("[" "]")*
		public Group getGroup() { return cGroup; }

		//Type
		public RuleCall getTypeParserRuleCall_0() { return cTypeParserRuleCall_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }

		//("[" "]")*
		public Group getGroup_2() { return cGroup_2; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2_0() { return cLeftSquareBracketKeyword_2_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2_1() { return cRightSquareBracketKeyword_2_1; }
	}

	public class StatementBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StatementBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cStatementBlockAction_1 = (Action)cGroup.eContents().get(1);
		private final Assignment cStatementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatementsStatementParserRuleCall_2_0 = (RuleCall)cStatementsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//StatementBlock:
		//	"{" {StatementBlock} statements+=Statement* "}";
		@Override public ParserRule getRule() { return rule; }

		//"{" {StatementBlock} statements+=Statement* "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//{StatementBlock}
		public Action getStatementBlockAction_1() { return cStatementBlockAction_1; }

		//statements+=Statement*
		public Assignment getStatementsAssignment_2() { return cStatementsAssignment_2; }

		//Statement
		public RuleCall getStatementsStatementParserRuleCall_2_0() { return cStatementsStatementParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class VariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cModifierParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cVariable_declaratorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVariable_declaratorVariableDeclaratorParserRuleCall_2_0 = (RuleCall)cVariable_declaratorAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cVariable_declaratorsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cVariable_declaratorsVariableDeclaratorParserRuleCall_3_1_0 = (RuleCall)cVariable_declaratorsAssignment_3_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//VariableDeclaration:
		//	Modifier* type=Type? variable_declarator=VariableDeclarator ("," variable_declarators+=VariableDeclarator)* ";";
		@Override public ParserRule getRule() { return rule; }

		//Modifier* type=Type? variable_declarator=VariableDeclarator ("," variable_declarators+=VariableDeclarator)* ";"
		public Group getGroup() { return cGroup; }

		//Modifier*
		public RuleCall getModifierParserRuleCall_0() { return cModifierParserRuleCall_0; }

		//type=Type?
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_1_0() { return cTypeTypeParserRuleCall_1_0; }

		//variable_declarator=VariableDeclarator
		public Assignment getVariable_declaratorAssignment_2() { return cVariable_declaratorAssignment_2; }

		//VariableDeclarator
		public RuleCall getVariable_declaratorVariableDeclaratorParserRuleCall_2_0() { return cVariable_declaratorVariableDeclaratorParserRuleCall_2_0; }

		//("," variable_declarators+=VariableDeclarator)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//variable_declarators+=VariableDeclarator
		public Assignment getVariable_declaratorsAssignment_3_1() { return cVariable_declaratorsAssignment_3_1; }

		//VariableDeclarator
		public RuleCall getVariable_declaratorsVariableDeclaratorParserRuleCall_3_1_0() { return cVariable_declaratorsVariableDeclaratorParserRuleCall_3_1_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class VariableDeclaratorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableDeclarator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariableDeclaratorAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cVariable_initializerAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cVariable_initializerVariableInitializerParserRuleCall_3_1_0 = (RuleCall)cVariable_initializerAssignment_3_1.eContents().get(0);
		
		//VariableDeclarator:
		//	{VariableDeclarator} ID ("[" "]")* ("=" variable_initializer=VariableInitializer)?;
		@Override public ParserRule getRule() { return rule; }

		//{VariableDeclarator} ID ("[" "]")* ("=" variable_initializer=VariableInitializer)?
		public Group getGroup() { return cGroup; }

		//{VariableDeclarator}
		public Action getVariableDeclaratorAction_0() { return cVariableDeclaratorAction_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }

		//("[" "]")*
		public Group getGroup_2() { return cGroup_2; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2_0() { return cLeftSquareBracketKeyword_2_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2_1() { return cRightSquareBracketKeyword_2_1; }

		//("=" variable_initializer=VariableInitializer)?
		public Group getGroup_3() { return cGroup_3; }

		//"="
		public Keyword getEqualsSignKeyword_3_0() { return cEqualsSignKeyword_3_0; }

		//variable_initializer=VariableInitializer
		public Assignment getVariable_initializerAssignment_3_1() { return cVariable_initializerAssignment_3_1; }

		//VariableInitializer
		public RuleCall getVariable_initializerVariableInitializerParserRuleCall_3_1_0() { return cVariable_initializerVariableInitializerParserRuleCall_3_1_0; }
	}

	public class VariableInitializerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableInitializer");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cExprAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cExprExpressionParserRuleCall_0_0 = (RuleCall)cExprAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Assignment cVariable_initializerAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cVariable_initializerVariableInitializerParserRuleCall_1_1_0_0 = (RuleCall)cVariable_initializerAssignment_1_1_0.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cGroup_1_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_1_0 = (Keyword)cGroup_1_1_1.eContents().get(0);
		private final Assignment cVariable_initializersAssignment_1_1_1_1 = (Assignment)cGroup_1_1_1.eContents().get(1);
		private final RuleCall cVariable_initializersVariableInitializerParserRuleCall_1_1_1_1_0 = (RuleCall)cVariable_initializersAssignment_1_1_1_1.eContents().get(0);
		private final Keyword cCommaKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//VariableInitializer:
		//	expr=Expression | "{" (variable_initializer=VariableInitializer ("," variable_initializers+=VariableInitializer)*
		//	","?)? "}";
		@Override public ParserRule getRule() { return rule; }

		//expr=Expression | "{" (variable_initializer=VariableInitializer ("," variable_initializers+=VariableInitializer)* ","?)?
		//"}"
		public Alternatives getAlternatives() { return cAlternatives; }

		//expr=Expression
		public Assignment getExprAssignment_0() { return cExprAssignment_0; }

		//Expression
		public RuleCall getExprExpressionParserRuleCall_0_0() { return cExprExpressionParserRuleCall_0_0; }

		//"{" (variable_initializer=VariableInitializer ("," variable_initializers+=VariableInitializer)* ","?)? "}"
		public Group getGroup_1() { return cGroup_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1_0() { return cLeftCurlyBracketKeyword_1_0; }

		//(variable_initializer=VariableInitializer ("," variable_initializers+=VariableInitializer)* ","?)?
		public Group getGroup_1_1() { return cGroup_1_1; }

		//variable_initializer=VariableInitializer
		public Assignment getVariable_initializerAssignment_1_1_0() { return cVariable_initializerAssignment_1_1_0; }

		//VariableInitializer
		public RuleCall getVariable_initializerVariableInitializerParserRuleCall_1_1_0_0() { return cVariable_initializerVariableInitializerParserRuleCall_1_1_0_0; }

		//("," variable_initializers+=VariableInitializer)*
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }

		//","
		public Keyword getCommaKeyword_1_1_1_0() { return cCommaKeyword_1_1_1_0; }

		//variable_initializers+=VariableInitializer
		public Assignment getVariable_initializersAssignment_1_1_1_1() { return cVariable_initializersAssignment_1_1_1_1; }

		//VariableInitializer
		public RuleCall getVariable_initializersVariableInitializerParserRuleCall_1_1_1_1_0() { return cVariable_initializersVariableInitializerParserRuleCall_1_1_1_1_0; }

		//","?
		public Keyword getCommaKeyword_1_1_2() { return cCommaKeyword_1_1_2; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_1_2() { return cRightCurlyBracketKeyword_1_2; }
	}

	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Type");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSpecifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSpecifierTypeSpecifierParserRuleCall_0_0 = (RuleCall)cSpecifierAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//Type:
		//	specifier=TypeSpecifier ("[" "]")*;
		@Override public ParserRule getRule() { return rule; }

		//specifier=TypeSpecifier ("[" "]")*
		public Group getGroup() { return cGroup; }

		//specifier=TypeSpecifier
		public Assignment getSpecifierAssignment_0() { return cSpecifierAssignment_0; }

		//TypeSpecifier
		public RuleCall getSpecifierTypeSpecifierParserRuleCall_0_0() { return cSpecifierTypeSpecifierParserRuleCall_0_0; }

		//("[" "]")*
		public Group getGroup_1() { return cGroup_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_1() { return cRightSquareBracketKeyword_1_1; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression");
		private final RuleCall cNumericExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Expression:
		//	NumericExpression;
		@Override public ParserRule getRule() { return rule; }

		//NumericExpression
		public RuleCall getNumericExpressionParserRuleCall() { return cNumericExpressionParserRuleCall; }
	}

	public class NumericExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NumericExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Alternatives cAlternatives_0_0 = (Alternatives)cGroup_0.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_0_0_0 = (Keyword)cAlternatives_0_0.eContents().get(0);
		private final Keyword cPlusSignPlusSignKeyword_0_0_1 = (Keyword)cAlternatives_0_0.eContents().get(1);
		private final Keyword cHyphenMinusHyphenMinusKeyword_0_0_2 = (Keyword)cAlternatives_0_0.eContents().get(2);
		private final RuleCall cBitExpressionParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cBitExpressionParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Alternatives cAlternatives_1_1_0 = (Alternatives)cAlternatives_1_1.eContents().get(0);
		private final Keyword cPlusSignPlusSignKeyword_1_1_0_0 = (Keyword)cAlternatives_1_1_0.eContents().get(0);
		private final Keyword cHyphenMinusHyphenMinusKeyword_1_1_0_1 = (Keyword)cAlternatives_1_1_0.eContents().get(1);
		private final Group cGroup_1_1_1 = (Group)cAlternatives_1_1.eContents().get(1);
		private final Action cNumericLeftAction_1_1_1_0 = (Action)cGroup_1_1_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1_1_1 = (Alternatives)cGroup_1_1_1.eContents().get(1);
		private final Keyword cPlusSignKeyword_1_1_1_1_0 = (Keyword)cAlternatives_1_1_1_1.eContents().get(0);
		private final Keyword cPlusSignEqualsSignKeyword_1_1_1_1_1 = (Keyword)cAlternatives_1_1_1_1.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_1_1_1_1_2 = (Keyword)cAlternatives_1_1_1_1.eContents().get(2);
		private final Keyword cHyphenMinusEqualsSignKeyword_1_1_1_1_3 = (Keyword)cAlternatives_1_1_1_1.eContents().get(3);
		private final Keyword cAsteriskKeyword_1_1_1_1_4 = (Keyword)cAlternatives_1_1_1_1.eContents().get(4);
		private final Keyword cAsteriskEqualsSignKeyword_1_1_1_1_5 = (Keyword)cAlternatives_1_1_1_1.eContents().get(5);
		private final Keyword cSolidusKeyword_1_1_1_1_6 = (Keyword)cAlternatives_1_1_1_1.eContents().get(6);
		private final Keyword cSolidusEqualsSignKeyword_1_1_1_1_7 = (Keyword)cAlternatives_1_1_1_1.eContents().get(7);
		private final Keyword cPercentSignKeyword_1_1_1_1_8 = (Keyword)cAlternatives_1_1_1_1.eContents().get(8);
		private final Keyword cPercentSignEqualsSignKeyword_1_1_1_1_9 = (Keyword)cAlternatives_1_1_1_1.eContents().get(9);
		private final Assignment cRightAssignment_1_1_1_2 = (Assignment)cGroup_1_1_1.eContents().get(2);
		private final RuleCall cRightBitExpressionParserRuleCall_1_1_1_2_0 = (RuleCall)cRightAssignment_1_1_1_2.eContents().get(0);
		
		//NumericExpression:
		//	("-" | "++" | "--") BitExpression | BitExpression (("++" | "--") | ({Numeric.left=current} ("+" | "+=" | "-" | "-=" |
		//	"*" | "*=" | "/" | "/=" | "%" | "%=") right=BitExpression)*);
		@Override public ParserRule getRule() { return rule; }

		//("-" | "++" | "--") BitExpression | BitExpression (("++" | "--") | ({Numeric.left=current} ("+" | "+=" | "-" | "-=" |
		//"*" | "*=" | "/" | "/=" | "%" | "%=") right=BitExpression)*)
		public Alternatives getAlternatives() { return cAlternatives; }

		//("-" | "++" | "--") BitExpression
		public Group getGroup_0() { return cGroup_0; }

		//"-" | "++" | "--"
		public Alternatives getAlternatives_0_0() { return cAlternatives_0_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_0_0_0() { return cHyphenMinusKeyword_0_0_0; }

		//"++"
		public Keyword getPlusSignPlusSignKeyword_0_0_1() { return cPlusSignPlusSignKeyword_0_0_1; }

		//"--"
		public Keyword getHyphenMinusHyphenMinusKeyword_0_0_2() { return cHyphenMinusHyphenMinusKeyword_0_0_2; }

		//BitExpression
		public RuleCall getBitExpressionParserRuleCall_0_1() { return cBitExpressionParserRuleCall_0_1; }

		//BitExpression (("++" | "--") | ({Numeric.left=current} ("+" | "+=" | "-" | "-=" | "*" | "*=" | "/" | "/=" | "%" | "%=")
		//right=BitExpression)*)
		public Group getGroup_1() { return cGroup_1; }

		//BitExpression
		public RuleCall getBitExpressionParserRuleCall_1_0() { return cBitExpressionParserRuleCall_1_0; }

		//("++" | "--") | ({Numeric.left=current} ("+" | "+=" | "-" | "-=" | "*" | "*=" | "/" | "/=" | "%" | "%=")
		//right=BitExpression)*
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }

		//"++" | "--"
		public Alternatives getAlternatives_1_1_0() { return cAlternatives_1_1_0; }

		//"++"
		public Keyword getPlusSignPlusSignKeyword_1_1_0_0() { return cPlusSignPlusSignKeyword_1_1_0_0; }

		//"--"
		public Keyword getHyphenMinusHyphenMinusKeyword_1_1_0_1() { return cHyphenMinusHyphenMinusKeyword_1_1_0_1; }

		//({Numeric.left=current} ("+" | "+=" | "-" | "-=" | "*" | "*=" | "/" | "/=" | "%" | "%=") right=BitExpression)*
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }

		//{Numeric.left=current}
		public Action getNumericLeftAction_1_1_1_0() { return cNumericLeftAction_1_1_1_0; }

		//"+" | "+=" | "-" | "-=" | "*" | "*=" | "/" | "/=" | "%" | "%="
		public Alternatives getAlternatives_1_1_1_1() { return cAlternatives_1_1_1_1; }

		//"+"
		public Keyword getPlusSignKeyword_1_1_1_1_0() { return cPlusSignKeyword_1_1_1_1_0; }

		//"+="
		public Keyword getPlusSignEqualsSignKeyword_1_1_1_1_1() { return cPlusSignEqualsSignKeyword_1_1_1_1_1; }

		//"-"
		public Keyword getHyphenMinusKeyword_1_1_1_1_2() { return cHyphenMinusKeyword_1_1_1_1_2; }

		//"-="
		public Keyword getHyphenMinusEqualsSignKeyword_1_1_1_1_3() { return cHyphenMinusEqualsSignKeyword_1_1_1_1_3; }

		//"*"
		public Keyword getAsteriskKeyword_1_1_1_1_4() { return cAsteriskKeyword_1_1_1_1_4; }

		//"*="
		public Keyword getAsteriskEqualsSignKeyword_1_1_1_1_5() { return cAsteriskEqualsSignKeyword_1_1_1_1_5; }

		//"/"
		public Keyword getSolidusKeyword_1_1_1_1_6() { return cSolidusKeyword_1_1_1_1_6; }

		//"/="
		public Keyword getSolidusEqualsSignKeyword_1_1_1_1_7() { return cSolidusEqualsSignKeyword_1_1_1_1_7; }

		//"%"
		public Keyword getPercentSignKeyword_1_1_1_1_8() { return cPercentSignKeyword_1_1_1_1_8; }

		//"%="
		public Keyword getPercentSignEqualsSignKeyword_1_1_1_1_9() { return cPercentSignEqualsSignKeyword_1_1_1_1_9; }

		//right=BitExpression
		public Assignment getRightAssignment_1_1_1_2() { return cRightAssignment_1_1_1_2; }

		//BitExpression
		public RuleCall getRightBitExpressionParserRuleCall_1_1_1_2_0() { return cRightBitExpressionParserRuleCall_1_1_1_2_0; }
	}

	public class BitExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BitExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cTildeKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cLogicalExpressionParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cLogicalExpressionParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Action cBitLeftAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1_1 = (Alternatives)cGroup_1_1.eContents().get(1);
		private final Keyword cGreaterThanSignGreaterThanSignEqualsSignKeyword_1_1_1_0 = (Keyword)cAlternatives_1_1_1.eContents().get(0);
		private final Keyword cLessThanSignLessThanSignKeyword_1_1_1_1 = (Keyword)cAlternatives_1_1_1.eContents().get(1);
		private final Keyword cGreaterThanSignGreaterThanSignKeyword_1_1_1_2 = (Keyword)cAlternatives_1_1_1.eContents().get(2);
		private final Keyword cGreaterThanSignGreaterThanSignGreaterThanSignKeyword_1_1_1_3 = (Keyword)cAlternatives_1_1_1.eContents().get(3);
		private final Assignment cRightAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cRightLogicalExpressionParserRuleCall_1_1_2_0 = (RuleCall)cRightAssignment_1_1_2.eContents().get(0);
		
		//BitExpression:
		//	"~" LogicalExpression | LogicalExpression ({Bit.left=current} (">>=" | "<<" | ">>" | ">>>") right=LogicalExpression)*;
		@Override public ParserRule getRule() { return rule; }

		//"~" LogicalExpression | LogicalExpression ({Bit.left=current} (">>=" | "<<" | ">>" | ">>>") right=LogicalExpression)*
		public Alternatives getAlternatives() { return cAlternatives; }

		//"~" LogicalExpression
		public Group getGroup_0() { return cGroup_0; }

		//"~"
		public Keyword getTildeKeyword_0_0() { return cTildeKeyword_0_0; }

		//LogicalExpression
		public RuleCall getLogicalExpressionParserRuleCall_0_1() { return cLogicalExpressionParserRuleCall_0_1; }

		//LogicalExpression ({Bit.left=current} (">>=" | "<<" | ">>" | ">>>") right=LogicalExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//LogicalExpression
		public RuleCall getLogicalExpressionParserRuleCall_1_0() { return cLogicalExpressionParserRuleCall_1_0; }

		//({Bit.left=current} (">>=" | "<<" | ">>" | ">>>") right=LogicalExpression)*
		public Group getGroup_1_1() { return cGroup_1_1; }

		//{Bit.left=current}
		public Action getBitLeftAction_1_1_0() { return cBitLeftAction_1_1_0; }

		//">>=" | "<<" | ">>" | ">>>"
		public Alternatives getAlternatives_1_1_1() { return cAlternatives_1_1_1; }

		//">>="
		public Keyword getGreaterThanSignGreaterThanSignEqualsSignKeyword_1_1_1_0() { return cGreaterThanSignGreaterThanSignEqualsSignKeyword_1_1_1_0; }

		//"<<"
		public Keyword getLessThanSignLessThanSignKeyword_1_1_1_1() { return cLessThanSignLessThanSignKeyword_1_1_1_1; }

		//">>"
		public Keyword getGreaterThanSignGreaterThanSignKeyword_1_1_1_2() { return cGreaterThanSignGreaterThanSignKeyword_1_1_1_2; }

		//">>>"
		public Keyword getGreaterThanSignGreaterThanSignGreaterThanSignKeyword_1_1_1_3() { return cGreaterThanSignGreaterThanSignGreaterThanSignKeyword_1_1_1_3; }

		//right=LogicalExpression
		public Assignment getRightAssignment_1_1_2() { return cRightAssignment_1_1_2; }

		//LogicalExpression
		public RuleCall getRightLogicalExpressionParserRuleCall_1_1_2_0() { return cRightLogicalExpressionParserRuleCall_1_1_2_0; }
	}

	public class TestingExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TestingExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cArgsExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cTestingLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_1_1_0 = (Keyword)cAlternatives_1_1.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1_1_1 = (Keyword)cAlternatives_1_1.eContents().get(1);
		private final Keyword cGreaterThanSignEqualsSignKeyword_1_1_2 = (Keyword)cAlternatives_1_1.eContents().get(2);
		private final Keyword cLessThanSignEqualsSignKeyword_1_1_3 = (Keyword)cAlternatives_1_1.eContents().get(3);
		private final Keyword cEqualsSignEqualsSignKeyword_1_1_4 = (Keyword)cAlternatives_1_1.eContents().get(4);
		private final Keyword cExclamationMarkEqualsSignKeyword_1_1_5 = (Keyword)cAlternatives_1_1.eContents().get(5);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightArgsExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//TestingExpression:
		//	ArgsExpression ({Testing.left=current} (">" | "<" | ">=" | "<=" | "==" | "!=") right=ArgsExpression)*;
		@Override public ParserRule getRule() { return rule; }

		//ArgsExpression ({Testing.left=current} (">" | "<" | ">=" | "<=" | "==" | "!=") right=ArgsExpression)*
		public Group getGroup() { return cGroup; }

		//ArgsExpression
		public RuleCall getArgsExpressionParserRuleCall_0() { return cArgsExpressionParserRuleCall_0; }

		//({Testing.left=current} (">" | "<" | ">=" | "<=" | "==" | "!=") right=ArgsExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{Testing.left=current}
		public Action getTestingLeftAction_1_0() { return cTestingLeftAction_1_0; }

		//">" | "<" | ">=" | "<=" | "==" | "!="
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }

		//">"
		public Keyword getGreaterThanSignKeyword_1_1_0() { return cGreaterThanSignKeyword_1_1_0; }

		//"<"
		public Keyword getLessThanSignKeyword_1_1_1() { return cLessThanSignKeyword_1_1_1; }

		//">="
		public Keyword getGreaterThanSignEqualsSignKeyword_1_1_2() { return cGreaterThanSignEqualsSignKeyword_1_1_2; }

		//"<="
		public Keyword getLessThanSignEqualsSignKeyword_1_1_3() { return cLessThanSignEqualsSignKeyword_1_1_3; }

		//"=="
		public Keyword getEqualsSignEqualsSignKeyword_1_1_4() { return cEqualsSignEqualsSignKeyword_1_1_4; }

		//"!="
		public Keyword getExclamationMarkEqualsSignKeyword_1_1_5() { return cExclamationMarkEqualsSignKeyword_1_1_5; }

		//right=ArgsExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//ArgsExpression
		public RuleCall getRightArgsExpressionParserRuleCall_1_2_0() { return cRightArgsExpressionParserRuleCall_1_2_0; }
	}

	public class LogicalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LogicalExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cRightAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cRightTestingExpressionParserRuleCall_0_1_0 = (RuleCall)cRightAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cTestingExpressionParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Group cGroup_1_1_0 = (Group)cAlternatives_1_1.eContents().get(0);
		private final Action cLogicalLeftAction_1_1_0_0 = (Action)cGroup_1_1_0.eContents().get(0);
		private final Alternatives cAlternatives_1_1_0_1 = (Alternatives)cGroup_1_1_0.eContents().get(1);
		private final Keyword cAmpersandKeyword_1_1_0_1_0 = (Keyword)cAlternatives_1_1_0_1.eContents().get(0);
		private final Keyword cAmpersandEqualsSignKeyword_1_1_0_1_1 = (Keyword)cAlternatives_1_1_0_1.eContents().get(1);
		private final Keyword cVerticalLineKeyword_1_1_0_1_2 = (Keyword)cAlternatives_1_1_0_1.eContents().get(2);
		private final Keyword cVerticalLineEqualsSignKeyword_1_1_0_1_3 = (Keyword)cAlternatives_1_1_0_1.eContents().get(3);
		private final Keyword cCircumflexAccentKeyword_1_1_0_1_4 = (Keyword)cAlternatives_1_1_0_1.eContents().get(4);
		private final Keyword cCircumflexAccentEqualsSignKeyword_1_1_0_1_5 = (Keyword)cAlternatives_1_1_0_1.eContents().get(5);
		private final Keyword cAmpersandAmpersandKeyword_1_1_0_1_6 = (Keyword)cAlternatives_1_1_0_1.eContents().get(6);
		private final Keyword cVerticalLineVerticalLineEqualsSignKeyword_1_1_0_1_7 = (Keyword)cAlternatives_1_1_0_1.eContents().get(7);
		private final Keyword cVerticalLineVerticalLineKeyword_1_1_0_1_8 = (Keyword)cAlternatives_1_1_0_1.eContents().get(8);
		private final Assignment cRightAssignment_1_1_0_2 = (Assignment)cGroup_1_1_0.eContents().get(2);
		private final RuleCall cRightTestingExpressionParserRuleCall_1_1_0_2_0 = (RuleCall)cRightAssignment_1_1_0_2.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cAlternatives_1_1.eContents().get(1);
		private final Action cLogicalLeftAction_1_1_1_0 = (Action)cGroup_1_1_1.eContents().get(0);
		private final Keyword cQuestionMarkKeyword_1_1_1_1 = (Keyword)cGroup_1_1_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1_1_2 = (Assignment)cGroup_1_1_1.eContents().get(2);
		private final RuleCall cRightTestingExpressionParserRuleCall_1_1_1_2_0 = (RuleCall)cRightAssignment_1_1_1_2.eContents().get(0);
		private final Action cLogicalTernaryAction_1_1_1_3 = (Action)cGroup_1_1_1.eContents().get(3);
		private final Keyword cColonKeyword_1_1_1_4 = (Keyword)cGroup_1_1_1.eContents().get(4);
		private final Assignment cTernary_endAssignment_1_1_1_5 = (Assignment)cGroup_1_1_1.eContents().get(5);
		private final RuleCall cTernary_endTestingExpressionParserRuleCall_1_1_1_5_0 = (RuleCall)cTernary_endAssignment_1_1_1_5.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cLogicalExpressionAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cTrueKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cLogicalExpressionAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Keyword cFalseKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		
		//LogicalExpression:
		//	"!" right=TestingExpression | TestingExpression ({Logical.left=current} ("&" | "&=" | "|" | "|=" | "^" | "^=" | "&&" |
		//	"||=" | "||") right=TestingExpression | {Logical.left=current} "?" right=TestingExpression {Logical.ternary=current}
		//	":" ternary_end=TestingExpression)* | {LogicalExpression} "true" | {LogicalExpression} "false";
		@Override public ParserRule getRule() { return rule; }

		//"!" right=TestingExpression | TestingExpression ({Logical.left=current} ("&" | "&=" | "|" | "|=" | "^" | "^=" | "&&" |
		//"||=" | "||") right=TestingExpression | {Logical.left=current} "?" right=TestingExpression {Logical.ternary=current}
		//":" ternary_end=TestingExpression)* | {LogicalExpression} "true" | {LogicalExpression} "false"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"!" right=TestingExpression
		public Group getGroup_0() { return cGroup_0; }

		//"!"
		public Keyword getExclamationMarkKeyword_0_0() { return cExclamationMarkKeyword_0_0; }

		//right=TestingExpression
		public Assignment getRightAssignment_0_1() { return cRightAssignment_0_1; }

		//TestingExpression
		public RuleCall getRightTestingExpressionParserRuleCall_0_1_0() { return cRightTestingExpressionParserRuleCall_0_1_0; }

		//TestingExpression ({Logical.left=current} ("&" | "&=" | "|" | "|=" | "^" | "^=" | "&&" | "||=" | "||")
		//right=TestingExpression | {Logical.left=current} "?" right=TestingExpression {Logical.ternary=current} ":"
		//ternary_end=TestingExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//TestingExpression
		public RuleCall getTestingExpressionParserRuleCall_1_0() { return cTestingExpressionParserRuleCall_1_0; }

		//({Logical.left=current} ("&" | "&=" | "|" | "|=" | "^" | "^=" | "&&" | "||=" | "||") right=TestingExpression |
		//{Logical.left=current} "?" right=TestingExpression {Logical.ternary=current} ":" ternary_end=TestingExpression)*
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }

		//{Logical.left=current} ("&" | "&=" | "|" | "|=" | "^" | "^=" | "&&" | "||=" | "||") right=TestingExpression
		public Group getGroup_1_1_0() { return cGroup_1_1_0; }

		//{Logical.left=current}
		public Action getLogicalLeftAction_1_1_0_0() { return cLogicalLeftAction_1_1_0_0; }

		//"&" | "&=" | "|" | "|=" | "^" | "^=" | "&&" | "||=" | "||"
		public Alternatives getAlternatives_1_1_0_1() { return cAlternatives_1_1_0_1; }

		//"&"
		public Keyword getAmpersandKeyword_1_1_0_1_0() { return cAmpersandKeyword_1_1_0_1_0; }

		//"&="
		public Keyword getAmpersandEqualsSignKeyword_1_1_0_1_1() { return cAmpersandEqualsSignKeyword_1_1_0_1_1; }

		//"|"
		public Keyword getVerticalLineKeyword_1_1_0_1_2() { return cVerticalLineKeyword_1_1_0_1_2; }

		//"|="
		public Keyword getVerticalLineEqualsSignKeyword_1_1_0_1_3() { return cVerticalLineEqualsSignKeyword_1_1_0_1_3; }

		//"^"
		public Keyword getCircumflexAccentKeyword_1_1_0_1_4() { return cCircumflexAccentKeyword_1_1_0_1_4; }

		//"^="
		public Keyword getCircumflexAccentEqualsSignKeyword_1_1_0_1_5() { return cCircumflexAccentEqualsSignKeyword_1_1_0_1_5; }

		//"&&"
		public Keyword getAmpersandAmpersandKeyword_1_1_0_1_6() { return cAmpersandAmpersandKeyword_1_1_0_1_6; }

		//"||="
		public Keyword getVerticalLineVerticalLineEqualsSignKeyword_1_1_0_1_7() { return cVerticalLineVerticalLineEqualsSignKeyword_1_1_0_1_7; }

		//"||"
		public Keyword getVerticalLineVerticalLineKeyword_1_1_0_1_8() { return cVerticalLineVerticalLineKeyword_1_1_0_1_8; }

		//right=TestingExpression
		public Assignment getRightAssignment_1_1_0_2() { return cRightAssignment_1_1_0_2; }

		//TestingExpression
		public RuleCall getRightTestingExpressionParserRuleCall_1_1_0_2_0() { return cRightTestingExpressionParserRuleCall_1_1_0_2_0; }

		//{Logical.left=current} "?" right=TestingExpression {Logical.ternary=current} ":" ternary_end=TestingExpression
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }

		//{Logical.left=current}
		public Action getLogicalLeftAction_1_1_1_0() { return cLogicalLeftAction_1_1_1_0; }

		//"?"
		public Keyword getQuestionMarkKeyword_1_1_1_1() { return cQuestionMarkKeyword_1_1_1_1; }

		//right=TestingExpression
		public Assignment getRightAssignment_1_1_1_2() { return cRightAssignment_1_1_1_2; }

		//TestingExpression
		public RuleCall getRightTestingExpressionParserRuleCall_1_1_1_2_0() { return cRightTestingExpressionParserRuleCall_1_1_1_2_0; }

		//{Logical.ternary=current}
		public Action getLogicalTernaryAction_1_1_1_3() { return cLogicalTernaryAction_1_1_1_3; }

		//":"
		public Keyword getColonKeyword_1_1_1_4() { return cColonKeyword_1_1_1_4; }

		//ternary_end=TestingExpression
		public Assignment getTernary_endAssignment_1_1_1_5() { return cTernary_endAssignment_1_1_1_5; }

		//TestingExpression
		public RuleCall getTernary_endTestingExpressionParserRuleCall_1_1_1_5_0() { return cTernary_endTestingExpressionParserRuleCall_1_1_1_5_0; }

		//{LogicalExpression} "true"
		public Group getGroup_2() { return cGroup_2; }

		//{LogicalExpression}
		public Action getLogicalExpressionAction_2_0() { return cLogicalExpressionAction_2_0; }

		//"true"
		public Keyword getTrueKeyword_2_1() { return cTrueKeyword_2_1; }

		//{LogicalExpression} "false"
		public Group getGroup_3() { return cGroup_3; }

		//{LogicalExpression}
		public Action getLogicalExpressionAction_3_0() { return cLogicalExpressionAction_3_0; }

		//"false"
		public Keyword getFalseKeyword_3_1() { return cFalseKeyword_3_1; }
	}

	public class ArgsExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ArgsExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCastingExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cArg_listAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cArg_listArglistParserRuleCall_1_0_1_0 = (RuleCall)cArg_listAssignment_1_0_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_0_2 = (Keyword)cGroup_1_0.eContents().get(2);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Action cArgsLeftAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Keyword cFullStopKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cRightCastingExpressionParserRuleCall_1_1_2_0 = (RuleCall)cRightAssignment_1_1_2.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Action cArgsLeftAction_1_2_0 = (Action)cGroup_1_2.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1_2_1 = (Keyword)cGroup_1_2.eContents().get(1);
		private final Assignment cRightAssignment_1_2_2 = (Assignment)cGroup_1_2.eContents().get(2);
		private final RuleCall cRightCastingExpressionParserRuleCall_1_2_2_0 = (RuleCall)cRightAssignment_1_2_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_2_3 = (Keyword)cGroup_1_2.eContents().get(3);
		private final Group cGroup_1_3 = (Group)cAlternatives_1.eContents().get(3);
		private final Action cArgsLeftAction_1_3_0 = (Action)cGroup_1_3.eContents().get(0);
		private final Keyword cCommaKeyword_1_3_1 = (Keyword)cGroup_1_3.eContents().get(1);
		private final Assignment cRightAssignment_1_3_2 = (Assignment)cGroup_1_3.eContents().get(2);
		private final RuleCall cRightCastingExpressionParserRuleCall_1_3_2_0 = (RuleCall)cRightAssignment_1_3_2.eContents().get(0);
		private final Group cGroup_1_4 = (Group)cAlternatives_1.eContents().get(4);
		private final Action cArgsLeftAction_1_4_0 = (Action)cGroup_1_4.eContents().get(0);
		private final Keyword cInstanceofKeyword_1_4_1 = (Keyword)cGroup_1_4.eContents().get(1);
		private final RuleCall cObjectNameParserRuleCall_1_4_2 = (RuleCall)cGroup_1_4.eContents().get(2);
		
		//ArgsExpression:
		//	CastingExpression ("(" arg_list+=Arglist? ")" | {Args.left=current} "." right=CastingExpression | {Args.left=current}
		//	"[" right=CastingExpression "]" | {Args.left=current} "," right=CastingExpression | {Args.left=current} "instanceof"
		//	ObjectName)*;
		@Override public ParserRule getRule() { return rule; }

		//CastingExpression ("(" arg_list+=Arglist? ")" | {Args.left=current} "." right=CastingExpression | {Args.left=current}
		//"[" right=CastingExpression "]" | {Args.left=current} "," right=CastingExpression | {Args.left=current} "instanceof"
		//ObjectName)*
		public Group getGroup() { return cGroup; }

		//CastingExpression
		public RuleCall getCastingExpressionParserRuleCall_0() { return cCastingExpressionParserRuleCall_0; }

		//("(" arg_list+=Arglist? ")" | {Args.left=current} "." right=CastingExpression | {Args.left=current} "["
		//right=CastingExpression "]" | {Args.left=current} "," right=CastingExpression | {Args.left=current} "instanceof"
		//ObjectName)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"(" arg_list+=Arglist? ")"
		public Group getGroup_1_0() { return cGroup_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0_0() { return cLeftParenthesisKeyword_1_0_0; }

		//arg_list+=Arglist?
		public Assignment getArg_listAssignment_1_0_1() { return cArg_listAssignment_1_0_1; }

		//Arglist
		public RuleCall getArg_listArglistParserRuleCall_1_0_1_0() { return cArg_listArglistParserRuleCall_1_0_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_0_2() { return cRightParenthesisKeyword_1_0_2; }

		//{Args.left=current} "." right=CastingExpression
		public Group getGroup_1_1() { return cGroup_1_1; }

		//{Args.left=current}
		public Action getArgsLeftAction_1_1_0() { return cArgsLeftAction_1_1_0; }

		//"."
		public Keyword getFullStopKeyword_1_1_1() { return cFullStopKeyword_1_1_1; }

		//right=CastingExpression
		public Assignment getRightAssignment_1_1_2() { return cRightAssignment_1_1_2; }

		//CastingExpression
		public RuleCall getRightCastingExpressionParserRuleCall_1_1_2_0() { return cRightCastingExpressionParserRuleCall_1_1_2_0; }

		//{Args.left=current} "[" right=CastingExpression "]"
		public Group getGroup_1_2() { return cGroup_1_2; }

		//{Args.left=current}
		public Action getArgsLeftAction_1_2_0() { return cArgsLeftAction_1_2_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_2_1() { return cLeftSquareBracketKeyword_1_2_1; }

		//right=CastingExpression
		public Assignment getRightAssignment_1_2_2() { return cRightAssignment_1_2_2; }

		//CastingExpression
		public RuleCall getRightCastingExpressionParserRuleCall_1_2_2_0() { return cRightCastingExpressionParserRuleCall_1_2_2_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_2_3() { return cRightSquareBracketKeyword_1_2_3; }

		//{Args.left=current} "," right=CastingExpression
		public Group getGroup_1_3() { return cGroup_1_3; }

		//{Args.left=current}
		public Action getArgsLeftAction_1_3_0() { return cArgsLeftAction_1_3_0; }

		//","
		public Keyword getCommaKeyword_1_3_1() { return cCommaKeyword_1_3_1; }

		//right=CastingExpression
		public Assignment getRightAssignment_1_3_2() { return cRightAssignment_1_3_2; }

		//CastingExpression
		public RuleCall getRightCastingExpressionParserRuleCall_1_3_2_0() { return cRightCastingExpressionParserRuleCall_1_3_2_0; }

		//{Args.left=current} "instanceof" ObjectName
		public Group getGroup_1_4() { return cGroup_1_4; }

		//{Args.left=current}
		public Action getArgsLeftAction_1_4_0() { return cArgsLeftAction_1_4_0; }

		//"instanceof"
		public Keyword getInstanceofKeyword_1_4_1() { return cInstanceofKeyword_1_4_1; }

		//ObjectName
		public RuleCall getObjectNameParserRuleCall_1_4_2() { return cObjectNameParserRuleCall_1_4_2; }
	}

	public class ArglistElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Arglist");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cArgAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cArgCastingExpressionParserRuleCall_0_0 = (RuleCall)cArgAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cArgsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cArgsCastingExpressionParserRuleCall_1_1_0 = (RuleCall)cArgsAssignment_1_1.eContents().get(0);
		
		//Arglist:
		//	arg=CastingExpression ("," args+=CastingExpression)*;
		@Override public ParserRule getRule() { return rule; }

		//arg=CastingExpression ("," args+=CastingExpression)*
		public Group getGroup() { return cGroup; }

		//arg=CastingExpression
		public Assignment getArgAssignment_0() { return cArgAssignment_0; }

		//CastingExpression
		public RuleCall getArgCastingExpressionParserRuleCall_0_0() { return cArgCastingExpressionParserRuleCall_0_0; }

		//("," args+=CastingExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//args+=CastingExpression
		public Assignment getArgsAssignment_1_1() { return cArgsAssignment_1_1; }

		//CastingExpression
		public RuleCall getArgsCastingExpressionParserRuleCall_1_1_0() { return cArgsCastingExpressionParserRuleCall_1_1_0; }
	}

	public class CastingExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CastingExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCreatingExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cCastingLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cTypesAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cTypesTypeParserRuleCall_1_2_0 = (RuleCall)cTypesAssignment_1_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cRightAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cRightCreatingExpressionParserRuleCall_1_4_0 = (RuleCall)cRightAssignment_1_4.eContents().get(0);
		
		//CastingExpression:
		//	CreatingExpression ({Casting.left=current} "(" types+=Type ")" right=CreatingExpression)*;
		@Override public ParserRule getRule() { return rule; }

		//CreatingExpression ({Casting.left=current} "(" types+=Type ")" right=CreatingExpression)*
		public Group getGroup() { return cGroup; }

		//CreatingExpression
		public RuleCall getCreatingExpressionParserRuleCall_0() { return cCreatingExpressionParserRuleCall_0; }

		//({Casting.left=current} "(" types+=Type ")" right=CreatingExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{Casting.left=current}
		public Action getCastingLeftAction_1_0() { return cCastingLeftAction_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }

		//types+=Type
		public Assignment getTypesAssignment_1_2() { return cTypesAssignment_1_2; }

		//Type
		public RuleCall getTypesTypeParserRuleCall_1_2_0() { return cTypesTypeParserRuleCall_1_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }

		//right=CreatingExpression
		public Assignment getRightAssignment_1_4() { return cRightAssignment_1_4; }

		//CreatingExpression
		public RuleCall getRightCreatingExpressionParserRuleCall_1_4_0() { return cRightCreatingExpressionParserRuleCall_1_4_0; }
	}

	public class CreatingExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CreatingExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cParenthesisExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cNewKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Group cGroup_1_1_0 = (Group)cAlternatives_1_1.eContents().get(0);
		private final RuleCall cObjectNameParserRuleCall_1_1_0_0 = (RuleCall)cGroup_1_1_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1_0_1 = (Keyword)cGroup_1_1_0.eContents().get(1);
		private final Assignment cArg_listAssignment_1_1_0_2 = (Assignment)cGroup_1_1_0.eContents().get(2);
		private final RuleCall cArg_listArglistParserRuleCall_1_1_0_2_0 = (RuleCall)cArg_listAssignment_1_1_0_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_1_0_3 = (Keyword)cGroup_1_1_0.eContents().get(3);
		private final Group cGroup_1_1_1 = (Group)cAlternatives_1_1.eContents().get(1);
		private final Assignment cType_specifiersAssignment_1_1_1_0 = (Assignment)cGroup_1_1_1.eContents().get(0);
		private final RuleCall cType_specifiersTypeSpecifierParserRuleCall_1_1_1_0_0 = (RuleCall)cType_specifiersAssignment_1_1_1_0.eContents().get(0);
		private final Group cGroup_1_1_1_1 = (Group)cGroup_1_1_1.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_1_1_1_0 = (Keyword)cGroup_1_1_1_1.eContents().get(0);
		private final Assignment cParenthesisAssignment_1_1_1_1_1 = (Assignment)cGroup_1_1_1_1.eContents().get(1);
		private final RuleCall cParenthesisParenthesisExpressionParserRuleCall_1_1_1_1_1_0 = (RuleCall)cParenthesisAssignment_1_1_1_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_1_1_1_2 = (Keyword)cGroup_1_1_1_1.eContents().get(2);
		private final Group cGroup_1_1_1_2 = (Group)cGroup_1_1_1.eContents().get(2);
		private final Keyword cLeftSquareBracketKeyword_1_1_1_2_0 = (Keyword)cGroup_1_1_1_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_1_1_2_1 = (Keyword)cGroup_1_1_1_2.eContents().get(1);
		
		//CreatingExpression:
		//	ParenthesisExpression ("new" (ObjectName "(" arg_list+=Arglist? ")" | type_specifiers+=TypeSpecifier ("["
		//	parenthesis+=ParenthesisExpression "]")? ("[" "]")*))*;
		@Override public ParserRule getRule() { return rule; }

		//ParenthesisExpression ("new" (ObjectName "(" arg_list+=Arglist? ")" | type_specifiers+=TypeSpecifier ("["
		//parenthesis+=ParenthesisExpression "]")? ("[" "]")*))*
		public Group getGroup() { return cGroup; }

		//ParenthesisExpression
		public RuleCall getParenthesisExpressionParserRuleCall_0() { return cParenthesisExpressionParserRuleCall_0; }

		//("new" (ObjectName "(" arg_list+=Arglist? ")" | type_specifiers+=TypeSpecifier ("[" parenthesis+=ParenthesisExpression
		//"]")? ("[" "]")*))*
		public Group getGroup_1() { return cGroup_1; }

		//"new"
		public Keyword getNewKeyword_1_0() { return cNewKeyword_1_0; }

		//ObjectName "(" arg_list+=Arglist? ")" | type_specifiers+=TypeSpecifier ("[" parenthesis+=ParenthesisExpression "]")?
		//("[" "]")*
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }

		//ObjectName "(" arg_list+=Arglist? ")"
		public Group getGroup_1_1_0() { return cGroup_1_1_0; }

		//ObjectName
		public RuleCall getObjectNameParserRuleCall_1_1_0_0() { return cObjectNameParserRuleCall_1_1_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_1_0_1() { return cLeftParenthesisKeyword_1_1_0_1; }

		//arg_list+=Arglist?
		public Assignment getArg_listAssignment_1_1_0_2() { return cArg_listAssignment_1_1_0_2; }

		//Arglist
		public RuleCall getArg_listArglistParserRuleCall_1_1_0_2_0() { return cArg_listArglistParserRuleCall_1_1_0_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_1_0_3() { return cRightParenthesisKeyword_1_1_0_3; }

		//type_specifiers+=TypeSpecifier ("[" parenthesis+=ParenthesisExpression "]")? ("[" "]")*
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }

		//type_specifiers+=TypeSpecifier
		public Assignment getType_specifiersAssignment_1_1_1_0() { return cType_specifiersAssignment_1_1_1_0; }

		//TypeSpecifier
		public RuleCall getType_specifiersTypeSpecifierParserRuleCall_1_1_1_0_0() { return cType_specifiersTypeSpecifierParserRuleCall_1_1_1_0_0; }

		//("[" parenthesis+=ParenthesisExpression "]")?
		public Group getGroup_1_1_1_1() { return cGroup_1_1_1_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_1_1_1_0() { return cLeftSquareBracketKeyword_1_1_1_1_0; }

		//parenthesis+=ParenthesisExpression
		public Assignment getParenthesisAssignment_1_1_1_1_1() { return cParenthesisAssignment_1_1_1_1_1; }

		//ParenthesisExpression
		public RuleCall getParenthesisParenthesisExpressionParserRuleCall_1_1_1_1_1_0() { return cParenthesisParenthesisExpressionParserRuleCall_1_1_1_1_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_1_1_1_2() { return cRightSquareBracketKeyword_1_1_1_1_2; }

		//("[" "]")*
		public Group getGroup_1_1_1_2() { return cGroup_1_1_1_2; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_1_1_2_0() { return cLeftSquareBracketKeyword_1_1_1_2_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_1_1_2_1() { return cRightSquareBracketKeyword_1_1_1_2_1; }
	}

	public class ParenthesisExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParenthesisExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cParenthesisAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cParenthesisPrimaryExpressionParserRuleCall_1_1_0 = (RuleCall)cParenthesisAssignment_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//ParenthesisExpression:
		//	PrimaryExpression ("(" parenthesis+=PrimaryExpression ")")*;
		@Override public ParserRule getRule() { return rule; }

		//PrimaryExpression ("(" parenthesis+=PrimaryExpression ")")*
		public Group getGroup() { return cGroup; }

		//PrimaryExpression
		public RuleCall getPrimaryExpressionParserRuleCall_0() { return cPrimaryExpressionParserRuleCall_0; }

		//("(" parenthesis+=PrimaryExpression ")")*
		public Group getGroup_1() { return cGroup_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//parenthesis+=PrimaryExpression
		public Assignment getParenthesisAssignment_1_1() { return cParenthesisAssignment_1_1; }

		//PrimaryExpression
		public RuleCall getParenthesisPrimaryExpressionParserRuleCall_1_1_0() { return cParenthesisPrimaryExpressionParserRuleCall_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}

	public class PrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrimaryExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPrimaryExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cValueLiteralExpressionParserRuleCall_1_0_0 = (RuleCall)cValueAssignment_1_0.eContents().get(0);
		private final Keyword cNullKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Keyword cSuperKeyword_1_2 = (Keyword)cAlternatives_1.eContents().get(2);
		private final Keyword cThisKeyword_1_3 = (Keyword)cAlternatives_1.eContents().get(3);
		private final RuleCall cIDTerminalRuleCall_1_4 = (RuleCall)cAlternatives_1.eContents().get(4);
		
		//PrimaryExpression:
		//	{PrimaryExpression} (value=LiteralExpression | "null" | "super" | "this" | ID);
		@Override public ParserRule getRule() { return rule; }

		//{PrimaryExpression} (value=LiteralExpression | "null" | "super" | "this" | ID)
		public Group getGroup() { return cGroup; }

		//{PrimaryExpression}
		public Action getPrimaryExpressionAction_0() { return cPrimaryExpressionAction_0; }

		//value=LiteralExpression | "null" | "super" | "this" | ID
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//value=LiteralExpression
		public Assignment getValueAssignment_1_0() { return cValueAssignment_1_0; }

		//LiteralExpression
		public RuleCall getValueLiteralExpressionParserRuleCall_1_0_0() { return cValueLiteralExpressionParserRuleCall_1_0_0; }

		//"null"
		public Keyword getNullKeyword_1_1() { return cNullKeyword_1_1; }

		//"super"
		public Keyword getSuperKeyword_1_2() { return cSuperKeyword_1_2; }

		//"this"
		public Keyword getThisKeyword_1_3() { return cThisKeyword_1_3; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_4() { return cIDTerminalRuleCall_1_4; }
	}

	public class LiteralExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LiteralExpression");
		private final Assignment cLiteral_valueAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cLiteral_valueAlternatives_0 = (Alternatives)cLiteral_valueAssignment.eContents().get(0);
		private final RuleCall cLiteral_valueIntegerLiteralParserRuleCall_0_0 = (RuleCall)cLiteral_valueAlternatives_0.eContents().get(0);
		private final RuleCall cLiteral_valueFloatLiteralParserRuleCall_0_1 = (RuleCall)cLiteral_valueAlternatives_0.eContents().get(1);
		private final RuleCall cLiteral_valueSTRINGTerminalRuleCall_0_2 = (RuleCall)cLiteral_valueAlternatives_0.eContents().get(2);
		private final RuleCall cLiteral_valueCharacterParserRuleCall_0_3 = (RuleCall)cLiteral_valueAlternatives_0.eContents().get(3);
		
		//LiteralExpression:
		//	literal_value=(IntegerLiteral | FloatLiteral | STRING | Character);
		@Override public ParserRule getRule() { return rule; }

		//literal_value=(IntegerLiteral | FloatLiteral | STRING | Character)
		public Assignment getLiteral_valueAssignment() { return cLiteral_valueAssignment; }

		//IntegerLiteral | FloatLiteral | STRING | Character
		public Alternatives getLiteral_valueAlternatives_0() { return cLiteral_valueAlternatives_0; }

		//IntegerLiteral
		public RuleCall getLiteral_valueIntegerLiteralParserRuleCall_0_0() { return cLiteral_valueIntegerLiteralParserRuleCall_0_0; }

		//FloatLiteral
		public RuleCall getLiteral_valueFloatLiteralParserRuleCall_0_1() { return cLiteral_valueFloatLiteralParserRuleCall_0_1; }

		//STRING
		public RuleCall getLiteral_valueSTRINGTerminalRuleCall_0_2() { return cLiteral_valueSTRINGTerminalRuleCall_0_2; }

		//Character
		public RuleCall getLiteral_valueCharacterParserRuleCall_0_3() { return cLiteral_valueCharacterParserRuleCall_0_3; }
	}

	public class TypeSpecifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeSpecifier");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cNameAlternatives_0 = (Alternatives)cNameAssignment.eContents().get(0);
		private final Keyword cNameBooleanKeyword_0_0 = (Keyword)cNameAlternatives_0.eContents().get(0);
		private final Keyword cNameByteKeyword_0_1 = (Keyword)cNameAlternatives_0.eContents().get(1);
		private final Keyword cNameCharKeyword_0_2 = (Keyword)cNameAlternatives_0.eContents().get(2);
		private final Keyword cNameShortKeyword_0_3 = (Keyword)cNameAlternatives_0.eContents().get(3);
		private final Keyword cNameIntKeyword_0_4 = (Keyword)cNameAlternatives_0.eContents().get(4);
		private final Keyword cNameFloatKeyword_0_5 = (Keyword)cNameAlternatives_0.eContents().get(5);
		private final Keyword cNameLongKeyword_0_6 = (Keyword)cNameAlternatives_0.eContents().get(6);
		private final Keyword cNameDoubleKeyword_0_7 = (Keyword)cNameAlternatives_0.eContents().get(7);
		private final RuleCall cNameObjectNameParserRuleCall_0_8 = (RuleCall)cNameAlternatives_0.eContents().get(8);
		
		//TypeSpecifier:
		//	name=("boolean" | "byte" | "char" | "short" | "int" | "float" | "long" | "double" | ObjectName);
		@Override public ParserRule getRule() { return rule; }

		//name=("boolean" | "byte" | "char" | "short" | "int" | "float" | "long" | "double" | ObjectName)
		public Assignment getNameAssignment() { return cNameAssignment; }

		//"boolean" | "byte" | "char" | "short" | "int" | "float" | "long" | "double" | ObjectName
		public Alternatives getNameAlternatives_0() { return cNameAlternatives_0; }

		//"boolean"
		public Keyword getNameBooleanKeyword_0_0() { return cNameBooleanKeyword_0_0; }

		//"byte"
		public Keyword getNameByteKeyword_0_1() { return cNameByteKeyword_0_1; }

		//"char"
		public Keyword getNameCharKeyword_0_2() { return cNameCharKeyword_0_2; }

		//"short"
		public Keyword getNameShortKeyword_0_3() { return cNameShortKeyword_0_3; }

		//"int"
		public Keyword getNameIntKeyword_0_4() { return cNameIntKeyword_0_4; }

		//"float"
		public Keyword getNameFloatKeyword_0_5() { return cNameFloatKeyword_0_5; }

		//"long"
		public Keyword getNameLongKeyword_0_6() { return cNameLongKeyword_0_6; }

		//"double"
		public Keyword getNameDoubleKeyword_0_7() { return cNameDoubleKeyword_0_7; }

		//ObjectName
		public RuleCall getNameObjectNameParserRuleCall_0_8() { return cNameObjectNameParserRuleCall_0_8; }
	}

	public class ModifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Modifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPublicKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cPrivateKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cProtectedKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cStaticKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cFinalKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cNativeKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cSynchronizedKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cAbstractKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cThreadsafeKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cTransientKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		
		//Modifier:
		//	"public" | "private" | "protected" | "static" | "final" | "native" | "synchronized" | "abstract" | "threadsafe" |
		//	"transient";
		@Override public ParserRule getRule() { return rule; }

		//"public" | "private" | "protected" | "static" | "final" | "native" | "synchronized" | "abstract" | "threadsafe" |
		//"transient"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"public"
		public Keyword getPublicKeyword_0() { return cPublicKeyword_0; }

		//"private"
		public Keyword getPrivateKeyword_1() { return cPrivateKeyword_1; }

		//"protected"
		public Keyword getProtectedKeyword_2() { return cProtectedKeyword_2; }

		//"static"
		public Keyword getStaticKeyword_3() { return cStaticKeyword_3; }

		//"final"
		public Keyword getFinalKeyword_4() { return cFinalKeyword_4; }

		//"native"
		public Keyword getNativeKeyword_5() { return cNativeKeyword_5; }

		//"synchronized"
		public Keyword getSynchronizedKeyword_6() { return cSynchronizedKeyword_6; }

		//"abstract"
		public Keyword getAbstractKeyword_7() { return cAbstractKeyword_7; }

		//"threadsafe"
		public Keyword getThreadsafeKeyword_8() { return cThreadsafeKeyword_8; }

		//"transient"
		public Keyword getTransientKeyword_9() { return cTransientKeyword_9; }
	}

	public class CharacterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Character");
		private final RuleCall cSTRINGTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Character:
		//	STRING;
		@Override public ParserRule getRule() { return rule; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall() { return cSTRINGTerminalRuleCall; }
	}

	public class Decimal_digitsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "decimal_digits");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//decimal_digits:
		//	INT INT*;
		@Override public ParserRule getRule() { return rule; }

		//INT INT*
		public Group getGroup() { return cGroup; }

		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }

		//INT*
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}

	public class DoStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DoStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStatementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStatementStatementParserRuleCall_1_0 = (RuleCall)cStatementAssignment_1.eContents().get(0);
		private final Keyword cWhileKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cExpressionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExpressionExpressionParserRuleCall_4_0 = (RuleCall)cExpressionAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//DoStatement:
		//	"do" statement=Statement "while" "(" expression=Expression ")" ";";
		@Override public ParserRule getRule() { return rule; }

		//"do" statement=Statement "while" "(" expression=Expression ")" ";"
		public Group getGroup() { return cGroup; }

		//"do"
		public Keyword getDoKeyword_0() { return cDoKeyword_0; }

		//statement=Statement
		public Assignment getStatementAssignment_1() { return cStatementAssignment_1; }

		//Statement
		public RuleCall getStatementStatementParserRuleCall_1_0() { return cStatementStatementParserRuleCall_1_0; }

		//"while"
		public Keyword getWhileKeyword_2() { return cWhileKeyword_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//expression=Expression
		public Assignment getExpressionAssignment_4() { return cExpressionAssignment_4; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_4_0() { return cExpressionExpressionParserRuleCall_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }

		//";"
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}

	public class Exponent_partElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "exponent_part");
		private final Keyword cEKeyword = (Keyword)rule.eContents().get(1);
		
		//exponent_part:
		//	"0..9e";
		@Override public ParserRule getRule() { return rule; }

		//"0..9e"
		public Keyword getEKeyword() { return cEKeyword; }
	}

	public class IntegerLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntegerLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDecimal_integer_literalParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cHex_integer_literalParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cOctal_integer_literalParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//IntegerLiteral:
		//	decimal_integer_literal | hex_integer_literal | octal_integer_literal;
		@Override public ParserRule getRule() { return rule; }

		//decimal_integer_literal | hex_integer_literal | octal_integer_literal
		public Alternatives getAlternatives() { return cAlternatives; }

		//decimal_integer_literal
		public RuleCall getDecimal_integer_literalParserRuleCall_0() { return cDecimal_integer_literalParserRuleCall_0; }

		//hex_integer_literal
		public RuleCall getHex_integer_literalParserRuleCall_1() { return cHex_integer_literalParserRuleCall_1; }

		//octal_integer_literal
		public RuleCall getOctal_integer_literalParserRuleCall_2() { return cOctal_integer_literalParserRuleCall_2; }
	}

	public class Decimal_integer_literalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "decimal_integer_literal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cDecimal_digitsParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cNUMBER_SUFFIXTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//decimal_integer_literal:
		//	decimal_digits NUMBER_SUFFIX?;
		@Override public ParserRule getRule() { return rule; }

		//decimal_digits NUMBER_SUFFIX?
		public Group getGroup() { return cGroup; }

		//decimal_digits
		public RuleCall getDecimal_digitsParserRuleCall_0() { return cDecimal_digitsParserRuleCall_0; }

		//NUMBER_SUFFIX?
		public RuleCall getNUMBER_SUFFIXTerminalRuleCall_1() { return cNUMBER_SUFFIXTerminalRuleCall_1; }
	}

	public class Hex_integer_literalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hex_integer_literal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cHexa_numeralParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cNUMBER_SUFFIXTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//hex_integer_literal:
		//	hexa_numeral NUMBER_SUFFIX?;
		@Override public ParserRule getRule() { return rule; }

		//hexa_numeral NUMBER_SUFFIX?
		public Group getGroup() { return cGroup; }

		//hexa_numeral
		public RuleCall getHexa_numeralParserRuleCall_0() { return cHexa_numeralParserRuleCall_0; }

		//NUMBER_SUFFIX?
		public RuleCall getNUMBER_SUFFIXTerminalRuleCall_1() { return cNUMBER_SUFFIXTerminalRuleCall_1; }
	}

	public class Hexa_numeralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "hexa_numeral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Alternatives cAlternatives_0_0 = (Alternatives)cGroup_0.eContents().get(0);
		private final Keyword cXKeyword_0_0_0 = (Keyword)cAlternatives_0_0.eContents().get(0);
		private final Keyword cXKeyword_0_0_1 = (Keyword)cAlternatives_0_0.eContents().get(1);
		private final RuleCall cHEXATerminalRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final RuleCall cHEXATerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//hexa_numeral:
		//	("0x" | "0X") HEXA | HEXA;
		@Override public ParserRule getRule() { return rule; }

		//("0x" | "0X") HEXA | HEXA
		public Alternatives getAlternatives() { return cAlternatives; }

		//("0x" | "0X") HEXA
		public Group getGroup_0() { return cGroup_0; }

		//"0x" | "0X"
		public Alternatives getAlternatives_0_0() { return cAlternatives_0_0; }

		//"0x"
		public Keyword getXKeyword_0_0_0() { return cXKeyword_0_0_0; }

		//"0X"
		public Keyword getXKeyword_0_0_1() { return cXKeyword_0_0_1; }

		//HEXA
		public RuleCall getHEXATerminalRuleCall_0_1() { return cHEXATerminalRuleCall_0_1; }

		//HEXA
		public RuleCall getHEXATerminalRuleCall_1() { return cHEXATerminalRuleCall_1; }
	}

	public class Octal_integer_literalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "octal_integer_literal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cOctal_numeralParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cNUMBER_SUFFIXTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//octal_integer_literal:
		//	octal_numeral NUMBER_SUFFIX?;
		@Override public ParserRule getRule() { return rule; }

		//octal_numeral NUMBER_SUFFIX?
		public Group getGroup() { return cGroup; }

		//octal_numeral
		public RuleCall getOctal_numeralParserRuleCall_0() { return cOctal_numeralParserRuleCall_0; }

		//NUMBER_SUFFIX?
		public RuleCall getNUMBER_SUFFIXTerminalRuleCall_1() { return cNUMBER_SUFFIXTerminalRuleCall_1; }
	}

	public class Octal_numeralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "octal_numeral");
		private final RuleCall cZERO_TO_SEVENTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//octal_numeral:
		//	ZERO_TO_SEVEN*;
		@Override public ParserRule getRule() { return rule; }

		//ZERO_TO_SEVEN*
		public RuleCall getZERO_TO_SEVENTerminalRuleCall() { return cZERO_TO_SEVENTerminalRuleCall; }
	}

	public class FloatLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FloatLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cDecimal_digitsParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cFullStopKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final RuleCall cDecimal_digitsParserRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final RuleCall cExponent_partParserRuleCall_0_3 = (RuleCall)cGroup_0.eContents().get(3);
		private final RuleCall cFLOAT_SUFFIXTerminalRuleCall_0_4 = (RuleCall)cGroup_0.eContents().get(4);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cDecimal_digitsParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final RuleCall cExponent_partParserRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final RuleCall cFLOAT_SUFFIXTerminalRuleCall_1_3 = (RuleCall)cGroup_1.eContents().get(3);
		
		//FloatLiteral:
		//	decimal_digits "."? decimal_digits? exponent_part? FLOAT_SUFFIX? | "." decimal_digits exponent_part? FLOAT_SUFFIX?;
		@Override public ParserRule getRule() { return rule; }

		//decimal_digits "."? decimal_digits? exponent_part? FLOAT_SUFFIX? | "." decimal_digits exponent_part? FLOAT_SUFFIX?
		public Alternatives getAlternatives() { return cAlternatives; }

		//decimal_digits "."? decimal_digits? exponent_part? FLOAT_SUFFIX?
		public Group getGroup_0() { return cGroup_0; }

		//decimal_digits
		public RuleCall getDecimal_digitsParserRuleCall_0_0() { return cDecimal_digitsParserRuleCall_0_0; }

		//"."?
		public Keyword getFullStopKeyword_0_1() { return cFullStopKeyword_0_1; }

		//decimal_digits?
		public RuleCall getDecimal_digitsParserRuleCall_0_2() { return cDecimal_digitsParserRuleCall_0_2; }

		//exponent_part?
		public RuleCall getExponent_partParserRuleCall_0_3() { return cExponent_partParserRuleCall_0_3; }

		//FLOAT_SUFFIX?
		public RuleCall getFLOAT_SUFFIXTerminalRuleCall_0_4() { return cFLOAT_SUFFIXTerminalRuleCall_0_4; }

		//"." decimal_digits exponent_part? FLOAT_SUFFIX?
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//decimal_digits
		public RuleCall getDecimal_digitsParserRuleCall_1_1() { return cDecimal_digitsParserRuleCall_1_1; }

		//exponent_part?
		public RuleCall getExponent_partParserRuleCall_1_2() { return cExponent_partParserRuleCall_1_2; }

		//FLOAT_SUFFIX?
		public RuleCall getFLOAT_SUFFIXTerminalRuleCall_1_3() { return cFLOAT_SUFFIXTerminalRuleCall_1_3; }
	}

	public class ForStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ForStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cVariable_declarationAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cVariable_declarationVariableDeclarationParserRuleCall_2_0_0 = (RuleCall)cVariable_declarationAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Assignment cFor_expression1Assignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cFor_expression1ExpressionParserRuleCall_2_1_0_0 = (RuleCall)cFor_expression1Assignment_2_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1_1 = (Keyword)cGroup_2_1.eContents().get(1);
		private final Keyword cSemicolonKeyword_2_2 = (Keyword)cAlternatives_2.eContents().get(2);
		private final Assignment cFor_expression2Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFor_expression2ExpressionParserRuleCall_3_0 = (RuleCall)cFor_expression2Assignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cFor_expression3Assignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cFor_expression3ExpressionParserRuleCall_5_0 = (RuleCall)cFor_expression3Assignment_5.eContents().get(0);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cStatementAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cStatementStatementParserRuleCall_8_0 = (RuleCall)cStatementAssignment_8.eContents().get(0);
		
		//ForStatement:
		//	"for" "(" (variable_declaration=VariableDeclaration | for_expression1=Expression ";" | ";")
		//	for_expression2=Expression? ";" for_expression3=Expression? ";" ")" statement=Statement;
		@Override public ParserRule getRule() { return rule; }

		//"for" "(" (variable_declaration=VariableDeclaration | for_expression1=Expression ";" | ";") for_expression2=Expression?
		//";" for_expression3=Expression? ";" ")" statement=Statement
		public Group getGroup() { return cGroup; }

		//"for"
		public Keyword getForKeyword_0() { return cForKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//variable_declaration=VariableDeclaration | for_expression1=Expression ";" | ";"
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//variable_declaration=VariableDeclaration
		public Assignment getVariable_declarationAssignment_2_0() { return cVariable_declarationAssignment_2_0; }

		//VariableDeclaration
		public RuleCall getVariable_declarationVariableDeclarationParserRuleCall_2_0_0() { return cVariable_declarationVariableDeclarationParserRuleCall_2_0_0; }

		//for_expression1=Expression ";"
		public Group getGroup_2_1() { return cGroup_2_1; }

		//for_expression1=Expression
		public Assignment getFor_expression1Assignment_2_1_0() { return cFor_expression1Assignment_2_1_0; }

		//Expression
		public RuleCall getFor_expression1ExpressionParserRuleCall_2_1_0_0() { return cFor_expression1ExpressionParserRuleCall_2_1_0_0; }

		//";"
		public Keyword getSemicolonKeyword_2_1_1() { return cSemicolonKeyword_2_1_1; }

		//";"
		public Keyword getSemicolonKeyword_2_2() { return cSemicolonKeyword_2_2; }

		//for_expression2=Expression?
		public Assignment getFor_expression2Assignment_3() { return cFor_expression2Assignment_3; }

		//Expression
		public RuleCall getFor_expression2ExpressionParserRuleCall_3_0() { return cFor_expression2ExpressionParserRuleCall_3_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }

		//for_expression3=Expression?
		public Assignment getFor_expression3Assignment_5() { return cFor_expression3Assignment_5; }

		//Expression
		public RuleCall getFor_expression3ExpressionParserRuleCall_5_0() { return cFor_expression3ExpressionParserRuleCall_5_0; }

		//";"
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }

		//")"
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }

		//statement=Statement
		public Assignment getStatementAssignment_8() { return cStatementAssignment_8; }

		//Statement
		public RuleCall getStatementStatementParserRuleCall_8_0() { return cStatementStatementParserRuleCall_8_0; }
	}

	public class IfStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IfStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cIf_statementAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cIf_statementStatementParserRuleCall_4_0 = (RuleCall)cIf_statementAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cElseKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cElse_statementAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cElse_statementStatementParserRuleCall_5_1_0 = (RuleCall)cElse_statementAssignment_5_1.eContents().get(0);
		
		//IfStatement:
		//	"if" "(" expression=Expression ")" if_statement=Statement ("else" else_statement=Statement)?;
		@Override public ParserRule getRule() { return rule; }

		//"if" "(" expression=Expression ")" if_statement=Statement ("else" else_statement=Statement)?
		public Group getGroup() { return cGroup; }

		//"if"
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//expression=Expression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0() { return cExpressionExpressionParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//if_statement=Statement
		public Assignment getIf_statementAssignment_4() { return cIf_statementAssignment_4; }

		//Statement
		public RuleCall getIf_statementStatementParserRuleCall_4_0() { return cIf_statementStatementParserRuleCall_4_0; }

		//("else" else_statement=Statement)?
		public Group getGroup_5() { return cGroup_5; }

		//"else"
		public Keyword getElseKeyword_5_0() { return cElseKeyword_5_0; }

		//else_statement=Statement
		public Assignment getElse_statementAssignment_5_1() { return cElse_statementAssignment_5_1; }

		//Statement
		public RuleCall getElse_statementStatementParserRuleCall_5_1_0() { return cElse_statementStatementParserRuleCall_5_1_0; }
	}

	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cVariable_declarationAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cVariable_declarationVariableDeclarationParserRuleCall_0_0 = (RuleCall)cVariable_declarationAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cStatement_expressionAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cStatement_expressionExpressionParserRuleCall_1_0_0 = (RuleCall)cStatement_expressionAssignment_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cStatement_blockAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cStatement_blockStatementBlockParserRuleCall_2_0 = (RuleCall)cStatement_blockAssignment_2.eContents().get(0);
		private final Assignment cIf_statementAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cIf_statementIfStatementParserRuleCall_3_0 = (RuleCall)cIf_statementAssignment_3.eContents().get(0);
		private final Assignment cDo_statementAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cDo_statementDoStatementParserRuleCall_4_0 = (RuleCall)cDo_statementAssignment_4.eContents().get(0);
		private final Assignment cWhile_statementAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cWhile_statementWhile_statementParserRuleCall_5_0 = (RuleCall)cWhile_statementAssignment_5.eContents().get(0);
		private final Assignment cFor_statementAssignment_6 = (Assignment)cAlternatives.eContents().get(6);
		private final RuleCall cFor_statementForStatementParserRuleCall_6_0 = (RuleCall)cFor_statementAssignment_6.eContents().get(0);
		private final Assignment cTry_statementAssignment_7 = (Assignment)cAlternatives.eContents().get(7);
		private final RuleCall cTry_statementTryStatementParserRuleCall_7_0 = (RuleCall)cTry_statementAssignment_7.eContents().get(0);
		private final Assignment cSwith_statementAssignment_8 = (Assignment)cAlternatives.eContents().get(8);
		private final RuleCall cSwith_statementSwitchStatementParserRuleCall_8_0 = (RuleCall)cSwith_statementAssignment_8.eContents().get(0);
		private final Group cGroup_9 = (Group)cAlternatives.eContents().get(9);
		private final Action cStatementAction_9_0 = (Action)cGroup_9.eContents().get(0);
		private final Group cGroup_9_1 = (Group)cGroup_9.eContents().get(1);
		private final Keyword cSynchronizedKeyword_9_1_0 = (Keyword)cGroup_9_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_9_1_1 = (Keyword)cGroup_9_1.eContents().get(1);
		private final Assignment cSync_expressionAssignment_9_1_2 = (Assignment)cGroup_9_1.eContents().get(2);
		private final RuleCall cSync_expressionExpressionParserRuleCall_9_1_2_0 = (RuleCall)cSync_expressionAssignment_9_1_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_9_1_3 = (Keyword)cGroup_9_1.eContents().get(3);
		private final Assignment cSync_statementAssignment_9_1_4 = (Assignment)cGroup_9_1.eContents().get(4);
		private final RuleCall cSync_statementStatementParserRuleCall_9_1_4_0 = (RuleCall)cSync_statementAssignment_9_1_4.eContents().get(0);
		private final Group cGroup_10 = (Group)cAlternatives.eContents().get(10);
		private final Action cStatementAction_10_0 = (Action)cGroup_10.eContents().get(0);
		private final Group cGroup_10_1 = (Group)cGroup_10.eContents().get(1);
		private final Keyword cReturnKeyword_10_1_0 = (Keyword)cGroup_10_1.eContents().get(0);
		private final Assignment cReturn_expressionAssignment_10_1_1 = (Assignment)cGroup_10_1.eContents().get(1);
		private final RuleCall cReturn_expressionExpressionParserRuleCall_10_1_1_0 = (RuleCall)cReturn_expressionAssignment_10_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_10_1_2 = (Keyword)cGroup_10_1.eContents().get(2);
		private final Group cGroup_11 = (Group)cAlternatives.eContents().get(11);
		private final Action cStatementAction_11_0 = (Action)cGroup_11.eContents().get(0);
		private final Group cGroup_11_1 = (Group)cGroup_11.eContents().get(1);
		private final Keyword cThrowKeyword_11_1_0 = (Keyword)cGroup_11_1.eContents().get(0);
		private final Assignment cThrow_expressionAssignment_11_1_1 = (Assignment)cGroup_11_1.eContents().get(1);
		private final RuleCall cThrow_expressionExpressionParserRuleCall_11_1_1_0 = (RuleCall)cThrow_expressionAssignment_11_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_11_1_2 = (Keyword)cGroup_11_1.eContents().get(2);
		private final Group cGroup_12 = (Group)cAlternatives.eContents().get(12);
		private final Action cStatementAction_12_0 = (Action)cGroup_12.eContents().get(0);
		private final Group cGroup_12_1 = (Group)cGroup_12.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_12_1_0 = (RuleCall)cGroup_12_1.eContents().get(0);
		private final Keyword cColonKeyword_12_1_1 = (Keyword)cGroup_12_1.eContents().get(1);
		private final Assignment cNamed_statementAssignment_12_1_2 = (Assignment)cGroup_12_1.eContents().get(2);
		private final RuleCall cNamed_statementStatementParserRuleCall_12_1_2_0 = (RuleCall)cNamed_statementAssignment_12_1_2.eContents().get(0);
		private final Group cGroup_13 = (Group)cAlternatives.eContents().get(13);
		private final Action cStatementAction_13_0 = (Action)cGroup_13.eContents().get(0);
		private final Group cGroup_13_1 = (Group)cGroup_13.eContents().get(1);
		private final Keyword cBreakKeyword_13_1_0 = (Keyword)cGroup_13_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_13_1_1 = (RuleCall)cGroup_13_1.eContents().get(1);
		private final Keyword cSemicolonKeyword_13_1_2 = (Keyword)cGroup_13_1.eContents().get(2);
		private final Group cGroup_14 = (Group)cAlternatives.eContents().get(14);
		private final Action cStatementAction_14_0 = (Action)cGroup_14.eContents().get(0);
		private final Group cGroup_14_1 = (Group)cGroup_14.eContents().get(1);
		private final Keyword cContinueKeyword_14_1_0 = (Keyword)cGroup_14_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_14_1_1 = (RuleCall)cGroup_14_1.eContents().get(1);
		private final Keyword cSemicolonKeyword_14_1_2 = (Keyword)cGroup_14_1.eContents().get(2);
		private final Group cGroup_15 = (Group)cAlternatives.eContents().get(15);
		private final Action cStatementAction_15_0 = (Action)cGroup_15.eContents().get(0);
		private final Keyword cSemicolonKeyword_15_1 = (Keyword)cGroup_15.eContents().get(1);
		
		//Statement:
		//	variable_declaration=VariableDeclaration | statement_expression=Expression ";" | statement_block=StatementBlock |
		//	if_statement=IfStatement | do_statement=DoStatement | while_statement=while_statement | for_statement=ForStatement |
		//	try_statement=TryStatement | swith_statement=SwitchStatement | {Statement} ("synchronized" "("
		//	sync_expression=Expression ")" sync_statement=Statement) | {Statement} ("return" return_expression=Expression? ";") |
		//	{Statement} ("throw" throw_expression=Expression ";") | {Statement} (ID ":" named_statement=Statement) | {Statement}
		//	("break" ID? ";") | {Statement} ("continue" ID? ";") | {Statement} ";";
		@Override public ParserRule getRule() { return rule; }

		//variable_declaration=VariableDeclaration | statement_expression=Expression ";" | statement_block=StatementBlock |
		//if_statement=IfStatement | do_statement=DoStatement | while_statement=while_statement | for_statement=ForStatement |
		//try_statement=TryStatement | swith_statement=SwitchStatement | {Statement} ("synchronized" "("
		//sync_expression=Expression ")" sync_statement=Statement) | {Statement} ("return" return_expression=Expression? ";") |
		//{Statement} ("throw" throw_expression=Expression ";") | {Statement} (ID ":" named_statement=Statement) | {Statement}
		//("break" ID? ";") | {Statement} ("continue" ID? ";") | {Statement} ";"
		public Alternatives getAlternatives() { return cAlternatives; }

		//variable_declaration=VariableDeclaration
		public Assignment getVariable_declarationAssignment_0() { return cVariable_declarationAssignment_0; }

		//VariableDeclaration
		public RuleCall getVariable_declarationVariableDeclarationParserRuleCall_0_0() { return cVariable_declarationVariableDeclarationParserRuleCall_0_0; }

		//statement_expression=Expression ";"
		public Group getGroup_1() { return cGroup_1; }

		//statement_expression=Expression
		public Assignment getStatement_expressionAssignment_1_0() { return cStatement_expressionAssignment_1_0; }

		//Expression
		public RuleCall getStatement_expressionExpressionParserRuleCall_1_0_0() { return cStatement_expressionExpressionParserRuleCall_1_0_0; }

		//";"
		public Keyword getSemicolonKeyword_1_1() { return cSemicolonKeyword_1_1; }

		//statement_block=StatementBlock
		public Assignment getStatement_blockAssignment_2() { return cStatement_blockAssignment_2; }

		//StatementBlock
		public RuleCall getStatement_blockStatementBlockParserRuleCall_2_0() { return cStatement_blockStatementBlockParserRuleCall_2_0; }

		//if_statement=IfStatement
		public Assignment getIf_statementAssignment_3() { return cIf_statementAssignment_3; }

		//IfStatement
		public RuleCall getIf_statementIfStatementParserRuleCall_3_0() { return cIf_statementIfStatementParserRuleCall_3_0; }

		//do_statement=DoStatement
		public Assignment getDo_statementAssignment_4() { return cDo_statementAssignment_4; }

		//DoStatement
		public RuleCall getDo_statementDoStatementParserRuleCall_4_0() { return cDo_statementDoStatementParserRuleCall_4_0; }

		//while_statement=while_statement
		public Assignment getWhile_statementAssignment_5() { return cWhile_statementAssignment_5; }

		//while_statement
		public RuleCall getWhile_statementWhile_statementParserRuleCall_5_0() { return cWhile_statementWhile_statementParserRuleCall_5_0; }

		//for_statement=ForStatement
		public Assignment getFor_statementAssignment_6() { return cFor_statementAssignment_6; }

		//ForStatement
		public RuleCall getFor_statementForStatementParserRuleCall_6_0() { return cFor_statementForStatementParserRuleCall_6_0; }

		//try_statement=TryStatement
		public Assignment getTry_statementAssignment_7() { return cTry_statementAssignment_7; }

		//TryStatement
		public RuleCall getTry_statementTryStatementParserRuleCall_7_0() { return cTry_statementTryStatementParserRuleCall_7_0; }

		//swith_statement=SwitchStatement
		public Assignment getSwith_statementAssignment_8() { return cSwith_statementAssignment_8; }

		//SwitchStatement
		public RuleCall getSwith_statementSwitchStatementParserRuleCall_8_0() { return cSwith_statementSwitchStatementParserRuleCall_8_0; }

		//{Statement} ("synchronized" "(" sync_expression=Expression ")" sync_statement=Statement)
		public Group getGroup_9() { return cGroup_9; }

		//{Statement}
		public Action getStatementAction_9_0() { return cStatementAction_9_0; }

		//"synchronized" "(" sync_expression=Expression ")" sync_statement=Statement
		public Group getGroup_9_1() { return cGroup_9_1; }

		//"synchronized"
		public Keyword getSynchronizedKeyword_9_1_0() { return cSynchronizedKeyword_9_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_9_1_1() { return cLeftParenthesisKeyword_9_1_1; }

		//sync_expression=Expression
		public Assignment getSync_expressionAssignment_9_1_2() { return cSync_expressionAssignment_9_1_2; }

		//Expression
		public RuleCall getSync_expressionExpressionParserRuleCall_9_1_2_0() { return cSync_expressionExpressionParserRuleCall_9_1_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_9_1_3() { return cRightParenthesisKeyword_9_1_3; }

		//sync_statement=Statement
		public Assignment getSync_statementAssignment_9_1_4() { return cSync_statementAssignment_9_1_4; }

		//Statement
		public RuleCall getSync_statementStatementParserRuleCall_9_1_4_0() { return cSync_statementStatementParserRuleCall_9_1_4_0; }

		//{Statement} ("return" return_expression=Expression? ";")
		public Group getGroup_10() { return cGroup_10; }

		//{Statement}
		public Action getStatementAction_10_0() { return cStatementAction_10_0; }

		//"return" return_expression=Expression? ";"
		public Group getGroup_10_1() { return cGroup_10_1; }

		//"return"
		public Keyword getReturnKeyword_10_1_0() { return cReturnKeyword_10_1_0; }

		//return_expression=Expression?
		public Assignment getReturn_expressionAssignment_10_1_1() { return cReturn_expressionAssignment_10_1_1; }

		//Expression
		public RuleCall getReturn_expressionExpressionParserRuleCall_10_1_1_0() { return cReturn_expressionExpressionParserRuleCall_10_1_1_0; }

		//";"
		public Keyword getSemicolonKeyword_10_1_2() { return cSemicolonKeyword_10_1_2; }

		//{Statement} ("throw" throw_expression=Expression ";")
		public Group getGroup_11() { return cGroup_11; }

		//{Statement}
		public Action getStatementAction_11_0() { return cStatementAction_11_0; }

		//"throw" throw_expression=Expression ";"
		public Group getGroup_11_1() { return cGroup_11_1; }

		//"throw"
		public Keyword getThrowKeyword_11_1_0() { return cThrowKeyword_11_1_0; }

		//throw_expression=Expression
		public Assignment getThrow_expressionAssignment_11_1_1() { return cThrow_expressionAssignment_11_1_1; }

		//Expression
		public RuleCall getThrow_expressionExpressionParserRuleCall_11_1_1_0() { return cThrow_expressionExpressionParserRuleCall_11_1_1_0; }

		//";"
		public Keyword getSemicolonKeyword_11_1_2() { return cSemicolonKeyword_11_1_2; }

		//{Statement} (ID ":" named_statement=Statement)
		public Group getGroup_12() { return cGroup_12; }

		//{Statement}
		public Action getStatementAction_12_0() { return cStatementAction_12_0; }

		//ID ":" named_statement=Statement
		public Group getGroup_12_1() { return cGroup_12_1; }

		//ID
		public RuleCall getIDTerminalRuleCall_12_1_0() { return cIDTerminalRuleCall_12_1_0; }

		//":"
		public Keyword getColonKeyword_12_1_1() { return cColonKeyword_12_1_1; }

		//named_statement=Statement
		public Assignment getNamed_statementAssignment_12_1_2() { return cNamed_statementAssignment_12_1_2; }

		//Statement
		public RuleCall getNamed_statementStatementParserRuleCall_12_1_2_0() { return cNamed_statementStatementParserRuleCall_12_1_2_0; }

		//{Statement} ("break" ID? ";")
		public Group getGroup_13() { return cGroup_13; }

		//{Statement}
		public Action getStatementAction_13_0() { return cStatementAction_13_0; }

		//"break" ID? ";"
		public Group getGroup_13_1() { return cGroup_13_1; }

		//"break"
		public Keyword getBreakKeyword_13_1_0() { return cBreakKeyword_13_1_0; }

		//ID?
		public RuleCall getIDTerminalRuleCall_13_1_1() { return cIDTerminalRuleCall_13_1_1; }

		//";"
		public Keyword getSemicolonKeyword_13_1_2() { return cSemicolonKeyword_13_1_2; }

		//{Statement} ("continue" ID? ";")
		public Group getGroup_14() { return cGroup_14; }

		//{Statement}
		public Action getStatementAction_14_0() { return cStatementAction_14_0; }

		//"continue" ID? ";"
		public Group getGroup_14_1() { return cGroup_14_1; }

		//"continue"
		public Keyword getContinueKeyword_14_1_0() { return cContinueKeyword_14_1_0; }

		//ID?
		public RuleCall getIDTerminalRuleCall_14_1_1() { return cIDTerminalRuleCall_14_1_1; }

		//";"
		public Keyword getSemicolonKeyword_14_1_2() { return cSemicolonKeyword_14_1_2; }

		//{Statement} ";"
		public Group getGroup_15() { return cGroup_15; }

		//{Statement}
		public Action getStatementAction_15_0() { return cStatementAction_15_0; }

		//";"
		public Keyword getSemicolonKeyword_15_1() { return cSemicolonKeyword_15_1; }
	}

	public class SwitchStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SwitchStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSwitchKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSwitch_expressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSwitch_expressionExpressionParserRuleCall_2_0 = (RuleCall)cSwitch_expressionAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Group cGroup_5_0 = (Group)cAlternatives_5.eContents().get(0);
		private final Keyword cCaseKeyword_5_0_0 = (Keyword)cGroup_5_0.eContents().get(0);
		private final Assignment cCase_expressionsAssignment_5_0_1 = (Assignment)cGroup_5_0.eContents().get(1);
		private final RuleCall cCase_expressionsExpressionParserRuleCall_5_0_1_0 = (RuleCall)cCase_expressionsAssignment_5_0_1.eContents().get(0);
		private final Keyword cColonKeyword_5_0_2 = (Keyword)cGroup_5_0.eContents().get(2);
		private final Group cGroup_5_1 = (Group)cAlternatives_5.eContents().get(1);
		private final Keyword cDefaultKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Keyword cColonKeyword_5_1_1 = (Keyword)cGroup_5_1.eContents().get(1);
		private final Assignment cStatementsAssignment_5_2 = (Assignment)cAlternatives_5.eContents().get(2);
		private final RuleCall cStatementsStatementParserRuleCall_5_2_0 = (RuleCall)cStatementsAssignment_5_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//SwitchStatement:
		//	"switch" "(" switch_expression=Expression ")" "{" ("case" case_expressions+=Expression ":" | "default" ":" |
		//	statements+=Statement)* "}";
		@Override public ParserRule getRule() { return rule; }

		//"switch" "(" switch_expression=Expression ")" "{" ("case" case_expressions+=Expression ":" | "default" ":" |
		//statements+=Statement)* "}"
		public Group getGroup() { return cGroup; }

		//"switch"
		public Keyword getSwitchKeyword_0() { return cSwitchKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//switch_expression=Expression
		public Assignment getSwitch_expressionAssignment_2() { return cSwitch_expressionAssignment_2; }

		//Expression
		public RuleCall getSwitch_expressionExpressionParserRuleCall_2_0() { return cSwitch_expressionExpressionParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//("case" case_expressions+=Expression ":" | "default" ":" | statements+=Statement)*
		public Alternatives getAlternatives_5() { return cAlternatives_5; }

		//"case" case_expressions+=Expression ":"
		public Group getGroup_5_0() { return cGroup_5_0; }

		//"case"
		public Keyword getCaseKeyword_5_0_0() { return cCaseKeyword_5_0_0; }

		//case_expressions+=Expression
		public Assignment getCase_expressionsAssignment_5_0_1() { return cCase_expressionsAssignment_5_0_1; }

		//Expression
		public RuleCall getCase_expressionsExpressionParserRuleCall_5_0_1_0() { return cCase_expressionsExpressionParserRuleCall_5_0_1_0; }

		//":"
		public Keyword getColonKeyword_5_0_2() { return cColonKeyword_5_0_2; }

		//"default" ":"
		public Group getGroup_5_1() { return cGroup_5_1; }

		//"default"
		public Keyword getDefaultKeyword_5_1_0() { return cDefaultKeyword_5_1_0; }

		//":"
		public Keyword getColonKeyword_5_1_1() { return cColonKeyword_5_1_1; }

		//statements+=Statement
		public Assignment getStatementsAssignment_5_2() { return cStatementsAssignment_5_2; }

		//Statement
		public RuleCall getStatementsStatementParserRuleCall_5_2_0() { return cStatementsStatementParserRuleCall_5_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class TryStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TryStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTryKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTry_statementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTry_statementStatementParserRuleCall_1_0 = (RuleCall)cTry_statementAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCatchKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cParamentersAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cParamentersParameterParserRuleCall_2_2_0 = (RuleCall)cParamentersAssignment_2_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Assignment cCatch_statementsAssignment_2_4 = (Assignment)cGroup_2.eContents().get(4);
		private final RuleCall cCatch_statementsStatementParserRuleCall_2_4_0 = (RuleCall)cCatch_statementsAssignment_2_4.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cFinallyKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cFinally_statementAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cFinally_statementStatementParserRuleCall_3_1_0 = (RuleCall)cFinally_statementAssignment_3_1.eContents().get(0);
		
		//TryStatement:
		//	"try" try_statement=Statement ("catch" "(" paramenters+=Parameter ")" catch_statements+=Statement)* ("finally"
		//	finally_statement=Statement)?;
		@Override public ParserRule getRule() { return rule; }

		//"try" try_statement=Statement ("catch" "(" paramenters+=Parameter ")" catch_statements+=Statement)* ("finally"
		//finally_statement=Statement)?
		public Group getGroup() { return cGroup; }

		//"try"
		public Keyword getTryKeyword_0() { return cTryKeyword_0; }

		//try_statement=Statement
		public Assignment getTry_statementAssignment_1() { return cTry_statementAssignment_1; }

		//Statement
		public RuleCall getTry_statementStatementParserRuleCall_1_0() { return cTry_statementStatementParserRuleCall_1_0; }

		//("catch" "(" paramenters+=Parameter ")" catch_statements+=Statement)*
		public Group getGroup_2() { return cGroup_2; }

		//"catch"
		public Keyword getCatchKeyword_2_0() { return cCatchKeyword_2_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_1() { return cLeftParenthesisKeyword_2_1; }

		//paramenters+=Parameter
		public Assignment getParamentersAssignment_2_2() { return cParamentersAssignment_2_2; }

		//Parameter
		public RuleCall getParamentersParameterParserRuleCall_2_2_0() { return cParamentersParameterParserRuleCall_2_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }

		//catch_statements+=Statement
		public Assignment getCatch_statementsAssignment_2_4() { return cCatch_statementsAssignment_2_4; }

		//Statement
		public RuleCall getCatch_statementsStatementParserRuleCall_2_4_0() { return cCatch_statementsStatementParserRuleCall_2_4_0; }

		//("finally" finally_statement=Statement)?
		public Group getGroup_3() { return cGroup_3; }

		//"finally"
		public Keyword getFinallyKeyword_3_0() { return cFinallyKeyword_3_0; }

		//finally_statement=Statement
		public Assignment getFinally_statementAssignment_3_1() { return cFinally_statementAssignment_3_1; }

		//Statement
		public RuleCall getFinally_statementStatementParserRuleCall_3_1_0() { return cFinally_statementStatementParserRuleCall_3_1_0; }
	}

	public class While_statementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "while_statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cStatementAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStatementStatementParserRuleCall_4_0 = (RuleCall)cStatementAssignment_4.eContents().get(0);
		
		//while_statement:
		//	"while" "(" expression=Expression ")" statement=Statement;
		@Override public ParserRule getRule() { return rule; }

		//"while" "(" expression=Expression ")" statement=Statement
		public Group getGroup() { return cGroup; }

		//"while"
		public Keyword getWhileKeyword_0() { return cWhileKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//expression=Expression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0() { return cExpressionExpressionParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//statement=Statement
		public Assignment getStatementAssignment_4() { return cStatementAssignment_4; }

		//Statement
		public RuleCall getStatementStatementParserRuleCall_4_0() { return cStatementStatementParserRuleCall_4_0; }
	}
	
	
	private final HeadElements pHead;
	private final CompilationUnitElements pCompilationUnit;
	private final PackageStatementElements pPackageStatement;
	private final ImportStatementElements pImportStatement;
	private final ImportStatement_Elements pImportStatement_;
	private final ObjectNameElements pObjectName;
	private final TypeDeclarationElements pTypeDeclaration;
	private final ClassDeclarationElements pClassDeclaration;
	private final InterfaceDeclarationElements pInterfaceDeclaration;
	private final FieldDeclarationElements pFieldDeclaration;
	private final StaticInitializerElements pStaticInitializer;
	private final MethodDeclarationElements pMethodDeclaration;
	private final ConstructorDeclarationElements pConstructorDeclaration;
	private final ParameterListElements pParameterList;
	private final ParameterElements pParameter;
	private final StatementBlockElements pStatementBlock;
	private final VariableDeclarationElements pVariableDeclaration;
	private final VariableDeclaratorElements pVariableDeclarator;
	private final VariableInitializerElements pVariableInitializer;
	private final TypeElements pType;
	private final ExpressionElements pExpression;
	private final NumericExpressionElements pNumericExpression;
	private final BitExpressionElements pBitExpression;
	private final TestingExpressionElements pTestingExpression;
	private final LogicalExpressionElements pLogicalExpression;
	private final ArgsExpressionElements pArgsExpression;
	private final ArglistElements pArglist;
	private final CastingExpressionElements pCastingExpression;
	private final CreatingExpressionElements pCreatingExpression;
	private final ParenthesisExpressionElements pParenthesisExpression;
	private final PrimaryExpressionElements pPrimaryExpression;
	private final LiteralExpressionElements pLiteralExpression;
	private final TypeSpecifierElements pTypeSpecifier;
	private final ModifierElements pModifier;
	private final CharacterElements pCharacter;
	private final Decimal_digitsElements pDecimal_digits;
	private final DoStatementElements pDoStatement;
	private final Exponent_partElements pExponent_part;
	private final IntegerLiteralElements pIntegerLiteral;
	private final Decimal_integer_literalElements pDecimal_integer_literal;
	private final Hex_integer_literalElements pHex_integer_literal;
	private final Hexa_numeralElements pHexa_numeral;
	private final Octal_integer_literalElements pOctal_integer_literal;
	private final Octal_numeralElements pOctal_numeral;
	private final FloatLiteralElements pFloatLiteral;
	private final ForStatementElements pForStatement;
	private final IfStatementElements pIfStatement;
	private final StatementElements pStatement;
	private final SwitchStatementElements pSwitchStatement;
	private final TryStatementElements pTryStatement;
	private final While_statementElements pWhile_statement;
	private final TerminalRule tHEXA;
	private final TerminalRule tFLOAT_SUFFIX;
	private final TerminalRule tNUMBER_SUFFIX;
	private final TerminalRule tZERO_TO_SEVEN;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public JavadslGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pHead = new HeadElements();
		this.pCompilationUnit = new CompilationUnitElements();
		this.pPackageStatement = new PackageStatementElements();
		this.pImportStatement = new ImportStatementElements();
		this.pImportStatement_ = new ImportStatement_Elements();
		this.pObjectName = new ObjectNameElements();
		this.pTypeDeclaration = new TypeDeclarationElements();
		this.pClassDeclaration = new ClassDeclarationElements();
		this.pInterfaceDeclaration = new InterfaceDeclarationElements();
		this.pFieldDeclaration = new FieldDeclarationElements();
		this.pStaticInitializer = new StaticInitializerElements();
		this.pMethodDeclaration = new MethodDeclarationElements();
		this.pConstructorDeclaration = new ConstructorDeclarationElements();
		this.pParameterList = new ParameterListElements();
		this.pParameter = new ParameterElements();
		this.pStatementBlock = new StatementBlockElements();
		this.pVariableDeclaration = new VariableDeclarationElements();
		this.pVariableDeclarator = new VariableDeclaratorElements();
		this.pVariableInitializer = new VariableInitializerElements();
		this.pType = new TypeElements();
		this.pExpression = new ExpressionElements();
		this.pNumericExpression = new NumericExpressionElements();
		this.pBitExpression = new BitExpressionElements();
		this.pTestingExpression = new TestingExpressionElements();
		this.pLogicalExpression = new LogicalExpressionElements();
		this.pArgsExpression = new ArgsExpressionElements();
		this.pArglist = new ArglistElements();
		this.pCastingExpression = new CastingExpressionElements();
		this.pCreatingExpression = new CreatingExpressionElements();
		this.pParenthesisExpression = new ParenthesisExpressionElements();
		this.pPrimaryExpression = new PrimaryExpressionElements();
		this.pLiteralExpression = new LiteralExpressionElements();
		this.pTypeSpecifier = new TypeSpecifierElements();
		this.pModifier = new ModifierElements();
		this.pCharacter = new CharacterElements();
		this.pDecimal_digits = new Decimal_digitsElements();
		this.pDoStatement = new DoStatementElements();
		this.pExponent_part = new Exponent_partElements();
		this.pIntegerLiteral = new IntegerLiteralElements();
		this.pDecimal_integer_literal = new Decimal_integer_literalElements();
		this.pHex_integer_literal = new Hex_integer_literalElements();
		this.pHexa_numeral = new Hexa_numeralElements();
		this.pOctal_integer_literal = new Octal_integer_literalElements();
		this.pOctal_numeral = new Octal_numeralElements();
		this.pFloatLiteral = new FloatLiteralElements();
		this.pForStatement = new ForStatementElements();
		this.pIfStatement = new IfStatementElements();
		this.pStatement = new StatementElements();
		this.pSwitchStatement = new SwitchStatementElements();
		this.pTryStatement = new TryStatementElements();
		this.pWhile_statement = new While_statementElements();
		this.tHEXA = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "HEXA");
		this.tFLOAT_SUFFIX = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "FLOAT_SUFFIX");
		this.tNUMBER_SUFFIX = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "NUMBER_SUFFIX");
		this.tZERO_TO_SEVEN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ZERO_TO_SEVEN");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.com.Javadsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Head:
	//	java+=CompilationUnit;
	public HeadElements getHeadAccess() {
		return pHead;
	}
	
	public ParserRule getHeadRule() {
		return getHeadAccess().getRule();
	}

	//CompilationUnit:
	//	{CompilationUnit} package=PackageStatement? imports+=ImportStatement* type_declarations+=TypeDeclaration*;
	public CompilationUnitElements getCompilationUnitAccess() {
		return pCompilationUnit;
	}
	
	public ParserRule getCompilationUnitRule() {
		return getCompilationUnitAccess().getRule();
	}

	//PackageStatement:
	//	"package" ObjectName ";";
	public PackageStatementElements getPackageStatementAccess() {
		return pPackageStatement;
	}
	
	public ParserRule getPackageStatementRule() {
		return getPackageStatementAccess().getRule();
	}

	//ImportStatement:
	//	"import" ImportStatement_;
	public ImportStatementElements getImportStatementAccess() {
		return pImportStatement;
	}
	
	public ParserRule getImportStatementRule() {
		return getImportStatementAccess().getRule();
	}

	//ImportStatement_:
	//	ObjectName ("." "*")? ";";
	public ImportStatement_Elements getImportStatement_Access() {
		return pImportStatement_;
	}
	
	public ParserRule getImportStatement_Rule() {
		return getImportStatement_Access().getRule();
	}

	//ObjectName:
	//	ID ("." ID)*;
	public ObjectNameElements getObjectNameAccess() {
		return pObjectName;
	}
	
	public ParserRule getObjectNameRule() {
		return getObjectNameAccess().getRule();
	}

	//TypeDeclaration:
	//	(class_declaration=ClassDeclaration | interface_declaration=InterfaceDeclaration) ";";
	public TypeDeclarationElements getTypeDeclarationAccess() {
		return pTypeDeclaration;
	}
	
	public ParserRule getTypeDeclarationRule() {
		return getTypeDeclarationAccess().getRule();
	}

	//ClassDeclaration:
	//	{ClassDeclaration} modifiers+=Modifier* "class" ID ("extends" ObjectName)? ("implements" ObjectName ("."
	//	ObjectName)*)? "{" field_declarations+=FieldDeclaration* "}";
	public ClassDeclarationElements getClassDeclarationAccess() {
		return pClassDeclaration;
	}
	
	public ParserRule getClassDeclarationRule() {
		return getClassDeclarationAccess().getRule();
	}

	//InterfaceDeclaration:
	//	{InterfaceDeclaration} Modifier* "interface" ID ("extends" ObjectName ("." ObjectName)*)? "{"
	//	field_declarations+=FieldDeclaration* "}";
	public InterfaceDeclarationElements getInterfaceDeclarationAccess() {
		return pInterfaceDeclaration;
	}
	
	public ParserRule getInterfaceDeclarationRule() {
		return getInterfaceDeclarationAccess().getRule();
	}

	//FieldDeclaration:
	//	declaration=(MethodDeclaration | ConstructorDeclaration | VariableDeclaration) | StaticInitializer |
	//	{FieldDeclaration} ";";
	public FieldDeclarationElements getFieldDeclarationAccess() {
		return pFieldDeclaration;
	}
	
	public ParserRule getFieldDeclarationRule() {
		return getFieldDeclarationAccess().getRule();
	}

	//StaticInitializer:
	//	"static" StatementBlock;
	public StaticInitializerElements getStaticInitializerAccess() {
		return pStaticInitializer;
	}
	
	public ParserRule getStaticInitializerRule() {
		return getStaticInitializerAccess().getRule();
	}

	//MethodDeclaration:
	//	Modifier* Type ID "(" ParameterList? ")" ("[" "]")* (statement_block=StatementBlock | ";");
	public MethodDeclarationElements getMethodDeclarationAccess() {
		return pMethodDeclaration;
	}
	
	public ParserRule getMethodDeclarationRule() {
		return getMethodDeclarationAccess().getRule();
	}

	//ConstructorDeclaration:
	//	Modifier* ID "(" ParameterList? ")" statement_block=StatementBlock;
	public ConstructorDeclarationElements getConstructorDeclarationAccess() {
		return pConstructorDeclaration;
	}
	
	public ParserRule getConstructorDeclarationRule() {
		return getConstructorDeclarationAccess().getRule();
	}

	//ParameterList:
	//	Parameter ("," parameters+=Parameter)*;
	public ParameterListElements getParameterListAccess() {
		return pParameterList;
	}
	
	public ParserRule getParameterListRule() {
		return getParameterListAccess().getRule();
	}

	//Parameter:
	//	Type ID ("[" "]")*;
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}

	//StatementBlock:
	//	"{" {StatementBlock} statements+=Statement* "}";
	public StatementBlockElements getStatementBlockAccess() {
		return pStatementBlock;
	}
	
	public ParserRule getStatementBlockRule() {
		return getStatementBlockAccess().getRule();
	}

	//VariableDeclaration:
	//	Modifier* type=Type? variable_declarator=VariableDeclarator ("," variable_declarators+=VariableDeclarator)* ";";
	public VariableDeclarationElements getVariableDeclarationAccess() {
		return pVariableDeclaration;
	}
	
	public ParserRule getVariableDeclarationRule() {
		return getVariableDeclarationAccess().getRule();
	}

	//VariableDeclarator:
	//	{VariableDeclarator} ID ("[" "]")* ("=" variable_initializer=VariableInitializer)?;
	public VariableDeclaratorElements getVariableDeclaratorAccess() {
		return pVariableDeclarator;
	}
	
	public ParserRule getVariableDeclaratorRule() {
		return getVariableDeclaratorAccess().getRule();
	}

	//VariableInitializer:
	//	expr=Expression | "{" (variable_initializer=VariableInitializer ("," variable_initializers+=VariableInitializer)*
	//	","?)? "}";
	public VariableInitializerElements getVariableInitializerAccess() {
		return pVariableInitializer;
	}
	
	public ParserRule getVariableInitializerRule() {
		return getVariableInitializerAccess().getRule();
	}

	//Type:
	//	specifier=TypeSpecifier ("[" "]")*;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//Expression:
	//	NumericExpression;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//NumericExpression:
	//	("-" | "++" | "--") BitExpression | BitExpression (("++" | "--") | ({Numeric.left=current} ("+" | "+=" | "-" | "-=" |
	//	"*" | "*=" | "/" | "/=" | "%" | "%=") right=BitExpression)*);
	public NumericExpressionElements getNumericExpressionAccess() {
		return pNumericExpression;
	}
	
	public ParserRule getNumericExpressionRule() {
		return getNumericExpressionAccess().getRule();
	}

	//BitExpression:
	//	"~" LogicalExpression | LogicalExpression ({Bit.left=current} (">>=" | "<<" | ">>" | ">>>") right=LogicalExpression)*;
	public BitExpressionElements getBitExpressionAccess() {
		return pBitExpression;
	}
	
	public ParserRule getBitExpressionRule() {
		return getBitExpressionAccess().getRule();
	}

	//TestingExpression:
	//	ArgsExpression ({Testing.left=current} (">" | "<" | ">=" | "<=" | "==" | "!=") right=ArgsExpression)*;
	public TestingExpressionElements getTestingExpressionAccess() {
		return pTestingExpression;
	}
	
	public ParserRule getTestingExpressionRule() {
		return getTestingExpressionAccess().getRule();
	}

	//LogicalExpression:
	//	"!" right=TestingExpression | TestingExpression ({Logical.left=current} ("&" | "&=" | "|" | "|=" | "^" | "^=" | "&&" |
	//	"||=" | "||") right=TestingExpression | {Logical.left=current} "?" right=TestingExpression {Logical.ternary=current}
	//	":" ternary_end=TestingExpression)* | {LogicalExpression} "true" | {LogicalExpression} "false";
	public LogicalExpressionElements getLogicalExpressionAccess() {
		return pLogicalExpression;
	}
	
	public ParserRule getLogicalExpressionRule() {
		return getLogicalExpressionAccess().getRule();
	}

	//ArgsExpression:
	//	CastingExpression ("(" arg_list+=Arglist? ")" | {Args.left=current} "." right=CastingExpression | {Args.left=current}
	//	"[" right=CastingExpression "]" | {Args.left=current} "," right=CastingExpression | {Args.left=current} "instanceof"
	//	ObjectName)*;
	public ArgsExpressionElements getArgsExpressionAccess() {
		return pArgsExpression;
	}
	
	public ParserRule getArgsExpressionRule() {
		return getArgsExpressionAccess().getRule();
	}

	//Arglist:
	//	arg=CastingExpression ("," args+=CastingExpression)*;
	public ArglistElements getArglistAccess() {
		return pArglist;
	}
	
	public ParserRule getArglistRule() {
		return getArglistAccess().getRule();
	}

	//CastingExpression:
	//	CreatingExpression ({Casting.left=current} "(" types+=Type ")" right=CreatingExpression)*;
	public CastingExpressionElements getCastingExpressionAccess() {
		return pCastingExpression;
	}
	
	public ParserRule getCastingExpressionRule() {
		return getCastingExpressionAccess().getRule();
	}

	//CreatingExpression:
	//	ParenthesisExpression ("new" (ObjectName "(" arg_list+=Arglist? ")" | type_specifiers+=TypeSpecifier ("["
	//	parenthesis+=ParenthesisExpression "]")? ("[" "]")*))*;
	public CreatingExpressionElements getCreatingExpressionAccess() {
		return pCreatingExpression;
	}
	
	public ParserRule getCreatingExpressionRule() {
		return getCreatingExpressionAccess().getRule();
	}

	//ParenthesisExpression:
	//	PrimaryExpression ("(" parenthesis+=PrimaryExpression ")")*;
	public ParenthesisExpressionElements getParenthesisExpressionAccess() {
		return pParenthesisExpression;
	}
	
	public ParserRule getParenthesisExpressionRule() {
		return getParenthesisExpressionAccess().getRule();
	}

	//PrimaryExpression:
	//	{PrimaryExpression} (value=LiteralExpression | "null" | "super" | "this" | ID);
	public PrimaryExpressionElements getPrimaryExpressionAccess() {
		return pPrimaryExpression;
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}

	//LiteralExpression:
	//	literal_value=(IntegerLiteral | FloatLiteral | STRING | Character);
	public LiteralExpressionElements getLiteralExpressionAccess() {
		return pLiteralExpression;
	}
	
	public ParserRule getLiteralExpressionRule() {
		return getLiteralExpressionAccess().getRule();
	}

	//TypeSpecifier:
	//	name=("boolean" | "byte" | "char" | "short" | "int" | "float" | "long" | "double" | ObjectName);
	public TypeSpecifierElements getTypeSpecifierAccess() {
		return pTypeSpecifier;
	}
	
	public ParserRule getTypeSpecifierRule() {
		return getTypeSpecifierAccess().getRule();
	}

	//Modifier:
	//	"public" | "private" | "protected" | "static" | "final" | "native" | "synchronized" | "abstract" | "threadsafe" |
	//	"transient";
	public ModifierElements getModifierAccess() {
		return pModifier;
	}
	
	public ParserRule getModifierRule() {
		return getModifierAccess().getRule();
	}

	//Character:
	//	STRING;
	public CharacterElements getCharacterAccess() {
		return pCharacter;
	}
	
	public ParserRule getCharacterRule() {
		return getCharacterAccess().getRule();
	}

	//decimal_digits:
	//	INT INT*;
	public Decimal_digitsElements getDecimal_digitsAccess() {
		return pDecimal_digits;
	}
	
	public ParserRule getDecimal_digitsRule() {
		return getDecimal_digitsAccess().getRule();
	}

	//DoStatement:
	//	"do" statement=Statement "while" "(" expression=Expression ")" ";";
	public DoStatementElements getDoStatementAccess() {
		return pDoStatement;
	}
	
	public ParserRule getDoStatementRule() {
		return getDoStatementAccess().getRule();
	}

	//exponent_part:
	//	"0..9e";
	public Exponent_partElements getExponent_partAccess() {
		return pExponent_part;
	}
	
	public ParserRule getExponent_partRule() {
		return getExponent_partAccess().getRule();
	}

	//IntegerLiteral:
	//	decimal_integer_literal | hex_integer_literal | octal_integer_literal;
	public IntegerLiteralElements getIntegerLiteralAccess() {
		return pIntegerLiteral;
	}
	
	public ParserRule getIntegerLiteralRule() {
		return getIntegerLiteralAccess().getRule();
	}

	//decimal_integer_literal:
	//	decimal_digits NUMBER_SUFFIX?;
	public Decimal_integer_literalElements getDecimal_integer_literalAccess() {
		return pDecimal_integer_literal;
	}
	
	public ParserRule getDecimal_integer_literalRule() {
		return getDecimal_integer_literalAccess().getRule();
	}

	//hex_integer_literal:
	//	hexa_numeral NUMBER_SUFFIX?;
	public Hex_integer_literalElements getHex_integer_literalAccess() {
		return pHex_integer_literal;
	}
	
	public ParserRule getHex_integer_literalRule() {
		return getHex_integer_literalAccess().getRule();
	}

	//hexa_numeral:
	//	("0x" | "0X") HEXA | HEXA;
	public Hexa_numeralElements getHexa_numeralAccess() {
		return pHexa_numeral;
	}
	
	public ParserRule getHexa_numeralRule() {
		return getHexa_numeralAccess().getRule();
	}

	//octal_integer_literal:
	//	octal_numeral NUMBER_SUFFIX?;
	public Octal_integer_literalElements getOctal_integer_literalAccess() {
		return pOctal_integer_literal;
	}
	
	public ParserRule getOctal_integer_literalRule() {
		return getOctal_integer_literalAccess().getRule();
	}

	//octal_numeral:
	//	ZERO_TO_SEVEN*;
	public Octal_numeralElements getOctal_numeralAccess() {
		return pOctal_numeral;
	}
	
	public ParserRule getOctal_numeralRule() {
		return getOctal_numeralAccess().getRule();
	}

	//FloatLiteral:
	//	decimal_digits "."? decimal_digits? exponent_part? FLOAT_SUFFIX? | "." decimal_digits exponent_part? FLOAT_SUFFIX?;
	public FloatLiteralElements getFloatLiteralAccess() {
		return pFloatLiteral;
	}
	
	public ParserRule getFloatLiteralRule() {
		return getFloatLiteralAccess().getRule();
	}

	//ForStatement:
	//	"for" "(" (variable_declaration=VariableDeclaration | for_expression1=Expression ";" | ";")
	//	for_expression2=Expression? ";" for_expression3=Expression? ";" ")" statement=Statement;
	public ForStatementElements getForStatementAccess() {
		return pForStatement;
	}
	
	public ParserRule getForStatementRule() {
		return getForStatementAccess().getRule();
	}

	//IfStatement:
	//	"if" "(" expression=Expression ")" if_statement=Statement ("else" else_statement=Statement)?;
	public IfStatementElements getIfStatementAccess() {
		return pIfStatement;
	}
	
	public ParserRule getIfStatementRule() {
		return getIfStatementAccess().getRule();
	}

	//Statement:
	//	variable_declaration=VariableDeclaration | statement_expression=Expression ";" | statement_block=StatementBlock |
	//	if_statement=IfStatement | do_statement=DoStatement | while_statement=while_statement | for_statement=ForStatement |
	//	try_statement=TryStatement | swith_statement=SwitchStatement | {Statement} ("synchronized" "("
	//	sync_expression=Expression ")" sync_statement=Statement) | {Statement} ("return" return_expression=Expression? ";") |
	//	{Statement} ("throw" throw_expression=Expression ";") | {Statement} (ID ":" named_statement=Statement) | {Statement}
	//	("break" ID? ";") | {Statement} ("continue" ID? ";") | {Statement} ";";
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}

	//SwitchStatement:
	//	"switch" "(" switch_expression=Expression ")" "{" ("case" case_expressions+=Expression ":" | "default" ":" |
	//	statements+=Statement)* "}";
	public SwitchStatementElements getSwitchStatementAccess() {
		return pSwitchStatement;
	}
	
	public ParserRule getSwitchStatementRule() {
		return getSwitchStatementAccess().getRule();
	}

	//TryStatement:
	//	"try" try_statement=Statement ("catch" "(" paramenters+=Parameter ")" catch_statements+=Statement)* ("finally"
	//	finally_statement=Statement)?;
	public TryStatementElements getTryStatementAccess() {
		return pTryStatement;
	}
	
	public ParserRule getTryStatementRule() {
		return getTryStatementAccess().getRule();
	}

	//while_statement:
	//	"while" "(" expression=Expression ")" statement=Statement;
	public While_statementElements getWhile_statementAccess() {
		return pWhile_statement;
	}
	
	public ParserRule getWhile_statementRule() {
		return getWhile_statementAccess().getRule();
	}

	//terminal HEXA:
	//	"0..9a..f";
	public TerminalRule getHEXARule() {
		return tHEXA;
	} 

	//terminal FLOAT_SUFFIX:
	//	"0..9f" | "0..9d";
	public TerminalRule getFLOAT_SUFFIXRule() {
		return tFLOAT_SUFFIX;
	} 

	//terminal NUMBER_SUFFIX:
	//	"0..9L" | "0..9l";
	public TerminalRule getNUMBER_SUFFIXRule() {
		return tNUMBER_SUFFIX;
	} 

	//terminal ZERO_TO_SEVEN:
	//	"0..7";
	public TerminalRule getZERO_TO_SEVENRule() {
		return tZERO_TO_SEVEN;
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
