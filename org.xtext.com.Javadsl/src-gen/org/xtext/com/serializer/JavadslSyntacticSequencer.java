/*
 * generated by Xtext
 */
package org.xtext.com.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.xtext.com.services.JavadslGrammarAccess;

@SuppressWarnings("all")
public class JavadslSyntacticSequencer extends AbstractSyntacticSequencer {

	protected JavadslGrammarAccess grammarAccess;
	protected AbstractElementAlias match_ArgsExpression___LeftParenthesisKeyword_1_0_0_RightParenthesisKeyword_1_0_2__a;
	protected AbstractElementAlias match_ArgsExpression___RightParenthesisKeyword_1_0_2_LeftParenthesisKeyword_1_0_0__a;
	protected AbstractElementAlias match_ArgsExpression___RightParenthesisKeyword_1_0_2_LeftParenthesisKeyword_1_0_0__p;
	protected AbstractElementAlias match_BitExpression_GreaterThanSignGreaterThanSignEqualsSignKeyword_1_1_1_0_or_GreaterThanSignGreaterThanSignGreaterThanSignKeyword_1_1_1_3_or_GreaterThanSignGreaterThanSignKeyword_1_1_1_2_or_LessThanSignLessThanSignKeyword_1_1_1_1;
	protected AbstractElementAlias match_BitExpression_TildeKeyword_0_0_q;
	protected AbstractElementAlias match_ClassDeclaration___ExtendsKeyword_4_0_ObjectNameParserRuleCall_4_1__q;
	protected AbstractElementAlias match_ClassDeclaration___ImplementsKeyword_5_0_ObjectNameParserRuleCall_5_1___FullStopKeyword_5_2_0_ObjectNameParserRuleCall_5_2_1__a__q;
	protected AbstractElementAlias match_ConstructorDeclaration_ModifierParserRuleCall_0_a;
	protected AbstractElementAlias match_CreatingExpression___LeftSquareBracketKeyword_1_1_1_2_0_RightSquareBracketKeyword_1_1_1_2_1__a;
	protected AbstractElementAlias match_CreatingExpression___NewKeyword_1_0_ObjectNameParserRuleCall_1_1_0_0_LeftParenthesisKeyword_1_1_0_1_RightParenthesisKeyword_1_1_0_3__a;
	protected AbstractElementAlias match_CreatingExpression___ObjectNameParserRuleCall_1_1_0_0_LeftParenthesisKeyword_1_1_0_1_RightParenthesisKeyword_1_1_0_3_NewKeyword_1_0__a;
	protected AbstractElementAlias match_CreatingExpression___RightParenthesisKeyword_1_1_0_3_NewKeyword_1_0_ObjectNameParserRuleCall_1_1_0_0_LeftParenthesisKeyword_1_1_0_1__a;
	protected AbstractElementAlias match_CreatingExpression___RightParenthesisKeyword_1_1_0_3_NewKeyword_1_0_ObjectNameParserRuleCall_1_1_0_0_LeftParenthesisKeyword_1_1_0_1__p;
	protected AbstractElementAlias match_InterfaceDeclaration_ModifierParserRuleCall_1_a;
	protected AbstractElementAlias match_InterfaceDeclaration___ExtendsKeyword_4_0_ObjectNameParserRuleCall_4_1___FullStopKeyword_4_2_0_ObjectNameParserRuleCall_4_2_1__a__q;
	protected AbstractElementAlias match_LogicalExpression_AmpersandAmpersandKeyword_1_1_0_1_6_or_AmpersandEqualsSignKeyword_1_1_0_1_1_or_AmpersandKeyword_1_1_0_1_0_or_CircumflexAccentEqualsSignKeyword_1_1_0_1_5_or_CircumflexAccentKeyword_1_1_0_1_4_or_VerticalLineEqualsSignKeyword_1_1_0_1_3_or_VerticalLineKeyword_1_1_0_1_2_or_VerticalLineVerticalLineEqualsSignKeyword_1_1_0_1_7_or_VerticalLineVerticalLineKeyword_1_1_0_1_8;
	protected AbstractElementAlias match_LogicalExpression_FalseKeyword_3_1_or_TrueKeyword_2_1;
	protected AbstractElementAlias match_MethodDeclaration_ModifierParserRuleCall_0_a;
	protected AbstractElementAlias match_MethodDeclaration___LeftSquareBracketKeyword_6_0_RightSquareBracketKeyword_6_1__a;
	protected AbstractElementAlias match_NumericExpression_AsteriskEqualsSignKeyword_1_1_1_1_5_or_AsteriskKeyword_1_1_1_1_4_or_HyphenMinusEqualsSignKeyword_1_1_1_1_3_or_HyphenMinusKeyword_1_1_1_1_2_or_PercentSignEqualsSignKeyword_1_1_1_1_9_or_PercentSignKeyword_1_1_1_1_8_or_PlusSignEqualsSignKeyword_1_1_1_1_1_or_PlusSignKeyword_1_1_1_1_0_or_SolidusEqualsSignKeyword_1_1_1_1_7_or_SolidusKeyword_1_1_1_1_6;
	protected AbstractElementAlias match_NumericExpression_HyphenMinusHyphenMinusKeyword_0_0_2_q_or_HyphenMinusKeyword_0_0_0_q_or_PlusSignPlusSignKeyword_0_0_1_q;
	protected AbstractElementAlias match_NumericExpression_HyphenMinusHyphenMinusKeyword_1_1_0_1_q_or_PlusSignPlusSignKeyword_1_1_0_0_q;
	protected AbstractElementAlias match_NumericExpression___HyphenMinusHyphenMinusKeyword_0_0_2_or_HyphenMinusKeyword_0_0_0_or_PlusSignPlusSignKeyword_0_0_1__q;
	protected AbstractElementAlias match_NumericExpression___HyphenMinusHyphenMinusKeyword_1_1_0_1_or_PlusSignPlusSignKeyword_1_1_0_0__q;
	protected AbstractElementAlias match_ObjectName___FullStopKeyword_1_0_IDTerminalRuleCall_1_1__a;
	protected AbstractElementAlias match_Parameter___LeftSquareBracketKeyword_2_0_RightSquareBracketKeyword_2_1__a;
	protected AbstractElementAlias match_PrimaryExpression_IDTerminalRuleCall_1_4_or_NullKeyword_1_1_or_SuperKeyword_1_2_or_ThisKeyword_1_3;
	protected AbstractElementAlias match_Statement___BreakKeyword_13_1_0_IDTerminalRuleCall_13_1_1_q_SemicolonKeyword_13_1_2___or___ContinueKeyword_14_1_0_IDTerminalRuleCall_14_1_1_q_SemicolonKeyword_14_1_2___or___SemicolonKeyword_15_1_or___ReturnKeyword_10_1_0_SemicolonKeyword_10_1_2____;
	protected AbstractElementAlias match_SwitchStatement___DefaultKeyword_5_1_0_ColonKeyword_5_1_1__a;
	protected AbstractElementAlias match_TestingExpression_EqualsSignEqualsSignKeyword_1_1_4_or_ExclamationMarkEqualsSignKeyword_1_1_5_or_GreaterThanSignEqualsSignKeyword_1_1_2_or_GreaterThanSignKeyword_1_1_0_or_LessThanSignEqualsSignKeyword_1_1_3_or_LessThanSignKeyword_1_1_1;
	protected AbstractElementAlias match_Type___LeftSquareBracketKeyword_1_0_RightSquareBracketKeyword_1_1__a;
	protected AbstractElementAlias match_VariableDeclaration_ModifierParserRuleCall_0_a;
	protected AbstractElementAlias match_VariableDeclarator___LeftSquareBracketKeyword_2_0_RightSquareBracketKeyword_2_1__a;
	protected AbstractElementAlias match_VariableInitializer_CommaKeyword_1_1_2_q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (JavadslGrammarAccess) access;
		match_ArgsExpression___LeftParenthesisKeyword_1_0_0_RightParenthesisKeyword_1_0_2__a = new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getArgsExpressionAccess().getLeftParenthesisKeyword_1_0_0()), new TokenAlias(false, false, grammarAccess.getArgsExpressionAccess().getRightParenthesisKeyword_1_0_2()));
		match_ArgsExpression___RightParenthesisKeyword_1_0_2_LeftParenthesisKeyword_1_0_0__a = new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getArgsExpressionAccess().getRightParenthesisKeyword_1_0_2()), new TokenAlias(false, false, grammarAccess.getArgsExpressionAccess().getLeftParenthesisKeyword_1_0_0()));
		match_ArgsExpression___RightParenthesisKeyword_1_0_2_LeftParenthesisKeyword_1_0_0__p = new GroupAlias(true, false, new TokenAlias(false, false, grammarAccess.getArgsExpressionAccess().getRightParenthesisKeyword_1_0_2()), new TokenAlias(false, false, grammarAccess.getArgsExpressionAccess().getLeftParenthesisKeyword_1_0_0()));
		match_BitExpression_GreaterThanSignGreaterThanSignEqualsSignKeyword_1_1_1_0_or_GreaterThanSignGreaterThanSignGreaterThanSignKeyword_1_1_1_3_or_GreaterThanSignGreaterThanSignKeyword_1_1_1_2_or_LessThanSignLessThanSignKeyword_1_1_1_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getBitExpressionAccess().getGreaterThanSignGreaterThanSignEqualsSignKeyword_1_1_1_0()), new TokenAlias(false, false, grammarAccess.getBitExpressionAccess().getGreaterThanSignGreaterThanSignGreaterThanSignKeyword_1_1_1_3()), new TokenAlias(false, false, grammarAccess.getBitExpressionAccess().getGreaterThanSignGreaterThanSignKeyword_1_1_1_2()), new TokenAlias(false, false, grammarAccess.getBitExpressionAccess().getLessThanSignLessThanSignKeyword_1_1_1_1()));
		match_BitExpression_TildeKeyword_0_0_q = new TokenAlias(false, true, grammarAccess.getBitExpressionAccess().getTildeKeyword_0_0());
		match_ClassDeclaration___ExtendsKeyword_4_0_ObjectNameParserRuleCall_4_1__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getClassDeclarationAccess().getExtendsKeyword_4_0()), new TokenAlias(false, false, grammarAccess.getClassDeclarationAccess().getObjectNameParserRuleCall_4_1()));
		match_ClassDeclaration___ImplementsKeyword_5_0_ObjectNameParserRuleCall_5_1___FullStopKeyword_5_2_0_ObjectNameParserRuleCall_5_2_1__a__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getClassDeclarationAccess().getImplementsKeyword_5_0()), new TokenAlias(false, false, grammarAccess.getClassDeclarationAccess().getObjectNameParserRuleCall_5_1()), new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getClassDeclarationAccess().getFullStopKeyword_5_2_0()), new TokenAlias(false, false, grammarAccess.getClassDeclarationAccess().getObjectNameParserRuleCall_5_2_1())));
		match_ConstructorDeclaration_ModifierParserRuleCall_0_a = new TokenAlias(true, true, grammarAccess.getConstructorDeclarationAccess().getModifierParserRuleCall_0());
		match_CreatingExpression___LeftSquareBracketKeyword_1_1_1_2_0_RightSquareBracketKeyword_1_1_1_2_1__a = new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getCreatingExpressionAccess().getLeftSquareBracketKeyword_1_1_1_2_0()), new TokenAlias(false, false, grammarAccess.getCreatingExpressionAccess().getRightSquareBracketKeyword_1_1_1_2_1()));
		match_CreatingExpression___NewKeyword_1_0_ObjectNameParserRuleCall_1_1_0_0_LeftParenthesisKeyword_1_1_0_1_RightParenthesisKeyword_1_1_0_3__a = new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getCreatingExpressionAccess().getNewKeyword_1_0()), new TokenAlias(false, false, grammarAccess.getCreatingExpressionAccess().getObjectNameParserRuleCall_1_1_0_0()), new TokenAlias(false, false, grammarAccess.getCreatingExpressionAccess().getLeftParenthesisKeyword_1_1_0_1()), new TokenAlias(false, false, grammarAccess.getCreatingExpressionAccess().getRightParenthesisKeyword_1_1_0_3()));
		match_CreatingExpression___ObjectNameParserRuleCall_1_1_0_0_LeftParenthesisKeyword_1_1_0_1_RightParenthesisKeyword_1_1_0_3_NewKeyword_1_0__a = new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getCreatingExpressionAccess().getObjectNameParserRuleCall_1_1_0_0()), new TokenAlias(false, false, grammarAccess.getCreatingExpressionAccess().getLeftParenthesisKeyword_1_1_0_1()), new TokenAlias(false, false, grammarAccess.getCreatingExpressionAccess().getRightParenthesisKeyword_1_1_0_3()), new TokenAlias(false, false, grammarAccess.getCreatingExpressionAccess().getNewKeyword_1_0()));
		match_CreatingExpression___RightParenthesisKeyword_1_1_0_3_NewKeyword_1_0_ObjectNameParserRuleCall_1_1_0_0_LeftParenthesisKeyword_1_1_0_1__a = new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getCreatingExpressionAccess().getRightParenthesisKeyword_1_1_0_3()), new TokenAlias(false, false, grammarAccess.getCreatingExpressionAccess().getNewKeyword_1_0()), new TokenAlias(false, false, grammarAccess.getCreatingExpressionAccess().getObjectNameParserRuleCall_1_1_0_0()), new TokenAlias(false, false, grammarAccess.getCreatingExpressionAccess().getLeftParenthesisKeyword_1_1_0_1()));
		match_CreatingExpression___RightParenthesisKeyword_1_1_0_3_NewKeyword_1_0_ObjectNameParserRuleCall_1_1_0_0_LeftParenthesisKeyword_1_1_0_1__p = new GroupAlias(true, false, new TokenAlias(false, false, grammarAccess.getCreatingExpressionAccess().getRightParenthesisKeyword_1_1_0_3()), new TokenAlias(false, false, grammarAccess.getCreatingExpressionAccess().getNewKeyword_1_0()), new TokenAlias(false, false, grammarAccess.getCreatingExpressionAccess().getObjectNameParserRuleCall_1_1_0_0()), new TokenAlias(false, false, grammarAccess.getCreatingExpressionAccess().getLeftParenthesisKeyword_1_1_0_1()));
		match_InterfaceDeclaration_ModifierParserRuleCall_1_a = new TokenAlias(true, true, grammarAccess.getInterfaceDeclarationAccess().getModifierParserRuleCall_1());
		match_InterfaceDeclaration___ExtendsKeyword_4_0_ObjectNameParserRuleCall_4_1___FullStopKeyword_4_2_0_ObjectNameParserRuleCall_4_2_1__a__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getInterfaceDeclarationAccess().getExtendsKeyword_4_0()), new TokenAlias(false, false, grammarAccess.getInterfaceDeclarationAccess().getObjectNameParserRuleCall_4_1()), new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getInterfaceDeclarationAccess().getFullStopKeyword_4_2_0()), new TokenAlias(false, false, grammarAccess.getInterfaceDeclarationAccess().getObjectNameParserRuleCall_4_2_1())));
		match_LogicalExpression_AmpersandAmpersandKeyword_1_1_0_1_6_or_AmpersandEqualsSignKeyword_1_1_0_1_1_or_AmpersandKeyword_1_1_0_1_0_or_CircumflexAccentEqualsSignKeyword_1_1_0_1_5_or_CircumflexAccentKeyword_1_1_0_1_4_or_VerticalLineEqualsSignKeyword_1_1_0_1_3_or_VerticalLineKeyword_1_1_0_1_2_or_VerticalLineVerticalLineEqualsSignKeyword_1_1_0_1_7_or_VerticalLineVerticalLineKeyword_1_1_0_1_8 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getLogicalExpressionAccess().getAmpersandAmpersandKeyword_1_1_0_1_6()), new TokenAlias(false, false, grammarAccess.getLogicalExpressionAccess().getAmpersandEqualsSignKeyword_1_1_0_1_1()), new TokenAlias(false, false, grammarAccess.getLogicalExpressionAccess().getAmpersandKeyword_1_1_0_1_0()), new TokenAlias(false, false, grammarAccess.getLogicalExpressionAccess().getCircumflexAccentEqualsSignKeyword_1_1_0_1_5()), new TokenAlias(false, false, grammarAccess.getLogicalExpressionAccess().getCircumflexAccentKeyword_1_1_0_1_4()), new TokenAlias(false, false, grammarAccess.getLogicalExpressionAccess().getVerticalLineEqualsSignKeyword_1_1_0_1_3()), new TokenAlias(false, false, grammarAccess.getLogicalExpressionAccess().getVerticalLineKeyword_1_1_0_1_2()), new TokenAlias(false, false, grammarAccess.getLogicalExpressionAccess().getVerticalLineVerticalLineEqualsSignKeyword_1_1_0_1_7()), new TokenAlias(false, false, grammarAccess.getLogicalExpressionAccess().getVerticalLineVerticalLineKeyword_1_1_0_1_8()));
		match_LogicalExpression_FalseKeyword_3_1_or_TrueKeyword_2_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getLogicalExpressionAccess().getFalseKeyword_3_1()), new TokenAlias(false, false, grammarAccess.getLogicalExpressionAccess().getTrueKeyword_2_1()));
		match_MethodDeclaration_ModifierParserRuleCall_0_a = new TokenAlias(true, true, grammarAccess.getMethodDeclarationAccess().getModifierParserRuleCall_0());
		match_MethodDeclaration___LeftSquareBracketKeyword_6_0_RightSquareBracketKeyword_6_1__a = new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getMethodDeclarationAccess().getLeftSquareBracketKeyword_6_0()), new TokenAlias(false, false, grammarAccess.getMethodDeclarationAccess().getRightSquareBracketKeyword_6_1()));
		match_NumericExpression_AsteriskEqualsSignKeyword_1_1_1_1_5_or_AsteriskKeyword_1_1_1_1_4_or_HyphenMinusEqualsSignKeyword_1_1_1_1_3_or_HyphenMinusKeyword_1_1_1_1_2_or_PercentSignEqualsSignKeyword_1_1_1_1_9_or_PercentSignKeyword_1_1_1_1_8_or_PlusSignEqualsSignKeyword_1_1_1_1_1_or_PlusSignKeyword_1_1_1_1_0_or_SolidusEqualsSignKeyword_1_1_1_1_7_or_SolidusKeyword_1_1_1_1_6 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getNumericExpressionAccess().getAsteriskEqualsSignKeyword_1_1_1_1_5()), new TokenAlias(false, false, grammarAccess.getNumericExpressionAccess().getAsteriskKeyword_1_1_1_1_4()), new TokenAlias(false, false, grammarAccess.getNumericExpressionAccess().getHyphenMinusEqualsSignKeyword_1_1_1_1_3()), new TokenAlias(false, false, grammarAccess.getNumericExpressionAccess().getHyphenMinusKeyword_1_1_1_1_2()), new TokenAlias(false, false, grammarAccess.getNumericExpressionAccess().getPercentSignEqualsSignKeyword_1_1_1_1_9()), new TokenAlias(false, false, grammarAccess.getNumericExpressionAccess().getPercentSignKeyword_1_1_1_1_8()), new TokenAlias(false, false, grammarAccess.getNumericExpressionAccess().getPlusSignEqualsSignKeyword_1_1_1_1_1()), new TokenAlias(false, false, grammarAccess.getNumericExpressionAccess().getPlusSignKeyword_1_1_1_1_0()), new TokenAlias(false, false, grammarAccess.getNumericExpressionAccess().getSolidusEqualsSignKeyword_1_1_1_1_7()), new TokenAlias(false, false, grammarAccess.getNumericExpressionAccess().getSolidusKeyword_1_1_1_1_6()));
		match_NumericExpression_HyphenMinusHyphenMinusKeyword_0_0_2_q_or_HyphenMinusKeyword_0_0_0_q_or_PlusSignPlusSignKeyword_0_0_1_q = new AlternativeAlias(false, false, new TokenAlias(false, true, grammarAccess.getNumericExpressionAccess().getHyphenMinusHyphenMinusKeyword_0_0_2()), new TokenAlias(false, true, grammarAccess.getNumericExpressionAccess().getHyphenMinusKeyword_0_0_0()), new TokenAlias(false, true, grammarAccess.getNumericExpressionAccess().getPlusSignPlusSignKeyword_0_0_1()));
		match_NumericExpression_HyphenMinusHyphenMinusKeyword_1_1_0_1_q_or_PlusSignPlusSignKeyword_1_1_0_0_q = new AlternativeAlias(false, false, new TokenAlias(false, true, grammarAccess.getNumericExpressionAccess().getHyphenMinusHyphenMinusKeyword_1_1_0_1()), new TokenAlias(false, true, grammarAccess.getNumericExpressionAccess().getPlusSignPlusSignKeyword_1_1_0_0()));
		match_NumericExpression___HyphenMinusHyphenMinusKeyword_0_0_2_or_HyphenMinusKeyword_0_0_0_or_PlusSignPlusSignKeyword_0_0_1__q = new AlternativeAlias(false, true, new TokenAlias(false, false, grammarAccess.getNumericExpressionAccess().getHyphenMinusHyphenMinusKeyword_0_0_2()), new TokenAlias(false, false, grammarAccess.getNumericExpressionAccess().getHyphenMinusKeyword_0_0_0()), new TokenAlias(false, false, grammarAccess.getNumericExpressionAccess().getPlusSignPlusSignKeyword_0_0_1()));
		match_NumericExpression___HyphenMinusHyphenMinusKeyword_1_1_0_1_or_PlusSignPlusSignKeyword_1_1_0_0__q = new AlternativeAlias(false, true, new TokenAlias(false, false, grammarAccess.getNumericExpressionAccess().getHyphenMinusHyphenMinusKeyword_1_1_0_1()), new TokenAlias(false, false, grammarAccess.getNumericExpressionAccess().getPlusSignPlusSignKeyword_1_1_0_0()));
		match_ObjectName___FullStopKeyword_1_0_IDTerminalRuleCall_1_1__a = new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getObjectNameAccess().getFullStopKeyword_1_0()), new TokenAlias(false, false, grammarAccess.getObjectNameAccess().getIDTerminalRuleCall_1_1()));
		match_Parameter___LeftSquareBracketKeyword_2_0_RightSquareBracketKeyword_2_1__a = new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getParameterAccess().getLeftSquareBracketKeyword_2_0()), new TokenAlias(false, false, grammarAccess.getParameterAccess().getRightSquareBracketKeyword_2_1()));
		match_PrimaryExpression_IDTerminalRuleCall_1_4_or_NullKeyword_1_1_or_SuperKeyword_1_2_or_ThisKeyword_1_3 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getPrimaryExpressionAccess().getIDTerminalRuleCall_1_4()), new TokenAlias(false, false, grammarAccess.getPrimaryExpressionAccess().getNullKeyword_1_1()), new TokenAlias(false, false, grammarAccess.getPrimaryExpressionAccess().getSuperKeyword_1_2()), new TokenAlias(false, false, grammarAccess.getPrimaryExpressionAccess().getThisKeyword_1_3()));
		match_Statement___BreakKeyword_13_1_0_IDTerminalRuleCall_13_1_1_q_SemicolonKeyword_13_1_2___or___ContinueKeyword_14_1_0_IDTerminalRuleCall_14_1_1_q_SemicolonKeyword_14_1_2___or___SemicolonKeyword_15_1_or___ReturnKeyword_10_1_0_SemicolonKeyword_10_1_2____ = new AlternativeAlias(false, false, new AlternativeAlias(false, false, new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getStatementAccess().getReturnKeyword_10_1_0()), new TokenAlias(false, false, grammarAccess.getStatementAccess().getSemicolonKeyword_10_1_2())), new TokenAlias(false, false, grammarAccess.getStatementAccess().getSemicolonKeyword_15_1())), new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getStatementAccess().getBreakKeyword_13_1_0()), new TokenAlias(false, true, grammarAccess.getStatementAccess().getIDTerminalRuleCall_13_1_1()), new TokenAlias(false, false, grammarAccess.getStatementAccess().getSemicolonKeyword_13_1_2())), new GroupAlias(false, false, new TokenAlias(false, false, grammarAccess.getStatementAccess().getContinueKeyword_14_1_0()), new TokenAlias(false, true, grammarAccess.getStatementAccess().getIDTerminalRuleCall_14_1_1()), new TokenAlias(false, false, grammarAccess.getStatementAccess().getSemicolonKeyword_14_1_2())));
		match_SwitchStatement___DefaultKeyword_5_1_0_ColonKeyword_5_1_1__a = new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getSwitchStatementAccess().getDefaultKeyword_5_1_0()), new TokenAlias(false, false, grammarAccess.getSwitchStatementAccess().getColonKeyword_5_1_1()));
		match_TestingExpression_EqualsSignEqualsSignKeyword_1_1_4_or_ExclamationMarkEqualsSignKeyword_1_1_5_or_GreaterThanSignEqualsSignKeyword_1_1_2_or_GreaterThanSignKeyword_1_1_0_or_LessThanSignEqualsSignKeyword_1_1_3_or_LessThanSignKeyword_1_1_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getTestingExpressionAccess().getEqualsSignEqualsSignKeyword_1_1_4()), new TokenAlias(false, false, grammarAccess.getTestingExpressionAccess().getExclamationMarkEqualsSignKeyword_1_1_5()), new TokenAlias(false, false, grammarAccess.getTestingExpressionAccess().getGreaterThanSignEqualsSignKeyword_1_1_2()), new TokenAlias(false, false, grammarAccess.getTestingExpressionAccess().getGreaterThanSignKeyword_1_1_0()), new TokenAlias(false, false, grammarAccess.getTestingExpressionAccess().getLessThanSignEqualsSignKeyword_1_1_3()), new TokenAlias(false, false, grammarAccess.getTestingExpressionAccess().getLessThanSignKeyword_1_1_1()));
		match_Type___LeftSquareBracketKeyword_1_0_RightSquareBracketKeyword_1_1__a = new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getTypeAccess().getLeftSquareBracketKeyword_1_0()), new TokenAlias(false, false, grammarAccess.getTypeAccess().getRightSquareBracketKeyword_1_1()));
		match_VariableDeclaration_ModifierParserRuleCall_0_a = new TokenAlias(true, true, grammarAccess.getVariableDeclarationAccess().getModifierParserRuleCall_0());
		match_VariableDeclarator___LeftSquareBracketKeyword_2_0_RightSquareBracketKeyword_2_1__a = new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getVariableDeclaratorAccess().getLeftSquareBracketKeyword_2_0()), new TokenAlias(false, false, grammarAccess.getVariableDeclaratorAccess().getRightSquareBracketKeyword_2_1()));
		match_VariableInitializer_CommaKeyword_1_1_2_q = new TokenAlias(false, true, grammarAccess.getVariableInitializerAccess().getCommaKeyword_1_1_2());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if(ruleCall.getRule() == grammarAccess.getIDRule())
			return getIDToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getModifierRule())
			return getModifierToken(semanticObject, ruleCall, node);
		else if(ruleCall.getRule() == grammarAccess.getObjectNameRule())
			return getObjectNameToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * terminal ID  		: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	 */
	protected String getIDToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	/**
	 * Modifier:
	 * 	"public" 
	 * 	| "private" 
	 * 	| "protected" 
	 * 	| "static" 
	 * 	| "final" 
	 * 	| "native" 
	 * 	| "synchronized" 
	 * 	| "abstract" 
	 * 	| "threadsafe" 
	 * 	| "transient" 
	 * ;
	 */
	protected String getModifierToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "public";
	}
	
	/**
	 * ObjectName:
	 * 	ID ('.' ID)*
	 * ;
	 */
	protected String getObjectNameToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if(match_ArgsExpression___LeftParenthesisKeyword_1_0_0_RightParenthesisKeyword_1_0_2__a.equals(syntax))
				emit_ArgsExpression___LeftParenthesisKeyword_1_0_0_RightParenthesisKeyword_1_0_2__a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_ArgsExpression___RightParenthesisKeyword_1_0_2_LeftParenthesisKeyword_1_0_0__a.equals(syntax))
				emit_ArgsExpression___RightParenthesisKeyword_1_0_2_LeftParenthesisKeyword_1_0_0__a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_ArgsExpression___RightParenthesisKeyword_1_0_2_LeftParenthesisKeyword_1_0_0__p.equals(syntax))
				emit_ArgsExpression___RightParenthesisKeyword_1_0_2_LeftParenthesisKeyword_1_0_0__p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_BitExpression_GreaterThanSignGreaterThanSignEqualsSignKeyword_1_1_1_0_or_GreaterThanSignGreaterThanSignGreaterThanSignKeyword_1_1_1_3_or_GreaterThanSignGreaterThanSignKeyword_1_1_1_2_or_LessThanSignLessThanSignKeyword_1_1_1_1.equals(syntax))
				emit_BitExpression_GreaterThanSignGreaterThanSignEqualsSignKeyword_1_1_1_0_or_GreaterThanSignGreaterThanSignGreaterThanSignKeyword_1_1_1_3_or_GreaterThanSignGreaterThanSignKeyword_1_1_1_2_or_LessThanSignLessThanSignKeyword_1_1_1_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_BitExpression_TildeKeyword_0_0_q.equals(syntax))
				emit_BitExpression_TildeKeyword_0_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_ClassDeclaration___ExtendsKeyword_4_0_ObjectNameParserRuleCall_4_1__q.equals(syntax))
				emit_ClassDeclaration___ExtendsKeyword_4_0_ObjectNameParserRuleCall_4_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_ClassDeclaration___ImplementsKeyword_5_0_ObjectNameParserRuleCall_5_1___FullStopKeyword_5_2_0_ObjectNameParserRuleCall_5_2_1__a__q.equals(syntax))
				emit_ClassDeclaration___ImplementsKeyword_5_0_ObjectNameParserRuleCall_5_1___FullStopKeyword_5_2_0_ObjectNameParserRuleCall_5_2_1__a__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_ConstructorDeclaration_ModifierParserRuleCall_0_a.equals(syntax))
				emit_ConstructorDeclaration_ModifierParserRuleCall_0_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_CreatingExpression___LeftSquareBracketKeyword_1_1_1_2_0_RightSquareBracketKeyword_1_1_1_2_1__a.equals(syntax))
				emit_CreatingExpression___LeftSquareBracketKeyword_1_1_1_2_0_RightSquareBracketKeyword_1_1_1_2_1__a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_CreatingExpression___NewKeyword_1_0_ObjectNameParserRuleCall_1_1_0_0_LeftParenthesisKeyword_1_1_0_1_RightParenthesisKeyword_1_1_0_3__a.equals(syntax))
				emit_CreatingExpression___NewKeyword_1_0_ObjectNameParserRuleCall_1_1_0_0_LeftParenthesisKeyword_1_1_0_1_RightParenthesisKeyword_1_1_0_3__a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_CreatingExpression___ObjectNameParserRuleCall_1_1_0_0_LeftParenthesisKeyword_1_1_0_1_RightParenthesisKeyword_1_1_0_3_NewKeyword_1_0__a.equals(syntax))
				emit_CreatingExpression___ObjectNameParserRuleCall_1_1_0_0_LeftParenthesisKeyword_1_1_0_1_RightParenthesisKeyword_1_1_0_3_NewKeyword_1_0__a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_CreatingExpression___RightParenthesisKeyword_1_1_0_3_NewKeyword_1_0_ObjectNameParserRuleCall_1_1_0_0_LeftParenthesisKeyword_1_1_0_1__a.equals(syntax))
				emit_CreatingExpression___RightParenthesisKeyword_1_1_0_3_NewKeyword_1_0_ObjectNameParserRuleCall_1_1_0_0_LeftParenthesisKeyword_1_1_0_1__a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_CreatingExpression___RightParenthesisKeyword_1_1_0_3_NewKeyword_1_0_ObjectNameParserRuleCall_1_1_0_0_LeftParenthesisKeyword_1_1_0_1__p.equals(syntax))
				emit_CreatingExpression___RightParenthesisKeyword_1_1_0_3_NewKeyword_1_0_ObjectNameParserRuleCall_1_1_0_0_LeftParenthesisKeyword_1_1_0_1__p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_InterfaceDeclaration_ModifierParserRuleCall_1_a.equals(syntax))
				emit_InterfaceDeclaration_ModifierParserRuleCall_1_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_InterfaceDeclaration___ExtendsKeyword_4_0_ObjectNameParserRuleCall_4_1___FullStopKeyword_4_2_0_ObjectNameParserRuleCall_4_2_1__a__q.equals(syntax))
				emit_InterfaceDeclaration___ExtendsKeyword_4_0_ObjectNameParserRuleCall_4_1___FullStopKeyword_4_2_0_ObjectNameParserRuleCall_4_2_1__a__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_LogicalExpression_AmpersandAmpersandKeyword_1_1_0_1_6_or_AmpersandEqualsSignKeyword_1_1_0_1_1_or_AmpersandKeyword_1_1_0_1_0_or_CircumflexAccentEqualsSignKeyword_1_1_0_1_5_or_CircumflexAccentKeyword_1_1_0_1_4_or_VerticalLineEqualsSignKeyword_1_1_0_1_3_or_VerticalLineKeyword_1_1_0_1_2_or_VerticalLineVerticalLineEqualsSignKeyword_1_1_0_1_7_or_VerticalLineVerticalLineKeyword_1_1_0_1_8.equals(syntax))
				emit_LogicalExpression_AmpersandAmpersandKeyword_1_1_0_1_6_or_AmpersandEqualsSignKeyword_1_1_0_1_1_or_AmpersandKeyword_1_1_0_1_0_or_CircumflexAccentEqualsSignKeyword_1_1_0_1_5_or_CircumflexAccentKeyword_1_1_0_1_4_or_VerticalLineEqualsSignKeyword_1_1_0_1_3_or_VerticalLineKeyword_1_1_0_1_2_or_VerticalLineVerticalLineEqualsSignKeyword_1_1_0_1_7_or_VerticalLineVerticalLineKeyword_1_1_0_1_8(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_LogicalExpression_FalseKeyword_3_1_or_TrueKeyword_2_1.equals(syntax))
				emit_LogicalExpression_FalseKeyword_3_1_or_TrueKeyword_2_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_MethodDeclaration_ModifierParserRuleCall_0_a.equals(syntax))
				emit_MethodDeclaration_ModifierParserRuleCall_0_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_MethodDeclaration___LeftSquareBracketKeyword_6_0_RightSquareBracketKeyword_6_1__a.equals(syntax))
				emit_MethodDeclaration___LeftSquareBracketKeyword_6_0_RightSquareBracketKeyword_6_1__a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_NumericExpression_AsteriskEqualsSignKeyword_1_1_1_1_5_or_AsteriskKeyword_1_1_1_1_4_or_HyphenMinusEqualsSignKeyword_1_1_1_1_3_or_HyphenMinusKeyword_1_1_1_1_2_or_PercentSignEqualsSignKeyword_1_1_1_1_9_or_PercentSignKeyword_1_1_1_1_8_or_PlusSignEqualsSignKeyword_1_1_1_1_1_or_PlusSignKeyword_1_1_1_1_0_or_SolidusEqualsSignKeyword_1_1_1_1_7_or_SolidusKeyword_1_1_1_1_6.equals(syntax))
				emit_NumericExpression_AsteriskEqualsSignKeyword_1_1_1_1_5_or_AsteriskKeyword_1_1_1_1_4_or_HyphenMinusEqualsSignKeyword_1_1_1_1_3_or_HyphenMinusKeyword_1_1_1_1_2_or_PercentSignEqualsSignKeyword_1_1_1_1_9_or_PercentSignKeyword_1_1_1_1_8_or_PlusSignEqualsSignKeyword_1_1_1_1_1_or_PlusSignKeyword_1_1_1_1_0_or_SolidusEqualsSignKeyword_1_1_1_1_7_or_SolidusKeyword_1_1_1_1_6(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_NumericExpression_HyphenMinusHyphenMinusKeyword_0_0_2_q_or_HyphenMinusKeyword_0_0_0_q_or_PlusSignPlusSignKeyword_0_0_1_q.equals(syntax))
				emit_NumericExpression_HyphenMinusHyphenMinusKeyword_0_0_2_q_or_HyphenMinusKeyword_0_0_0_q_or_PlusSignPlusSignKeyword_0_0_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_NumericExpression_HyphenMinusHyphenMinusKeyword_1_1_0_1_q_or_PlusSignPlusSignKeyword_1_1_0_0_q.equals(syntax))
				emit_NumericExpression_HyphenMinusHyphenMinusKeyword_1_1_0_1_q_or_PlusSignPlusSignKeyword_1_1_0_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_NumericExpression___HyphenMinusHyphenMinusKeyword_0_0_2_or_HyphenMinusKeyword_0_0_0_or_PlusSignPlusSignKeyword_0_0_1__q.equals(syntax))
				emit_NumericExpression___HyphenMinusHyphenMinusKeyword_0_0_2_or_HyphenMinusKeyword_0_0_0_or_PlusSignPlusSignKeyword_0_0_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_NumericExpression___HyphenMinusHyphenMinusKeyword_1_1_0_1_or_PlusSignPlusSignKeyword_1_1_0_0__q.equals(syntax))
				emit_NumericExpression___HyphenMinusHyphenMinusKeyword_1_1_0_1_or_PlusSignPlusSignKeyword_1_1_0_0__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_ObjectName___FullStopKeyword_1_0_IDTerminalRuleCall_1_1__a.equals(syntax))
				emit_ObjectName___FullStopKeyword_1_0_IDTerminalRuleCall_1_1__a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_Parameter___LeftSquareBracketKeyword_2_0_RightSquareBracketKeyword_2_1__a.equals(syntax))
				emit_Parameter___LeftSquareBracketKeyword_2_0_RightSquareBracketKeyword_2_1__a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_PrimaryExpression_IDTerminalRuleCall_1_4_or_NullKeyword_1_1_or_SuperKeyword_1_2_or_ThisKeyword_1_3.equals(syntax))
				emit_PrimaryExpression_IDTerminalRuleCall_1_4_or_NullKeyword_1_1_or_SuperKeyword_1_2_or_ThisKeyword_1_3(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_Statement___BreakKeyword_13_1_0_IDTerminalRuleCall_13_1_1_q_SemicolonKeyword_13_1_2___or___ContinueKeyword_14_1_0_IDTerminalRuleCall_14_1_1_q_SemicolonKeyword_14_1_2___or___SemicolonKeyword_15_1_or___ReturnKeyword_10_1_0_SemicolonKeyword_10_1_2____.equals(syntax))
				emit_Statement___BreakKeyword_13_1_0_IDTerminalRuleCall_13_1_1_q_SemicolonKeyword_13_1_2___or___ContinueKeyword_14_1_0_IDTerminalRuleCall_14_1_1_q_SemicolonKeyword_14_1_2___or___SemicolonKeyword_15_1_or___ReturnKeyword_10_1_0_SemicolonKeyword_10_1_2____(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_SwitchStatement___DefaultKeyword_5_1_0_ColonKeyword_5_1_1__a.equals(syntax))
				emit_SwitchStatement___DefaultKeyword_5_1_0_ColonKeyword_5_1_1__a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_TestingExpression_EqualsSignEqualsSignKeyword_1_1_4_or_ExclamationMarkEqualsSignKeyword_1_1_5_or_GreaterThanSignEqualsSignKeyword_1_1_2_or_GreaterThanSignKeyword_1_1_0_or_LessThanSignEqualsSignKeyword_1_1_3_or_LessThanSignKeyword_1_1_1.equals(syntax))
				emit_TestingExpression_EqualsSignEqualsSignKeyword_1_1_4_or_ExclamationMarkEqualsSignKeyword_1_1_5_or_GreaterThanSignEqualsSignKeyword_1_1_2_or_GreaterThanSignKeyword_1_1_0_or_LessThanSignEqualsSignKeyword_1_1_3_or_LessThanSignKeyword_1_1_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_Type___LeftSquareBracketKeyword_1_0_RightSquareBracketKeyword_1_1__a.equals(syntax))
				emit_Type___LeftSquareBracketKeyword_1_0_RightSquareBracketKeyword_1_1__a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_VariableDeclaration_ModifierParserRuleCall_0_a.equals(syntax))
				emit_VariableDeclaration_ModifierParserRuleCall_0_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_VariableDeclarator___LeftSquareBracketKeyword_2_0_RightSquareBracketKeyword_2_1__a.equals(syntax))
				emit_VariableDeclarator___LeftSquareBracketKeyword_2_0_RightSquareBracketKeyword_2_1__a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_VariableInitializer_CommaKeyword_1_1_2_q.equals(syntax))
				emit_VariableInitializer_CommaKeyword_1_1_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     ('(' ')')*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) '~'? ('null' | 'super' | 'this' | ID) ('new' ObjectName '(' ')')* (ambiguity) (rule start)
	 *     (rule start) ('-'? | '++'? | '--'?) '~'? ('null' | 'super' | 'this' | ID) ('new' ObjectName '(' ')')* (ambiguity) ('++'? | '--'?) (rule start)
	 *     (rule start) ('null' | 'super' | 'this' | ID) ('new' ObjectName '(' ')')* (ambiguity) (rule start)
	 *     arg_list+=Arglist ')' ('new' ObjectName '(' ')')* (ambiguity) ('++' | '--')? (rule end)
	 *     arg_list+=Arglist ')' ('new' ObjectName '(' ')')* (ambiguity) (rule end)
	 *     arg_list+=Arglist ')' (ambiguity) ('++' | '--')? (rule end)
	 *     arg_list+=Arglist ')' (ambiguity) (rule end)
	 *     parenthesis+=ParenthesisExpression ']' ('[' ']')* ('new' ObjectName '(' ')')* (ambiguity) ('++' | '--')? (rule end)
	 *     parenthesis+=ParenthesisExpression ']' ('[' ']')* ('new' ObjectName '(' ')')* (ambiguity) (rule end)
	 *     parenthesis+=PrimaryExpression ')' ('new' ObjectName '(' ')')* (ambiguity) ('++' | '--')? (rule end)
	 *     parenthesis+=PrimaryExpression ')' ('new' ObjectName '(' ')')* (ambiguity) (rule end)
	 *     right=CastingExpression ']' (ambiguity) ('++' | '--')? (rule end)
	 *     right=CastingExpression ']' (ambiguity) (rule end)
	 *     right=CastingExpression (ambiguity) ('++' | '--')? (rule end)
	 *     right=CastingExpression (ambiguity) (rule end)
	 *     right=CreatingExpression (ambiguity) ('++' | '--')? (rule end)
	 *     right=CreatingExpression (ambiguity) (rule end)
	 *     type_specifiers+=TypeSpecifier ('[' ']')* ('new' ObjectName '(' ')')* (ambiguity) ('++' | '--')? (rule end)
	 *     type_specifiers+=TypeSpecifier ('[' ']')* ('new' ObjectName '(' ')')* (ambiguity) (rule end)
	 *     value=LiteralExpression ('new' ObjectName '(' ')')* (ambiguity) ('++' | '--')? (rule end)
	 *     value=LiteralExpression ('new' ObjectName '(' ')')* (ambiguity) (rule end)
	 *     {Args.left=} 'instanceof' ObjectName (ambiguity) ('++' | '--')? (rule end)
	 *     {Args.left=} 'instanceof' ObjectName (ambiguity) (rule end)
	 *     {Args.left=} 'instanceof' ObjectName ID ('.' ID)* ObjectName (ambiguity) (rule end)
	 */
	protected void emit_ArgsExpression___LeftParenthesisKeyword_1_0_0_RightParenthesisKeyword_1_0_2__a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     (')' '(')*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) '~'? ('null' | 'super' | 'this' | ID) ('new' ObjectName '(' ')')* '(' (ambiguity) arg_list+=Arglist
	 *     (rule start) ('-'? | '++'? | '--'?) '~'? ('null' | 'super' | 'this' | ID) ('new' ObjectName '(' ')')* '(' (ambiguity) arg_list+=Arglist
	 *     (rule start) ('null' | 'super' | 'this' | ID) ('new' ObjectName '(' ')')* '(' (ambiguity) arg_list+=Arglist
	 *     arg_list+=Arglist ')' ('new' ObjectName '(' ')')* '(' (ambiguity) arg_list+=Arglist
	 *     parenthesis+=ParenthesisExpression ']' ('[' ']')* ('new' ObjectName '(' ')')* '(' (ambiguity) arg_list+=Arglist
	 *     parenthesis+=PrimaryExpression ')' ('new' ObjectName '(' ')')* '(' (ambiguity) arg_list+=Arglist
	 *     right=CastingExpression '(' (ambiguity) arg_list+=Arglist
	 *     right=CastingExpression ']' '(' (ambiguity) arg_list+=Arglist
	 *     right=CreatingExpression '(' (ambiguity) arg_list+=Arglist
	 *     type_specifiers+=TypeSpecifier ('[' ']')* ('new' ObjectName '(' ')')* '(' (ambiguity) arg_list+=Arglist
	 *     value=LiteralExpression ('new' ObjectName '(' ')')* '(' (ambiguity) arg_list+=Arglist
	 *     {Args.left=} 'instanceof' ObjectName '(' (ambiguity) arg_list+=Arglist
	 *     {Args.left=} 'instanceof' ObjectName ID ('.' ID)* ObjectName '(' (ambiguity) arg_list+=Arglist
	 */
	protected void emit_ArgsExpression___RightParenthesisKeyword_1_0_2_LeftParenthesisKeyword_1_0_0__a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     (')' '(')+
	 *
	 * This ambiguous syntax occurs at:
	 *     arg_list+=Arglist (ambiguity) arg_list+=Arglist
	 */
	protected void emit_ArgsExpression___RightParenthesisKeyword_1_0_2_LeftParenthesisKeyword_1_0_0__p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '>>=' | '<<' | '>>' | '>>>'
	 *
	 * This ambiguous syntax occurs at:
	 *     {Bit.left=} (ambiguity) right=LogicalExpression
	 */
	protected void emit_BitExpression_GreaterThanSignGreaterThanSignEqualsSignKeyword_1_1_1_0_or_GreaterThanSignGreaterThanSignGreaterThanSignKeyword_1_1_1_3_or_GreaterThanSignGreaterThanSignKeyword_1_1_1_2_or_LessThanSignLessThanSignKeyword_1_1_1_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '~'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) ('-' | '++' | '--')? (ambiguity) '!' right=TestingExpression
	 *     (rule start) ('-' | '++' | '--')? (ambiguity) value=LiteralExpression
	 *     (rule start) ('-' | '++' | '--')? (ambiguity) {Args.left=}
	 *     (rule start) ('-' | '++' | '--')? (ambiguity) {Casting.left=}
	 *     (rule start) ('-' | '++' | '--')? (ambiguity) {Logical.left=}
	 *     (rule start) ('-' | '++' | '--')? (ambiguity) {Logical.ternary=}
	 *     (rule start) ('-' | '++' | '--')? (ambiguity) {Testing.left=}
	 *     (rule start) ('-'? | '++'? | '--'?) (ambiguity) ('null' | 'super' | 'this' | ID) '(' parenthesis+=PrimaryExpression
	 *     (rule start) ('-'? | '++'? | '--'?) (ambiguity) ('null' | 'super' | 'this' | ID) 'new' (ObjectName '(' ')' 'new')* type_specifiers+=TypeSpecifier
	 *     (rule start) ('-'? | '++'? | '--'?) (ambiguity) ('null' | 'super' | 'this' | ID) 'new' ObjectName '(' (')' 'new' ObjectName '(')* arg_list+=Arglist
	 *     (rule start) ('-'? | '++'? | '--'?) (ambiguity) ('null' | 'super' | 'this' | ID) ('new' ObjectName '(' ')')* '(' (')' '(')* arg_list+=Arglist
	 *     (rule start) ('-'? | '++'? | '--'?) (ambiguity) ('null' | 'super' | 'this' | ID) ('new' ObjectName '(' ')')* ('(' ')')* ('++'? | '--'?) (rule start)
	 *     (rule start) ('-'? | '++'? | '--'?) (ambiguity) ('true' | 'false') ('++'? | '--'?) (rule start)
	 *     (rule start) (ambiguity) '!' right=TestingExpression
	 *     (rule start) (ambiguity) ('null' | 'super' | 'this' | ID) '(' parenthesis+=PrimaryExpression
	 *     (rule start) (ambiguity) ('null' | 'super' | 'this' | ID) 'new' (ObjectName '(' ')' 'new')* type_specifiers+=TypeSpecifier
	 *     (rule start) (ambiguity) ('null' | 'super' | 'this' | ID) 'new' ObjectName '(' (')' 'new' ObjectName '(')* arg_list+=Arglist
	 *     (rule start) (ambiguity) ('null' | 'super' | 'this' | ID) ('new' ObjectName '(' ')')* '(' (')' '(')* arg_list+=Arglist
	 *     (rule start) (ambiguity) ('null' | 'super' | 'this' | ID) ('new' ObjectName '(' ')')* ('(' ')')* (rule start)
	 *     (rule start) (ambiguity) ('true' | 'false') (rule start)
	 *     (rule start) (ambiguity) value=LiteralExpression
	 *     (rule start) (ambiguity) {Args.left=}
	 *     (rule start) (ambiguity) {Casting.left=}
	 *     (rule start) (ambiguity) {Logical.left=}
	 *     (rule start) (ambiguity) {Logical.ternary=}
	 *     (rule start) (ambiguity) {Testing.left=}
	 */
	protected void emit_BitExpression_TildeKeyword_0_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('extends' ObjectName)?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'class' ID (ambiguity) ('implements' ObjectName ('.' ObjectName)*)? '{' '}' (rule start)
	 *     (rule start) 'class' ID (ambiguity) ('implements' ObjectName ('.' ObjectName)*)? '{' field_declarations+=FieldDeclaration
	 *     modifiers+=Modifier 'class' ID (ambiguity) ('implements' ObjectName ('.' ObjectName)*)? '{' '}' (rule end)
	 *     modifiers+=Modifier 'class' ID (ambiguity) ('implements' ObjectName ('.' ObjectName)*)? '{' field_declarations+=FieldDeclaration
	 */
	protected void emit_ClassDeclaration___ExtendsKeyword_4_0_ObjectNameParserRuleCall_4_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('implements' ObjectName ('.' ObjectName)*)?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'class' ID ('extends' ObjectName)? (ambiguity) '{' '}' (rule start)
	 *     (rule start) 'class' ID ('extends' ObjectName)? (ambiguity) '{' field_declarations+=FieldDeclaration
	 *     modifiers+=Modifier 'class' ID ('extends' ObjectName)? (ambiguity) '{' '}' (rule end)
	 *     modifiers+=Modifier 'class' ID ('extends' ObjectName)? (ambiguity) '{' field_declarations+=FieldDeclaration
	 */
	protected void emit_ClassDeclaration___ImplementsKeyword_5_0_ObjectNameParserRuleCall_5_1___FullStopKeyword_5_2_0_ObjectNameParserRuleCall_5_2_1__a__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     Modifier*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) ID '(' ')' statement_block=StatementBlock
	 *     (rule start) (ambiguity) ID '(' specifier=TypeSpecifier
	 */
	protected void emit_ConstructorDeclaration_ModifierParserRuleCall_0_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('[' ']')*
	 *
	 * This ambiguous syntax occurs at:
	 *     parenthesis+=ParenthesisExpression ']' (ambiguity) 'new' (ObjectName '(' ')' 'new')* type_specifiers+=TypeSpecifier
	 *     parenthesis+=ParenthesisExpression ']' (ambiguity) 'new' ObjectName '(' (')' 'new' ObjectName '(')* arg_list+=Arglist
	 *     parenthesis+=ParenthesisExpression ']' (ambiguity) ('new' ObjectName '(' ')')* '(' (')' '(')* arg_list+=Arglist
	 *     parenthesis+=ParenthesisExpression ']' (ambiguity) ('new' ObjectName '(' ')')* ('(' ')')* ('++' | '--')? (rule end)
	 *     parenthesis+=ParenthesisExpression ']' (ambiguity) ('new' ObjectName '(' ')')* ('(' ')')* (rule end)
	 *     parenthesis+=ParenthesisExpression ']' (ambiguity) ('new' ObjectName '(' ')')* (rule end)
	 *     type_specifiers+=TypeSpecifier (ambiguity) 'new' (ObjectName '(' ')' 'new')* type_specifiers+=TypeSpecifier
	 *     type_specifiers+=TypeSpecifier (ambiguity) 'new' ObjectName '(' (')' 'new' ObjectName '(')* arg_list+=Arglist
	 *     type_specifiers+=TypeSpecifier (ambiguity) ('new' ObjectName '(' ')')* '(' (')' '(')* arg_list+=Arglist
	 *     type_specifiers+=TypeSpecifier (ambiguity) ('new' ObjectName '(' ')')* ('(' ')')* ('++' | '--')? (rule end)
	 *     type_specifiers+=TypeSpecifier (ambiguity) ('new' ObjectName '(' ')')* ('(' ')')* (rule end)
	 *     type_specifiers+=TypeSpecifier (ambiguity) ('new' ObjectName '(' ')')* (rule end)
	 */
	protected void emit_CreatingExpression___LeftSquareBracketKeyword_1_1_1_2_0_RightSquareBracketKeyword_1_1_1_2_1__a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('new' ObjectName '(' ')')*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) '~'? ('null' | 'super' | 'this' | ID) (ambiguity) '(' (')' '(')* arg_list+=Arglist
	 *     (rule start) '~'? ('null' | 'super' | 'this' | ID) (ambiguity) ('(' ')')* (rule start)
	 *     (rule start) ('-'? | '++'? | '--'?) '~'? ('null' | 'super' | 'this' | ID) (ambiguity) '(' (')' '(')* arg_list+=Arglist
	 *     (rule start) ('-'? | '++'? | '--'?) '~'? ('null' | 'super' | 'this' | ID) (ambiguity) ('(' ')')* ('++'? | '--'?) (rule start)
	 *     (rule start) ('null' | 'super' | 'this' | ID) (ambiguity) '(' (')' '(')* arg_list+=Arglist
	 *     (rule start) ('null' | 'super' | 'this' | ID) (ambiguity) ('(' ')')* (rule start)
	 *     (rule start) ('null' | 'super' | 'this' | ID) (ambiguity) (rule start)
	 *     arg_list+=Arglist ')' (ambiguity) '(' (')' '(')* arg_list+=Arglist
	 *     arg_list+=Arglist ')' (ambiguity) ('(' ')')* ('++' | '--')? (rule end)
	 *     arg_list+=Arglist ')' (ambiguity) ('(' ')')* (rule end)
	 *     arg_list+=Arglist ')' (ambiguity) (rule end)
	 *     parenthesis+=ParenthesisExpression ']' ('[' ']')* (ambiguity) '(' (')' '(')* arg_list+=Arglist
	 *     parenthesis+=ParenthesisExpression ']' ('[' ']')* (ambiguity) ('(' ')')* ('++' | '--')? (rule end)
	 *     parenthesis+=ParenthesisExpression ']' ('[' ']')* (ambiguity) ('(' ')')* (rule end)
	 *     parenthesis+=ParenthesisExpression ']' ('[' ']')* (ambiguity) (rule end)
	 *     parenthesis+=PrimaryExpression ')' (ambiguity) '(' (')' '(')* arg_list+=Arglist
	 *     parenthesis+=PrimaryExpression ')' (ambiguity) ('(' ')')* ('++' | '--')? (rule end)
	 *     parenthesis+=PrimaryExpression ')' (ambiguity) ('(' ')')* (rule end)
	 *     parenthesis+=PrimaryExpression ')' (ambiguity) (rule end)
	 *     type_specifiers+=TypeSpecifier ('[' ']')* (ambiguity) '(' (')' '(')* arg_list+=Arglist
	 *     type_specifiers+=TypeSpecifier ('[' ']')* (ambiguity) ('(' ')')* ('++' | '--')? (rule end)
	 *     type_specifiers+=TypeSpecifier ('[' ']')* (ambiguity) ('(' ')')* (rule end)
	 *     type_specifiers+=TypeSpecifier ('[' ']')* (ambiguity) (rule end)
	 *     value=LiteralExpression (ambiguity) '(' (')' '(')* arg_list+=Arglist
	 *     value=LiteralExpression (ambiguity) ('(' ')')* ('++' | '--')? (rule end)
	 *     value=LiteralExpression (ambiguity) ('(' ')')* (rule end)
	 *     value=LiteralExpression (ambiguity) (rule end)
	 */
	protected void emit_CreatingExpression___NewKeyword_1_0_ObjectNameParserRuleCall_1_1_0_0_LeftParenthesisKeyword_1_1_0_1_RightParenthesisKeyword_1_1_0_3__a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     (ObjectName '(' ')' 'new')*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) '~'? ('null' | 'super' | 'this' | ID) 'new' (ambiguity) type_specifiers+=TypeSpecifier
	 *     (rule start) ('-'? | '++'? | '--'?) '~'? ('null' | 'super' | 'this' | ID) 'new' (ambiguity) type_specifiers+=TypeSpecifier
	 *     (rule start) ('null' | 'super' | 'this' | ID) 'new' (ambiguity) type_specifiers+=TypeSpecifier
	 *     arg_list+=Arglist ')' 'new' (ambiguity) type_specifiers+=TypeSpecifier
	 *     parenthesis+=ParenthesisExpression ']' ('[' ']')* 'new' (ambiguity) type_specifiers+=TypeSpecifier
	 *     parenthesis+=PrimaryExpression ')' 'new' (ambiguity) type_specifiers+=TypeSpecifier
	 *     type_specifiers+=TypeSpecifier ('[' ']')* 'new' (ambiguity) type_specifiers+=TypeSpecifier
	 *     value=LiteralExpression 'new' (ambiguity) type_specifiers+=TypeSpecifier
	 */
	protected void emit_CreatingExpression___ObjectNameParserRuleCall_1_1_0_0_LeftParenthesisKeyword_1_1_0_1_RightParenthesisKeyword_1_1_0_3_NewKeyword_1_0__a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     (')' 'new' ObjectName '(')*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) '~'? ('null' | 'super' | 'this' | ID) 'new' ObjectName '(' (ambiguity) arg_list+=Arglist
	 *     (rule start) ('-'? | '++'? | '--'?) '~'? ('null' | 'super' | 'this' | ID) 'new' ObjectName '(' (ambiguity) arg_list+=Arglist
	 *     (rule start) ('null' | 'super' | 'this' | ID) 'new' ObjectName '(' (ambiguity) arg_list+=Arglist
	 *     parenthesis+=ParenthesisExpression ']' ('[' ']')* 'new' ObjectName '(' (ambiguity) arg_list+=Arglist
	 *     parenthesis+=PrimaryExpression ')' 'new' ObjectName '(' (ambiguity) arg_list+=Arglist
	 *     type_specifiers+=TypeSpecifier ('[' ']')* 'new' ObjectName '(' (ambiguity) arg_list+=Arglist
	 *     value=LiteralExpression 'new' ObjectName '(' (ambiguity) arg_list+=Arglist
	 */
	protected void emit_CreatingExpression___RightParenthesisKeyword_1_1_0_3_NewKeyword_1_0_ObjectNameParserRuleCall_1_1_0_0_LeftParenthesisKeyword_1_1_0_1__a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     (')' 'new' ObjectName '(')+
	 *
	 * This ambiguous syntax occurs at:
	 *     arg_list+=Arglist (ambiguity) arg_list+=Arglist
	 */
	protected void emit_CreatingExpression___RightParenthesisKeyword_1_1_0_3_NewKeyword_1_0_ObjectNameParserRuleCall_1_1_0_0_LeftParenthesisKeyword_1_1_0_1__p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     Modifier*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) 'interface' ID ('extends' ObjectName ('.' ObjectName)*)? '{' '}' (rule start)
	 *     (rule start) (ambiguity) 'interface' ID ('extends' ObjectName ('.' ObjectName)*)? '{' field_declarations+=FieldDeclaration
	 */
	protected void emit_InterfaceDeclaration_ModifierParserRuleCall_1_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('extends' ObjectName ('.' ObjectName)*)?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) Modifier* 'interface' ID (ambiguity) '{' '}' (rule start)
	 *     (rule start) Modifier* 'interface' ID (ambiguity) '{' field_declarations+=FieldDeclaration
	 */
	protected void emit_InterfaceDeclaration___ExtendsKeyword_4_0_ObjectNameParserRuleCall_4_1___FullStopKeyword_4_2_0_ObjectNameParserRuleCall_4_2_1__a__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     (
	  *         '&' | 
	  *         '&=' | 
	  *         '|' | 
	  *         '|=' | 
	  *         '^' | 
	  *         '^=' | 
	  *         '&&' | 
	  *         '||=' | 
	  *         '||'
	  *     )
	 *
	 * This ambiguous syntax occurs at:
	 *     {Logical.left=} (ambiguity) right=TestingExpression
	 */
	protected void emit_LogicalExpression_AmpersandAmpersandKeyword_1_1_0_1_6_or_AmpersandEqualsSignKeyword_1_1_0_1_1_or_AmpersandKeyword_1_1_0_1_0_or_CircumflexAccentEqualsSignKeyword_1_1_0_1_5_or_CircumflexAccentKeyword_1_1_0_1_4_or_VerticalLineEqualsSignKeyword_1_1_0_1_3_or_VerticalLineKeyword_1_1_0_1_2_or_VerticalLineVerticalLineEqualsSignKeyword_1_1_0_1_7_or_VerticalLineVerticalLineKeyword_1_1_0_1_8(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'true' | 'false'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) '~'? (ambiguity) (rule start)
	 *     (rule start) ('-'? | '++'? | '--'?) '~'? (ambiguity) ('++'? | '--'?) (rule start)
	 *     (rule start) (ambiguity) (rule start)
	 */
	protected void emit_LogicalExpression_FalseKeyword_3_1_or_TrueKeyword_2_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     Modifier*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) specifier=TypeSpecifier
	 */
	protected void emit_MethodDeclaration_ModifierParserRuleCall_0_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('[' ']')*
	 *
	 * This ambiguous syntax occurs at:
	 *     parameters+=Parameter ')' (ambiguity) ';' (rule end)
	 *     parameters+=Parameter ')' (ambiguity) statement_block=StatementBlock
	 *     specifier=TypeSpecifier ID '(' ')' (ambiguity) ';' (rule end)
	 *     specifier=TypeSpecifier ID '(' ')' (ambiguity) statement_block=StatementBlock
	 */
	protected void emit_MethodDeclaration___LeftSquareBracketKeyword_6_0_RightSquareBracketKeyword_6_1__a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     (
	  *         '+' | 
	  *         '+=' | 
	  *         '-' | 
	  *         '-=' | 
	  *         '*' | 
	  *         '*=' | 
	  *         '/' | 
	  *         '/=' | 
	  *         '%' | 
	  *         '%='
	  *     )
	 *
	 * This ambiguous syntax occurs at:
	 *     {Numeric.left=} (ambiguity) right=BitExpression
	 */
	protected void emit_NumericExpression_AsteriskEqualsSignKeyword_1_1_1_1_5_or_AsteriskKeyword_1_1_1_1_4_or_HyphenMinusEqualsSignKeyword_1_1_1_1_3_or_HyphenMinusKeyword_1_1_1_1_2_or_PercentSignEqualsSignKeyword_1_1_1_1_9_or_PercentSignKeyword_1_1_1_1_8_or_PlusSignEqualsSignKeyword_1_1_1_1_1_or_PlusSignKeyword_1_1_1_1_0_or_SolidusEqualsSignKeyword_1_1_1_1_7_or_SolidusKeyword_1_1_1_1_6(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '-'? | '++'? | '--'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) '~'? ('null' | 'super' | 'this' | ID) '(' parenthesis+=PrimaryExpression
	 *     (rule start) (ambiguity) '~'? ('null' | 'super' | 'this' | ID) 'new' (ObjectName '(' ')' 'new')* type_specifiers+=TypeSpecifier
	 *     (rule start) (ambiguity) '~'? ('null' | 'super' | 'this' | ID) 'new' ObjectName '(' (')' 'new' ObjectName '(')* arg_list+=Arglist
	 *     (rule start) (ambiguity) '~'? ('null' | 'super' | 'this' | ID) ('new' ObjectName '(' ')')* '(' (')' '(')* arg_list+=Arglist
	 *     (rule start) (ambiguity) '~'? ('null' | 'super' | 'this' | ID) ('new' ObjectName '(' ')')* ('(' ')')* ('++'? | '--'?) (rule start)
	 *     (rule start) (ambiguity) '~'? ('true' | 'false') ('++'? | '--'?) (rule start)
	 */
	protected void emit_NumericExpression_HyphenMinusHyphenMinusKeyword_0_0_2_q_or_HyphenMinusKeyword_0_0_0_q_or_PlusSignPlusSignKeyword_0_0_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '++'? | '--'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) ('-'? | '++'? | '--'?) '~'? ('null' | 'super' | 'this' | ID) ('new' ObjectName '(' ')')* ('(' ')')* (ambiguity) (rule start)
	 *     (rule start) ('-'? | '++'? | '--'?) '~'? ('true' | 'false') (ambiguity) (rule start)
	 */
	protected void emit_NumericExpression_HyphenMinusHyphenMinusKeyword_1_1_0_1_q_or_PlusSignPlusSignKeyword_1_1_0_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('-' | '++' | '--')?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) '~'? '!' right=TestingExpression
	 *     (rule start) (ambiguity) '~'? value=LiteralExpression
	 *     (rule start) (ambiguity) '~'? {Args.left=}
	 *     (rule start) (ambiguity) '~'? {Casting.left=}
	 *     (rule start) (ambiguity) '~'? {Logical.left=}
	 *     (rule start) (ambiguity) '~'? {Logical.ternary=}
	 *     (rule start) (ambiguity) '~'? {Testing.left=}
	 *     (rule start) (ambiguity) {Bit.left=}
	 */
	protected void emit_NumericExpression___HyphenMinusHyphenMinusKeyword_0_0_2_or_HyphenMinusKeyword_0_0_0_or_PlusSignPlusSignKeyword_0_0_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('++' | '--')?
	 *
	 * This ambiguous syntax occurs at:
	 *     arg_list+=Arglist ')' ('(' ')')* (ambiguity) (rule end)
	 *     arg_list+=Arglist ')' ('new' ObjectName '(' ')')* ('(' ')')* (ambiguity) (rule end)
	 *     parenthesis+=ParenthesisExpression ']' ('[' ']')* ('new' ObjectName '(' ')')* ('(' ')')* (ambiguity) (rule end)
	 *     parenthesis+=PrimaryExpression ')' ('new' ObjectName '(' ')')* ('(' ')')* (ambiguity) (rule end)
	 *     right=ArgsExpression (ambiguity) (rule end)
	 *     right=CastingExpression ']' ('(' ')')* (ambiguity) (rule end)
	 *     right=CastingExpression ('(' ')')* (ambiguity) (rule end)
	 *     right=CreatingExpression ('(' ')')* (ambiguity) (rule end)
	 *     right=LogicalExpression (ambiguity) (rule end)
	 *     right=TestingExpression (ambiguity) (rule end)
	 *     ternary_end=TestingExpression (ambiguity) (rule end)
	 *     type_specifiers+=TypeSpecifier ('[' ']')* ('new' ObjectName '(' ')')* ('(' ')')* (ambiguity) (rule end)
	 *     value=LiteralExpression ('new' ObjectName '(' ')')* ('(' ')')* (ambiguity) (rule end)
	 *     {Args.left=} 'instanceof' ObjectName ('(' ')')* (ambiguity) (rule end)
	 */
	protected void emit_NumericExpression___HyphenMinusHyphenMinusKeyword_1_1_0_1_or_PlusSignPlusSignKeyword_1_1_0_0__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('.' ID)*
	 *
	 * This ambiguous syntax occurs at:
	 *     {Args.left=} 'instanceof' ObjectName ID (ambiguity) ObjectName '(' (')' '(')* arg_list+=Arglist
	 *     {Args.left=} 'instanceof' ObjectName ID (ambiguity) ObjectName ('(' ')')* (rule end)
	 */
	protected void emit_ObjectName___FullStopKeyword_1_0_IDTerminalRuleCall_1_1__a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('[' ']')*
	 *
	 * This ambiguous syntax occurs at:
	 *     specifier=TypeSpecifier ('[' ']')* ID (ambiguity) ')' statement_block=StatementBlock
	 *     specifier=TypeSpecifier ('[' ']')* ID (ambiguity) ',' parameters+=Parameter
	 *     specifier=TypeSpecifier ('[' ']')* ID (ambiguity) (rule end)
	 */
	protected void emit_Parameter___LeftSquareBracketKeyword_2_0_RightSquareBracketKeyword_2_1__a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'null' | 'super' | 'this' | ID
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) '~'? (ambiguity) '(' parenthesis+=PrimaryExpression
	 *     (rule start) '~'? (ambiguity) 'new' (ObjectName '(' ')' 'new')* type_specifiers+=TypeSpecifier
	 *     (rule start) '~'? (ambiguity) 'new' ObjectName '(' (')' 'new' ObjectName '(')* arg_list+=Arglist
	 *     (rule start) '~'? (ambiguity) ('new' ObjectName '(' ')')* '(' (')' '(')* arg_list+=Arglist
	 *     (rule start) '~'? (ambiguity) ('new' ObjectName '(' ')')* ('(' ')')* (rule start)
	 *     (rule start) ('-'? | '++'? | '--'?) '~'? (ambiguity) '(' parenthesis+=PrimaryExpression
	 *     (rule start) ('-'? | '++'? | '--'?) '~'? (ambiguity) 'new' (ObjectName '(' ')' 'new')* type_specifiers+=TypeSpecifier
	 *     (rule start) ('-'? | '++'? | '--'?) '~'? (ambiguity) 'new' ObjectName '(' (')' 'new' ObjectName '(')* arg_list+=Arglist
	 *     (rule start) ('-'? | '++'? | '--'?) '~'? (ambiguity) ('new' ObjectName '(' ')')* '(' (')' '(')* arg_list+=Arglist
	 *     (rule start) ('-'? | '++'? | '--'?) '~'? (ambiguity) ('new' ObjectName '(' ')')* ('(' ')')* ('++'? | '--'?) (rule start)
	 *     (rule start) (ambiguity) '(' parenthesis+=PrimaryExpression
	 *     (rule start) (ambiguity) 'new' (ObjectName '(' ')' 'new')* type_specifiers+=TypeSpecifier
	 *     (rule start) (ambiguity) 'new' ObjectName '(' (')' 'new' ObjectName '(')* arg_list+=Arglist
	 *     (rule start) (ambiguity) ('new' ObjectName '(' ')')* '(' (')' '(')* arg_list+=Arglist
	 *     (rule start) (ambiguity) ('new' ObjectName '(' ')')* ('(' ')')* (rule start)
	 *     (rule start) (ambiguity) ('new' ObjectName '(' ')')* (rule start)
	 *     (rule start) (ambiguity) (rule start)
	 */
	protected void emit_PrimaryExpression_IDTerminalRuleCall_1_4_or_NullKeyword_1_1_or_SuperKeyword_1_2_or_ThisKeyword_1_3(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('break' ID? ';') | ('continue' ID? ';') | (';' | ('return' ';'))
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 */
	protected void emit_Statement___BreakKeyword_13_1_0_IDTerminalRuleCall_13_1_1_q_SemicolonKeyword_13_1_2___or___ContinueKeyword_14_1_0_IDTerminalRuleCall_14_1_1_q_SemicolonKeyword_14_1_2___or___SemicolonKeyword_15_1_or___ReturnKeyword_10_1_0_SemicolonKeyword_10_1_2____(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('default' ':')*
	 *
	 * This ambiguous syntax occurs at:
	 *     case_expressions+=Expression ':' (ambiguity) 'case' case_expressions+=Expression
	 *     case_expressions+=Expression ':' (ambiguity) '}' (rule end)
	 *     case_expressions+=Expression ':' (ambiguity) statements+=Statement
	 *     statements+=Statement (ambiguity) 'case' case_expressions+=Expression
	 *     statements+=Statement (ambiguity) '}' (rule end)
	 *     statements+=Statement (ambiguity) statements+=Statement
	 *     switch_expression=Expression ')' '{' (ambiguity) 'case' case_expressions+=Expression
	 *     switch_expression=Expression ')' '{' (ambiguity) '}' (rule end)
	 *     switch_expression=Expression ')' '{' (ambiguity) statements+=Statement
	 */
	protected void emit_SwitchStatement___DefaultKeyword_5_1_0_ColonKeyword_5_1_1__a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     (
	  *         '>' | 
	  *         '<' | 
	  *         '>=' | 
	  *         '<=' | 
	  *         '==' | 
	  *         '!='
	  *     )
	 *
	 * This ambiguous syntax occurs at:
	 *     {Testing.left=} (ambiguity) right=ArgsExpression
	 */
	protected void emit_TestingExpression_EqualsSignEqualsSignKeyword_1_1_4_or_ExclamationMarkEqualsSignKeyword_1_1_5_or_GreaterThanSignEqualsSignKeyword_1_1_2_or_GreaterThanSignKeyword_1_1_0_or_LessThanSignEqualsSignKeyword_1_1_3_or_LessThanSignKeyword_1_1_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('[' ']')*
	 *
	 * This ambiguous syntax occurs at:
	 *     specifier=TypeSpecifier (ambiguity) (rule end)
	 *     specifier=TypeSpecifier (ambiguity) ID '(' specifier=TypeSpecifier
	 *     specifier=TypeSpecifier (ambiguity) ID ('[' ']')* ')' statement_block=StatementBlock
	 *     specifier=TypeSpecifier (ambiguity) ID ('[' ']')* ',' parameters+=Parameter
	 *     specifier=TypeSpecifier (ambiguity) ID ('[' ']')* (rule end)
	 */
	protected void emit_Type___LeftSquareBracketKeyword_1_0_RightSquareBracketKeyword_1_1__a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     Modifier*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) type=Type
	 *     (rule start) (ambiguity) variable_declarator=VariableDeclarator
	 */
	protected void emit_VariableDeclaration_ModifierParserRuleCall_0_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('[' ']')*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) ID (ambiguity) '=' variable_initializer=VariableInitializer
	 *     (rule start) ID (ambiguity) (rule start)
	 */
	protected void emit_VariableDeclarator___LeftSquareBracketKeyword_2_0_RightSquareBracketKeyword_2_1__a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     variable_initializer=VariableInitializer (ambiguity) '}' (rule end)
	 *     variable_initializers+=VariableInitializer (ambiguity) '}' (rule end)
	 */
	protected void emit_VariableInitializer_CommaKeyword_1_1_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
