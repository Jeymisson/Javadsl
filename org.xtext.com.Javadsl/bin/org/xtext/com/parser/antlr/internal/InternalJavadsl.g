/*
 * generated by Xtext
 */
grammar InternalJavadsl;

options {
	superClass=AbstractInternalAntlrParser;
	backtrack=true;
	 memoize=true;
	
}

@lexer::header {
package org.xtext.com.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.com.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.com.services.JavadslGrammarAccess;

}

@parser::members {

/*
  This grammar contains a lot of empty actions to work around a bug in ANTLR.
  Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
*/
 
 	private JavadslGrammarAccess grammarAccess;
 	
    public InternalJavadslParser(TokenStream input, JavadslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Head";	
   	}
   	
   	@Override
   	protected JavadslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleHead
entryRuleHead returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getHeadRule()); }
	 iv_ruleHead=ruleHead 
	 { $current=$iv_ruleHead.current; } 
	 EOF 
;

// Rule Head
ruleHead returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getHeadAccess().getJavaCompilationUnitParserRuleCall_0()); 
	    }
		lv_java_0_0=ruleCompilationUnit		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getHeadRule());
	        }
       		add(
       			$current, 
       			"java",
        		lv_java_0_0, 
        		"CompilationUnit");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleCompilationUnit
entryRuleCompilationUnit returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCompilationUnitRule()); }
	 iv_ruleCompilationUnit=ruleCompilationUnit 
	 { $current=$iv_ruleCompilationUnit.current; } 
	 EOF 
;

// Rule CompilationUnit
ruleCompilationUnit returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getCompilationUnitAccess().getCompilationUnitAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getCompilationUnitAccess().getPackagePackageStatementParserRuleCall_1_0()); 
	    }
		lv_package_1_0=rulePackageStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCompilationUnitRule());
	        }
       		set(
       			$current, 
       			"package",
        		lv_package_1_0, 
        		"PackageStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getCompilationUnitAccess().getImportsImportStatementParserRuleCall_2_0()); 
	    }
		lv_imports_2_0=ruleImportStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCompilationUnitRule());
	        }
       		add(
       			$current, 
       			"imports",
        		lv_imports_2_0, 
        		"ImportStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getCompilationUnitAccess().getType_declarationsTypeDeclarationParserRuleCall_3_0()); 
	    }
		lv_type_declarations_3_0=ruleTypeDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCompilationUnitRule());
	        }
       		add(
       			$current, 
       			"type_declarations",
        		lv_type_declarations_3_0, 
        		"TypeDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRulePackageStatement
entryRulePackageStatement returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getPackageStatementRule()); } 
	 iv_rulePackageStatement=rulePackageStatement 
	 { $current=$iv_rulePackageStatement.current.getText(); }  
	 EOF 
;

// Rule PackageStatement
rulePackageStatement returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='package' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPackageStatementAccess().getPackageKeyword_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getPackageStatementAccess().getObjectNameParserRuleCall_1()); 
    }
    this_ObjectName_1=ruleObjectName    {
		$current.merge(this_ObjectName_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=';' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPackageStatementAccess().getSemicolonKeyword_2()); 
    }
)
    ;





// Entry rule entryRuleImportStatement
entryRuleImportStatement returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getImportStatementRule()); } 
	 iv_ruleImportStatement=ruleImportStatement 
	 { $current=$iv_ruleImportStatement.current.getText(); }  
	 EOF 
;

// Rule ImportStatement
ruleImportStatement returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='import' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getImportStatementAccess().getImportKeyword_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getImportStatementAccess().getImportStatement_ParserRuleCall_1()); 
    }
    this_ImportStatement__1=ruleImportStatement_    {
		$current.merge(this_ImportStatement__1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleImportStatement_
entryRuleImportStatement_ returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getImportStatement_Rule()); } 
	 iv_ruleImportStatement_=ruleImportStatement_ 
	 { $current=$iv_ruleImportStatement_.current.getText(); }  
	 EOF 
;

// Rule ImportStatement_
ruleImportStatement_ returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getImportStatement_Access().getObjectNameParserRuleCall_0()); 
    }
    this_ObjectName_0=ruleObjectName    {
		$current.merge(this_ObjectName_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getImportStatement_Access().getFullStopKeyword_1_0()); 
    }

	kw='*' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getImportStatement_Access().getAsteriskKeyword_1_1()); 
    }
)?
	kw=';' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getImportStatement_Access().getSemicolonKeyword_2()); 
    }
)
    ;





// Entry rule entryRuleObjectName
entryRuleObjectName returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getObjectNameRule()); } 
	 iv_ruleObjectName=ruleObjectName 
	 { $current=$iv_ruleObjectName.current.getText(); }  
	 EOF 
;

// Rule ObjectName
ruleObjectName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getObjectNameAccess().getIDTerminalRuleCall_0()); 
    }
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getObjectNameAccess().getFullStopKeyword_1_0()); 
    }
    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getObjectNameAccess().getIDTerminalRuleCall_1_1()); 
    }
)*)
    ;





// Entry rule entryRuleTypeDeclaration
entryRuleTypeDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeDeclarationRule()); }
	 iv_ruleTypeDeclaration=ruleTypeDeclaration 
	 { $current=$iv_ruleTypeDeclaration.current; } 
	 EOF 
;

// Rule TypeDeclaration
ruleTypeDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{ 
	        newCompositeNode(grammarAccess.getTypeDeclarationAccess().getClass_declarationClassDeclarationParserRuleCall_0_0_0()); 
	    }
		lv_class_declaration_0_0=ruleClassDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeDeclarationRule());
	        }
       		set(
       			$current, 
       			"class_declaration",
        		lv_class_declaration_0_0, 
        		"ClassDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeDeclarationAccess().getInterface_declarationInterfaceDeclarationParserRuleCall_0_1_0()); 
	    }
		lv_interface_declaration_1_0=ruleInterfaceDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeDeclarationRule());
	        }
       		set(
       			$current, 
       			"interface_declaration",
        		lv_interface_declaration_1_0, 
        		"InterfaceDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
))	otherlv_2=';' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTypeDeclarationAccess().getSemicolonKeyword_1());
    }
)
;





// Entry rule entryRuleClassDeclaration
entryRuleClassDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getClassDeclarationRule()); }
	 iv_ruleClassDeclaration=ruleClassDeclaration 
	 { $current=$iv_ruleClassDeclaration.current; } 
	 EOF 
;

// Rule ClassDeclaration
ruleClassDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getClassDeclarationAccess().getClassDeclarationAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getClassDeclarationAccess().getModifiersModifierParserRuleCall_1_0()); 
	    }
		lv_modifiers_1_0=ruleModifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClassDeclarationRule());
	        }
       		add(
       			$current, 
       			"modifiers",
        		lv_modifiers_1_0, 
        		"Modifier");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_2='class' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getClassDeclarationAccess().getClassKeyword_2());
    }
this_ID_3=RULE_ID
    { 
    newLeafNode(this_ID_3, grammarAccess.getClassDeclarationAccess().getIDTerminalRuleCall_3()); 
    }
(	otherlv_4='extends' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getClassDeclarationAccess().getExtendsKeyword_4_0());
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getClassDeclarationAccess().getObjectNameParserRuleCall_4_1()); 
    }
ruleObjectName
    { 
        afterParserOrEnumRuleCall();
    }
)?(	otherlv_6='implements' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getClassDeclarationAccess().getImplementsKeyword_5_0());
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getClassDeclarationAccess().getObjectNameParserRuleCall_5_1()); 
    }
ruleObjectName
    { 
        afterParserOrEnumRuleCall();
    }
(	otherlv_8='.' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getClassDeclarationAccess().getFullStopKeyword_5_2_0());
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getClassDeclarationAccess().getObjectNameParserRuleCall_5_2_1()); 
    }
ruleObjectName
    { 
        afterParserOrEnumRuleCall();
    }
)*)?	otherlv_10='{' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getClassDeclarationAccess().getLeftCurlyBracketKeyword_6());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getClassDeclarationAccess().getField_declarationsFieldDeclarationParserRuleCall_7_0()); 
	    }
		lv_field_declarations_11_0=ruleFieldDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClassDeclarationRule());
	        }
       		add(
       			$current, 
       			"field_declarations",
        		lv_field_declarations_11_0, 
        		"FieldDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_12='}' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getClassDeclarationAccess().getRightCurlyBracketKeyword_8());
    }
)
;





// Entry rule entryRuleInterfaceDeclaration
entryRuleInterfaceDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInterfaceDeclarationRule()); }
	 iv_ruleInterfaceDeclaration=ruleInterfaceDeclaration 
	 { $current=$iv_ruleInterfaceDeclaration.current; } 
	 EOF 
;

// Rule InterfaceDeclaration
ruleInterfaceDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getInterfaceDeclarationAccess().getInterfaceDeclarationAction_0(),
            $current);
    }
)(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getInterfaceDeclarationAccess().getModifierParserRuleCall_1()); 
    }
ruleModifier
    { 
        afterParserOrEnumRuleCall();
    }
)*	otherlv_2='interface' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getInterfaceDeclarationAccess().getInterfaceKeyword_2());
    }
this_ID_3=RULE_ID
    { 
    newLeafNode(this_ID_3, grammarAccess.getInterfaceDeclarationAccess().getIDTerminalRuleCall_3()); 
    }
(	otherlv_4='extends' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getInterfaceDeclarationAccess().getExtendsKeyword_4_0());
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getInterfaceDeclarationAccess().getObjectNameParserRuleCall_4_1()); 
    }
ruleObjectName
    { 
        afterParserOrEnumRuleCall();
    }
(	otherlv_6='.' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getInterfaceDeclarationAccess().getFullStopKeyword_4_2_0());
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getInterfaceDeclarationAccess().getObjectNameParserRuleCall_4_2_1()); 
    }
ruleObjectName
    { 
        afterParserOrEnumRuleCall();
    }
)*)?	otherlv_8='{' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getInterfaceDeclarationAccess().getLeftCurlyBracketKeyword_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInterfaceDeclarationAccess().getField_declarationsFieldDeclarationParserRuleCall_6_0()); 
	    }
		lv_field_declarations_9_0=ruleFieldDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInterfaceDeclarationRule());
	        }
       		add(
       			$current, 
       			"field_declarations",
        		lv_field_declarations_9_0, 
        		"FieldDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_10='}' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getInterfaceDeclarationAccess().getRightCurlyBracketKeyword_7());
    }
)
;





// Entry rule entryRuleFieldDeclaration
entryRuleFieldDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFieldDeclarationRule()); }
	 iv_ruleFieldDeclaration=ruleFieldDeclaration 
	 { $current=$iv_ruleFieldDeclaration.current; } 
	 EOF 
;

// Rule FieldDeclaration
ruleFieldDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
(
		{ 
	        newCompositeNode(grammarAccess.getFieldDeclarationAccess().getDeclarationMethodDeclarationParserRuleCall_0_0_0()); 
	    }
		lv_declaration_0_1=ruleMethodDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFieldDeclarationRule());
	        }
       		set(
       			$current, 
       			"declaration",
        		lv_declaration_0_1, 
        		"MethodDeclaration");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getFieldDeclarationAccess().getDeclarationConstructorDeclarationParserRuleCall_0_0_1()); 
	    }
		lv_declaration_0_2=ruleConstructorDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFieldDeclarationRule());
	        }
       		set(
       			$current, 
       			"declaration",
        		lv_declaration_0_2, 
        		"ConstructorDeclaration");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getFieldDeclarationAccess().getDeclarationVariableDeclarationParserRuleCall_0_0_2()); 
	    }
		lv_declaration_0_3=ruleVariableDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFieldDeclarationRule());
	        }
       		set(
       			$current, 
       			"declaration",
        		lv_declaration_0_3, 
        		"VariableDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)

)
)
    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getFieldDeclarationAccess().getStaticInitializerParserRuleCall_1()); 
    }
    this_StaticInitializer_1=ruleStaticInitializer
    { 
        $current = $this_StaticInitializer_1.current; 
        afterParserOrEnumRuleCall();
    }

    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getFieldDeclarationAccess().getFieldDeclarationAction_2_0(),
            $current);
    }
)	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getFieldDeclarationAccess().getSemicolonKeyword_2_1());
    }
))
;





// Entry rule entryRuleStaticInitializer
entryRuleStaticInitializer returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStaticInitializerRule()); }
	 iv_ruleStaticInitializer=ruleStaticInitializer 
	 { $current=$iv_ruleStaticInitializer.current; } 
	 EOF 
;

// Rule StaticInitializer
ruleStaticInitializer returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='static' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getStaticInitializerAccess().getStaticKeyword_0());
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getStaticInitializerAccess().getStatementBlockParserRuleCall_1()); 
    }
    this_StatementBlock_1=ruleStatementBlock
    { 
        $current = $this_StatementBlock_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleMethodDeclaration
entryRuleMethodDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMethodDeclarationRule()); }
	 iv_ruleMethodDeclaration=ruleMethodDeclaration 
	 { $current=$iv_ruleMethodDeclaration.current; } 
	 EOF 
;

// Rule MethodDeclaration
ruleMethodDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getMethodDeclarationAccess().getModifierParserRuleCall_0()); 
    }
ruleModifier
    { 
        afterParserOrEnumRuleCall();
    }
)*
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getMethodDeclarationAccess().getTypeParserRuleCall_1()); 
    }
    this_Type_1=ruleType
    { 
        $current = $this_Type_1.current; 
        afterParserOrEnumRuleCall();
    }
this_ID_2=RULE_ID
    { 
    newLeafNode(this_ID_2, grammarAccess.getMethodDeclarationAccess().getIDTerminalRuleCall_2()); 
    }
	otherlv_3='(' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getMethodDeclarationAccess().getLeftParenthesisKeyword_3());
    }
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getMethodDeclarationAccess().getParameterListParserRuleCall_4()); 
    }
    this_ParameterList_4=ruleParameterList
    { 
        $current = $this_ParameterList_4.current; 
        afterParserOrEnumRuleCall();
    }
)?	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getMethodDeclarationAccess().getRightParenthesisKeyword_5());
    }
(	otherlv_6='[' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getMethodDeclarationAccess().getLeftSquareBracketKeyword_6_0());
    }
	otherlv_7=']' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getMethodDeclarationAccess().getRightSquareBracketKeyword_6_1());
    }
)*((
(
		{ 
	        newCompositeNode(grammarAccess.getMethodDeclarationAccess().getStatement_blockStatementBlockParserRuleCall_7_0_0()); 
	    }
		lv_statement_block_8_0=ruleStatementBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMethodDeclarationRule());
	        }
       		set(
       			$current, 
       			"statement_block",
        		lv_statement_block_8_0, 
        		"StatementBlock");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |	otherlv_9=';' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getMethodDeclarationAccess().getSemicolonKeyword_7_1());
    }
))
;





// Entry rule entryRuleConstructorDeclaration
entryRuleConstructorDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstructorDeclarationRule()); }
	 iv_ruleConstructorDeclaration=ruleConstructorDeclaration 
	 { $current=$iv_ruleConstructorDeclaration.current; } 
	 EOF 
;

// Rule ConstructorDeclaration
ruleConstructorDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getConstructorDeclarationAccess().getModifierParserRuleCall_0()); 
    }
ruleModifier
    { 
        afterParserOrEnumRuleCall();
    }
)*this_ID_1=RULE_ID
    { 
    newLeafNode(this_ID_1, grammarAccess.getConstructorDeclarationAccess().getIDTerminalRuleCall_1()); 
    }
	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getConstructorDeclarationAccess().getLeftParenthesisKeyword_2());
    }
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getConstructorDeclarationAccess().getParameterListParserRuleCall_3()); 
    }
    this_ParameterList_3=ruleParameterList
    { 
        $current = $this_ParameterList_3.current; 
        afterParserOrEnumRuleCall();
    }
)?	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getConstructorDeclarationAccess().getRightParenthesisKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getConstructorDeclarationAccess().getStatement_blockStatementBlockParserRuleCall_5_0()); 
	    }
		lv_statement_block_5_0=ruleStatementBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConstructorDeclarationRule());
	        }
       		set(
       			$current, 
       			"statement_block",
        		lv_statement_block_5_0, 
        		"StatementBlock");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleParameterList
entryRuleParameterList returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParameterListRule()); }
	 iv_ruleParameterList=ruleParameterList 
	 { $current=$iv_ruleParameterList.current; } 
	 EOF 
;

// Rule ParameterList
ruleParameterList returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getParameterListAccess().getParameterParserRuleCall_0()); 
    }
    this_Parameter_0=ruleParameter
    { 
        $current = $this_Parameter_0.current; 
        afterParserOrEnumRuleCall();
    }
(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getParameterListAccess().getCommaKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getParameterListAccess().getParametersParameterParserRuleCall_1_1_0()); 
	    }
		lv_parameters_2_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParameterListRule());
	        }
       		add(
       			$current, 
       			"parameters",
        		lv_parameters_2_0, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleParameter
entryRuleParameter returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParameterRule()); }
	 iv_ruleParameter=ruleParameter 
	 { $current=$iv_ruleParameter.current; } 
	 EOF 
;

// Rule Parameter
ruleParameter returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getParameterAccess().getTypeParserRuleCall_0()); 
    }
    this_Type_0=ruleType
    { 
        $current = $this_Type_0.current; 
        afterParserOrEnumRuleCall();
    }
this_ID_1=RULE_ID
    { 
    newLeafNode(this_ID_1, grammarAccess.getParameterAccess().getIDTerminalRuleCall_1()); 
    }
(	otherlv_2='[' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getParameterAccess().getLeftSquareBracketKeyword_2_0());
    }
	otherlv_3=']' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getParameterAccess().getRightSquareBracketKeyword_2_1());
    }
)*)
;





// Entry rule entryRuleStatementBlock
entryRuleStatementBlock returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStatementBlockRule()); }
	 iv_ruleStatementBlock=ruleStatementBlock 
	 { $current=$iv_ruleStatementBlock.current; } 
	 EOF 
;

// Rule StatementBlock
ruleStatementBlock returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='{' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getStatementBlockAccess().getLeftCurlyBracketKeyword_0());
    }
(
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getStatementBlockAccess().getStatementBlockAction_1(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getStatementBlockAccess().getStatementsStatementParserRuleCall_2_0()); 
	    }
		lv_statements_2_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatementBlockRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_2_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_3='}' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getStatementBlockAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRuleVariableDeclaration
entryRuleVariableDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableDeclarationRule()); }
	 iv_ruleVariableDeclaration=ruleVariableDeclaration 
	 { $current=$iv_ruleVariableDeclaration.current; } 
	 EOF 
;

// Rule VariableDeclaration
ruleVariableDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getVariableDeclarationAccess().getModifierParserRuleCall_0()); 
    }
ruleModifier
    { 
        afterParserOrEnumRuleCall();
    }
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getVariableDeclarationAccess().getTypeTypeParserRuleCall_1_0()); 
	    }
		lv_type_1_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableDeclarationRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_1_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getVariableDeclarationAccess().getVariable_declaratorVariableDeclaratorParserRuleCall_2_0()); 
	    }
		lv_variable_declarator_2_0=ruleVariableDeclarator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableDeclarationRule());
	        }
       		set(
       			$current, 
       			"variable_declarator",
        		lv_variable_declarator_2_0, 
        		"VariableDeclarator");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getVariableDeclarationAccess().getCommaKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVariableDeclarationAccess().getVariable_declaratorsVariableDeclaratorParserRuleCall_3_1_0()); 
	    }
		lv_variable_declarators_4_0=ruleVariableDeclarator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableDeclarationRule());
	        }
       		add(
       			$current, 
       			"variable_declarators",
        		lv_variable_declarators_4_0, 
        		"VariableDeclarator");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getVariableDeclarationAccess().getSemicolonKeyword_4());
    }
)
;





// Entry rule entryRuleVariableDeclarator
entryRuleVariableDeclarator returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableDeclaratorRule()); }
	 iv_ruleVariableDeclarator=ruleVariableDeclarator 
	 { $current=$iv_ruleVariableDeclarator.current; } 
	 EOF 
;

// Rule VariableDeclarator
ruleVariableDeclarator returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getVariableDeclaratorAccess().getVariableDeclaratorAction_0(),
            $current);
    }
)this_ID_1=RULE_ID
    { 
    newLeafNode(this_ID_1, grammarAccess.getVariableDeclaratorAccess().getIDTerminalRuleCall_1()); 
    }
(	otherlv_2='[' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getVariableDeclaratorAccess().getLeftSquareBracketKeyword_2_0());
    }
	otherlv_3=']' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getVariableDeclaratorAccess().getRightSquareBracketKeyword_2_1());
    }
)*(	otherlv_4='=' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getVariableDeclaratorAccess().getEqualsSignKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVariableDeclaratorAccess().getVariable_initializerVariableInitializerParserRuleCall_3_1_0()); 
	    }
		lv_variable_initializer_5_0=ruleVariableInitializer		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableDeclaratorRule());
	        }
       		set(
       			$current, 
       			"variable_initializer",
        		lv_variable_initializer_5_0, 
        		"VariableInitializer");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleVariableInitializer
entryRuleVariableInitializer returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableInitializerRule()); }
	 iv_ruleVariableInitializer=ruleVariableInitializer 
	 { $current=$iv_ruleVariableInitializer.current; } 
	 EOF 
;

// Rule VariableInitializer
ruleVariableInitializer returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getVariableInitializerAccess().getExprExpressionParserRuleCall_0_0()); 
	    }
		lv_expr_0_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableInitializerRule());
	        }
       		set(
       			$current, 
       			"expr",
        		lv_expr_0_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getVariableInitializerAccess().getLeftCurlyBracketKeyword_1_0());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getVariableInitializerAccess().getVariable_initializerVariableInitializerParserRuleCall_1_1_0_0()); 
	    }
		lv_variable_initializer_2_0=ruleVariableInitializer		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableInitializerRule());
	        }
       		set(
       			$current, 
       			"variable_initializer",
        		lv_variable_initializer_2_0, 
        		"VariableInitializer");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getVariableInitializerAccess().getCommaKeyword_1_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getVariableInitializerAccess().getVariable_initializersVariableInitializerParserRuleCall_1_1_1_1_0()); 
	    }
		lv_variable_initializers_4_0=ruleVariableInitializer		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVariableInitializerRule());
	        }
       		add(
       			$current, 
       			"variable_initializers",
        		lv_variable_initializers_4_0, 
        		"VariableInitializer");
	        afterParserOrEnumRuleCall();
	    }

)
))*(	otherlv_5=',' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getVariableInitializerAccess().getCommaKeyword_1_1_2());
    }
)?)?	otherlv_6='}' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getVariableInitializerAccess().getRightCurlyBracketKeyword_1_2());
    }
))
;





// Entry rule entryRuleType
entryRuleType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	 iv_ruleType=ruleType 
	 { $current=$iv_ruleType.current; } 
	 EOF 
;

// Rule Type
ruleType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getTypeAccess().getSpecifierTypeSpecifierParserRuleCall_0_0()); 
	    }
		lv_specifier_0_0=ruleTypeSpecifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeRule());
	        }
       		set(
       			$current, 
       			"specifier",
        		lv_specifier_0_0, 
        		"TypeSpecifier");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='[' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTypeAccess().getLeftSquareBracketKeyword_1_0());
    }
	otherlv_2=']' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTypeAccess().getRightSquareBracketKeyword_1_1());
    }
)*)
;





// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	 iv_ruleExpression=ruleExpression 
	 { $current=$iv_ruleExpression.current; } 
	 EOF 
;

// Rule Expression
ruleExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getNumericExpressionParserRuleCall()); 
    }
    this_NumericExpression_0=ruleNumericExpression
    { 
        $current = $this_NumericExpression_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleNumericExpression
entryRuleNumericExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNumericExpressionRule()); }
	 iv_ruleNumericExpression=ruleNumericExpression 
	 { $current=$iv_ruleNumericExpression.current; } 
	 EOF 
;

// Rule NumericExpression
ruleNumericExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((	otherlv_0='-' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getNumericExpressionAccess().getHyphenMinusKeyword_0_0_0());
    }

    |	otherlv_1='++' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getNumericExpressionAccess().getPlusSignPlusSignKeyword_0_0_1());
    }

    |	otherlv_2='--' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getNumericExpressionAccess().getHyphenMinusHyphenMinusKeyword_0_0_2());
    }
)
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getNumericExpressionAccess().getBitExpressionParserRuleCall_0_1()); 
    }
    this_BitExpression_3=ruleBitExpression
    { 
        $current = $this_BitExpression_3.current; 
        afterParserOrEnumRuleCall();
    }
)
    |(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getNumericExpressionAccess().getBitExpressionParserRuleCall_1_0()); 
    }
    this_BitExpression_4=ruleBitExpression
    { 
        $current = $this_BitExpression_4.current; 
        afterParserOrEnumRuleCall();
    }
((	otherlv_5='++' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getNumericExpressionAccess().getPlusSignPlusSignKeyword_1_1_0_0());
    }

    |	otherlv_6='--' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getNumericExpressionAccess().getHyphenMinusHyphenMinusKeyword_1_1_0_1());
    }
)
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getNumericExpressionAccess().getNumericLeftAction_1_1_1_0(),
            $current);
    }
)(	otherlv_8='+' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getNumericExpressionAccess().getPlusSignKeyword_1_1_1_1_0());
    }

    |	otherlv_9='+=' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getNumericExpressionAccess().getPlusSignEqualsSignKeyword_1_1_1_1_1());
    }

    |	otherlv_10='-' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getNumericExpressionAccess().getHyphenMinusKeyword_1_1_1_1_2());
    }

    |	otherlv_11='-=' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getNumericExpressionAccess().getHyphenMinusEqualsSignKeyword_1_1_1_1_3());
    }

    |	otherlv_12='*' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getNumericExpressionAccess().getAsteriskKeyword_1_1_1_1_4());
    }

    |	otherlv_13='*=' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getNumericExpressionAccess().getAsteriskEqualsSignKeyword_1_1_1_1_5());
    }

    |	otherlv_14='/' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getNumericExpressionAccess().getSolidusKeyword_1_1_1_1_6());
    }

    |	otherlv_15='/=' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getNumericExpressionAccess().getSolidusEqualsSignKeyword_1_1_1_1_7());
    }

    |	otherlv_16='%' 
    {
    	newLeafNode(otherlv_16, grammarAccess.getNumericExpressionAccess().getPercentSignKeyword_1_1_1_1_8());
    }

    |	otherlv_17='%=' 
    {
    	newLeafNode(otherlv_17, grammarAccess.getNumericExpressionAccess().getPercentSignEqualsSignKeyword_1_1_1_1_9());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getNumericExpressionAccess().getRightBitExpressionParserRuleCall_1_1_1_2_0()); 
	    }
		lv_right_18_0=ruleBitExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNumericExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_18_0, 
        		"BitExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)))
;





// Entry rule entryRuleBitExpression
entryRuleBitExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBitExpressionRule()); }
	 iv_ruleBitExpression=ruleBitExpression 
	 { $current=$iv_ruleBitExpression.current; } 
	 EOF 
;

// Rule BitExpression
ruleBitExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='~' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getBitExpressionAccess().getTildeKeyword_0_0());
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getBitExpressionAccess().getLogicalExpressionParserRuleCall_0_1()); 
    }
    this_LogicalExpression_1=ruleLogicalExpression
    { 
        $current = $this_LogicalExpression_1.current; 
        afterParserOrEnumRuleCall();
    }
)
    |(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getBitExpressionAccess().getLogicalExpressionParserRuleCall_1_0()); 
    }
    this_LogicalExpression_2=ruleLogicalExpression
    { 
        $current = $this_LogicalExpression_2.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getBitExpressionAccess().getBitLeftAction_1_1_0(),
            $current);
    }
)(	otherlv_4='>>=' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getBitExpressionAccess().getGreaterThanSignGreaterThanSignEqualsSignKeyword_1_1_1_0());
    }

    |	otherlv_5='<<' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getBitExpressionAccess().getLessThanSignLessThanSignKeyword_1_1_1_1());
    }

    |	otherlv_6='>>' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getBitExpressionAccess().getGreaterThanSignGreaterThanSignKeyword_1_1_1_2());
    }

    |	otherlv_7='>>>' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getBitExpressionAccess().getGreaterThanSignGreaterThanSignGreaterThanSignKeyword_1_1_1_3());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getBitExpressionAccess().getRightLogicalExpressionParserRuleCall_1_1_2_0()); 
	    }
		lv_right_8_0=ruleLogicalExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBitExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_8_0, 
        		"LogicalExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*))
;





// Entry rule entryRuleTestingExpression
entryRuleTestingExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTestingExpressionRule()); }
	 iv_ruleTestingExpression=ruleTestingExpression 
	 { $current=$iv_ruleTestingExpression.current; } 
	 EOF 
;

// Rule TestingExpression
ruleTestingExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getTestingExpressionAccess().getArgsExpressionParserRuleCall_0()); 
    }
    this_ArgsExpression_0=ruleArgsExpression
    { 
        $current = $this_ArgsExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getTestingExpressionAccess().getTestingLeftAction_1_0(),
            $current);
    }
)(	otherlv_2='>' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTestingExpressionAccess().getGreaterThanSignKeyword_1_1_0());
    }

    |	otherlv_3='<' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getTestingExpressionAccess().getLessThanSignKeyword_1_1_1());
    }

    |	otherlv_4='>=' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getTestingExpressionAccess().getGreaterThanSignEqualsSignKeyword_1_1_2());
    }

    |	otherlv_5='<=' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getTestingExpressionAccess().getLessThanSignEqualsSignKeyword_1_1_3());
    }

    |	otherlv_6='==' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getTestingExpressionAccess().getEqualsSignEqualsSignKeyword_1_1_4());
    }

    |	otherlv_7='!=' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getTestingExpressionAccess().getExclamationMarkEqualsSignKeyword_1_1_5());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTestingExpressionAccess().getRightArgsExpressionParserRuleCall_1_2_0()); 
	    }
		lv_right_8_0=ruleArgsExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTestingExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_8_0, 
        		"ArgsExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleLogicalExpression
entryRuleLogicalExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLogicalExpressionRule()); }
	 iv_ruleLogicalExpression=ruleLogicalExpression 
	 { $current=$iv_ruleLogicalExpression.current; } 
	 EOF 
;

// Rule LogicalExpression
ruleLogicalExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='!' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getLogicalExpressionAccess().getExclamationMarkKeyword_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLogicalExpressionAccess().getRightTestingExpressionParserRuleCall_0_1_0()); 
	    }
		lv_right_1_0=ruleTestingExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLogicalExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_1_0, 
        		"TestingExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getLogicalExpressionAccess().getTestingExpressionParserRuleCall_1_0()); 
    }
    this_TestingExpression_2=ruleTestingExpression
    { 
        $current = $this_TestingExpression_2.current; 
        afterParserOrEnumRuleCall();
    }
(((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getLogicalExpressionAccess().getLogicalLeftAction_1_1_0_0(),
            $current);
    }
)(	otherlv_4='&' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getLogicalExpressionAccess().getAmpersandKeyword_1_1_0_1_0());
    }

    |	otherlv_5='&=' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getLogicalExpressionAccess().getAmpersandEqualsSignKeyword_1_1_0_1_1());
    }

    |	otherlv_6='|' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getLogicalExpressionAccess().getVerticalLineKeyword_1_1_0_1_2());
    }

    |	otherlv_7='|=' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getLogicalExpressionAccess().getVerticalLineEqualsSignKeyword_1_1_0_1_3());
    }

    |	otherlv_8='^' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getLogicalExpressionAccess().getCircumflexAccentKeyword_1_1_0_1_4());
    }

    |	otherlv_9='^=' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getLogicalExpressionAccess().getCircumflexAccentEqualsSignKeyword_1_1_0_1_5());
    }

    |	otherlv_10='&&' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getLogicalExpressionAccess().getAmpersandAmpersandKeyword_1_1_0_1_6());
    }

    |	otherlv_11='||=' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getLogicalExpressionAccess().getVerticalLineVerticalLineEqualsSignKeyword_1_1_0_1_7());
    }

    |	otherlv_12='||' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getLogicalExpressionAccess().getVerticalLineVerticalLineKeyword_1_1_0_1_8());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getLogicalExpressionAccess().getRightTestingExpressionParserRuleCall_1_1_0_2_0()); 
	    }
		lv_right_13_0=ruleTestingExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLogicalExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_13_0, 
        		"TestingExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getLogicalExpressionAccess().getLogicalLeftAction_1_1_1_0(),
            $current);
    }
)	otherlv_15='?' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getLogicalExpressionAccess().getQuestionMarkKeyword_1_1_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLogicalExpressionAccess().getRightTestingExpressionParserRuleCall_1_1_1_2_0()); 
	    }
		lv_right_16_0=ruleTestingExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLogicalExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_16_0, 
        		"TestingExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getLogicalExpressionAccess().getLogicalTernaryAction_1_1_1_3(),
            $current);
    }
)	otherlv_18=':' 
    {
    	newLeafNode(otherlv_18, grammarAccess.getLogicalExpressionAccess().getColonKeyword_1_1_1_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLogicalExpressionAccess().getTernary_endTestingExpressionParserRuleCall_1_1_1_5_0()); 
	    }
		lv_ternary_end_19_0=ruleTestingExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLogicalExpressionRule());
	        }
       		set(
       			$current, 
       			"ternary_end",
        		lv_ternary_end_19_0, 
        		"TestingExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)))*)
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getLogicalExpressionAccess().getLogicalExpressionAction_2_0(),
            $current);
    }
)	otherlv_21='true' 
    {
    	newLeafNode(otherlv_21, grammarAccess.getLogicalExpressionAccess().getTrueKeyword_2_1());
    }
)
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getLogicalExpressionAccess().getLogicalExpressionAction_3_0(),
            $current);
    }
)	otherlv_23='false' 
    {
    	newLeafNode(otherlv_23, grammarAccess.getLogicalExpressionAccess().getFalseKeyword_3_1());
    }
))
;





// Entry rule entryRuleArgsExpression
entryRuleArgsExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArgsExpressionRule()); }
	 iv_ruleArgsExpression=ruleArgsExpression 
	 { $current=$iv_ruleArgsExpression.current; } 
	 EOF 
;

// Rule ArgsExpression
ruleArgsExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getArgsExpressionAccess().getCastingExpressionParserRuleCall_0()); 
    }
    this_CastingExpression_0=ruleCastingExpression
    { 
        $current = $this_CastingExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getArgsExpressionAccess().getLeftParenthesisKeyword_1_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArgsExpressionAccess().getArg_listArglistParserRuleCall_1_0_1_0()); 
	    }
		lv_arg_list_2_0=ruleArglist		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArgsExpressionRule());
	        }
       		add(
       			$current, 
       			"arg_list",
        		lv_arg_list_2_0, 
        		"Arglist");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getArgsExpressionAccess().getRightParenthesisKeyword_1_0_2());
    }
)
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getArgsExpressionAccess().getArgsLeftAction_1_1_0(),
            $current);
    }
)	otherlv_5='.' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getArgsExpressionAccess().getFullStopKeyword_1_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArgsExpressionAccess().getRightCastingExpressionParserRuleCall_1_1_2_0()); 
	    }
		lv_right_6_0=ruleCastingExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArgsExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_6_0, 
        		"CastingExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getArgsExpressionAccess().getArgsLeftAction_1_2_0(),
            $current);
    }
)	otherlv_8='[' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getArgsExpressionAccess().getLeftSquareBracketKeyword_1_2_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArgsExpressionAccess().getRightCastingExpressionParserRuleCall_1_2_2_0()); 
	    }
		lv_right_9_0=ruleCastingExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArgsExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_9_0, 
        		"CastingExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_10=']' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getArgsExpressionAccess().getRightSquareBracketKeyword_1_2_3());
    }
)
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getArgsExpressionAccess().getArgsLeftAction_1_3_0(),
            $current);
    }
)	otherlv_12=',' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getArgsExpressionAccess().getCommaKeyword_1_3_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArgsExpressionAccess().getRightCastingExpressionParserRuleCall_1_3_2_0()); 
	    }
		lv_right_13_0=ruleCastingExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArgsExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_13_0, 
        		"CastingExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getArgsExpressionAccess().getArgsLeftAction_1_4_0(),
            $current);
    }
)	otherlv_15='instanceof' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getArgsExpressionAccess().getInstanceofKeyword_1_4_1());
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getArgsExpressionAccess().getObjectNameParserRuleCall_1_4_2()); 
    }
ruleObjectName
    { 
        afterParserOrEnumRuleCall();
    }
))*)
;





// Entry rule entryRuleArglist
entryRuleArglist returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArglistRule()); }
	 iv_ruleArglist=ruleArglist 
	 { $current=$iv_ruleArglist.current; } 
	 EOF 
;

// Rule Arglist
ruleArglist returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getArglistAccess().getArgCastingExpressionParserRuleCall_0_0()); 
	    }
		lv_arg_0_0=ruleCastingExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArglistRule());
	        }
       		set(
       			$current, 
       			"arg",
        		lv_arg_0_0, 
        		"CastingExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getArglistAccess().getCommaKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArglistAccess().getArgsCastingExpressionParserRuleCall_1_1_0()); 
	    }
		lv_args_2_0=ruleCastingExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArglistRule());
	        }
       		add(
       			$current, 
       			"args",
        		lv_args_2_0, 
        		"CastingExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleCastingExpression
entryRuleCastingExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCastingExpressionRule()); }
	 iv_ruleCastingExpression=ruleCastingExpression 
	 { $current=$iv_ruleCastingExpression.current; } 
	 EOF 
;

// Rule CastingExpression
ruleCastingExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getCastingExpressionAccess().getCreatingExpressionParserRuleCall_0()); 
    }
    this_CreatingExpression_0=ruleCreatingExpression
    { 
        $current = $this_CreatingExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getCastingExpressionAccess().getCastingLeftAction_1_0(),
            $current);
    }
)	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getCastingExpressionAccess().getLeftParenthesisKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCastingExpressionAccess().getTypesTypeParserRuleCall_1_2_0()); 
	    }
		lv_types_3_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCastingExpressionRule());
	        }
       		add(
       			$current, 
       			"types",
        		lv_types_3_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getCastingExpressionAccess().getRightParenthesisKeyword_1_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCastingExpressionAccess().getRightCreatingExpressionParserRuleCall_1_4_0()); 
	    }
		lv_right_5_0=ruleCreatingExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCastingExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_5_0, 
        		"CreatingExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleCreatingExpression
entryRuleCreatingExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCreatingExpressionRule()); }
	 iv_ruleCreatingExpression=ruleCreatingExpression 
	 { $current=$iv_ruleCreatingExpression.current; } 
	 EOF 
;

// Rule CreatingExpression
ruleCreatingExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getCreatingExpressionAccess().getParenthesisExpressionParserRuleCall_0()); 
    }
    this_ParenthesisExpression_0=ruleParenthesisExpression
    { 
        $current = $this_ParenthesisExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
(	otherlv_1='new' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getCreatingExpressionAccess().getNewKeyword_1_0());
    }
((
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getCreatingExpressionAccess().getObjectNameParserRuleCall_1_1_0_0()); 
    }
ruleObjectName
    { 
        afterParserOrEnumRuleCall();
    }
	otherlv_3='(' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getCreatingExpressionAccess().getLeftParenthesisKeyword_1_1_0_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCreatingExpressionAccess().getArg_listArglistParserRuleCall_1_1_0_2_0()); 
	    }
		lv_arg_list_4_0=ruleArglist		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCreatingExpressionRule());
	        }
       		add(
       			$current, 
       			"arg_list",
        		lv_arg_list_4_0, 
        		"Arglist");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getCreatingExpressionAccess().getRightParenthesisKeyword_1_1_0_3());
    }
)
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getCreatingExpressionAccess().getType_specifiersTypeSpecifierParserRuleCall_1_1_1_0_0()); 
	    }
		lv_type_specifiers_6_0=ruleTypeSpecifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCreatingExpressionRule());
	        }
       		add(
       			$current, 
       			"type_specifiers",
        		lv_type_specifiers_6_0, 
        		"TypeSpecifier");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_7='[' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getCreatingExpressionAccess().getLeftSquareBracketKeyword_1_1_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCreatingExpressionAccess().getParenthesisParenthesisExpressionParserRuleCall_1_1_1_1_1_0()); 
	    }
		lv_parenthesis_8_0=ruleParenthesisExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCreatingExpressionRule());
	        }
       		add(
       			$current, 
       			"parenthesis",
        		lv_parenthesis_8_0, 
        		"ParenthesisExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_9=']' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getCreatingExpressionAccess().getRightSquareBracketKeyword_1_1_1_1_2());
    }
)?(	otherlv_10='[' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getCreatingExpressionAccess().getLeftSquareBracketKeyword_1_1_1_2_0());
    }
	otherlv_11=']' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getCreatingExpressionAccess().getRightSquareBracketKeyword_1_1_1_2_1());
    }
)*)))*)
;





// Entry rule entryRuleParenthesisExpression
entryRuleParenthesisExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParenthesisExpressionRule()); }
	 iv_ruleParenthesisExpression=ruleParenthesisExpression 
	 { $current=$iv_ruleParenthesisExpression.current; } 
	 EOF 
;

// Rule ParenthesisExpression
ruleParenthesisExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getParenthesisExpressionAccess().getPrimaryExpressionParserRuleCall_0()); 
    }
    this_PrimaryExpression_0=rulePrimaryExpression
    { 
        $current = $this_PrimaryExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
(	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getParenthesisExpressionAccess().getLeftParenthesisKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getParenthesisExpressionAccess().getParenthesisPrimaryExpressionParserRuleCall_1_1_0()); 
	    }
		lv_parenthesis_2_0=rulePrimaryExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParenthesisExpressionRule());
	        }
       		add(
       			$current, 
       			"parenthesis",
        		lv_parenthesis_2_0, 
        		"PrimaryExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getParenthesisExpressionAccess().getRightParenthesisKeyword_1_2());
    }
)*)
;





// Entry rule entryRulePrimaryExpression
entryRulePrimaryExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrimaryExpressionRule()); }
	 iv_rulePrimaryExpression=rulePrimaryExpression 
	 { $current=$iv_rulePrimaryExpression.current; } 
	 EOF 
;

// Rule PrimaryExpression
rulePrimaryExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getPrimaryExpressionAccess().getPrimaryExpressionAction_0(),
            $current);
    }
)((
(
		{ 
	        newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getValueLiteralExpressionParserRuleCall_1_0_0()); 
	    }
		lv_value_1_0=ruleLiteralExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimaryExpressionRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"LiteralExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |	otherlv_2='null' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getPrimaryExpressionAccess().getNullKeyword_1_1());
    }

    |	otherlv_3='super' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getPrimaryExpressionAccess().getSuperKeyword_1_2());
    }

    |	otherlv_4='this' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getPrimaryExpressionAccess().getThisKeyword_1_3());
    }

    |this_ID_5=RULE_ID
    { 
    newLeafNode(this_ID_5, grammarAccess.getPrimaryExpressionAccess().getIDTerminalRuleCall_1_4()); 
    }
))
;





// Entry rule entryRuleLiteralExpression
entryRuleLiteralExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLiteralExpressionRule()); }
	 iv_ruleLiteralExpression=ruleLiteralExpression 
	 { $current=$iv_ruleLiteralExpression.current; } 
	 EOF 
;

// Rule LiteralExpression
ruleLiteralExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
(
		{ 
	        newCompositeNode(grammarAccess.getLiteralExpressionAccess().getLiteral_valueIntegerLiteralParserRuleCall_0_0()); 
	    }
		lv_literal_value_0_1=ruleIntegerLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLiteralExpressionRule());
	        }
       		set(
       			$current, 
       			"literal_value",
        		lv_literal_value_0_1, 
        		"IntegerLiteral");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getLiteralExpressionAccess().getLiteral_valueFloatLiteralParserRuleCall_0_1()); 
	    }
		lv_literal_value_0_2=ruleFloatLiteral		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLiteralExpressionRule());
	        }
       		set(
       			$current, 
       			"literal_value",
        		lv_literal_value_0_2, 
        		"FloatLiteral");
	        afterParserOrEnumRuleCall();
	    }

    |		lv_literal_value_0_3=RULE_STRING
		{
			newLeafNode(lv_literal_value_0_3, grammarAccess.getLiteralExpressionAccess().getLiteral_valueSTRINGTerminalRuleCall_0_2()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getLiteralExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"literal_value",
        		lv_literal_value_0_3, 
        		"STRING");
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getLiteralExpressionAccess().getLiteral_valueCharacterParserRuleCall_0_3()); 
	    }
		lv_literal_value_0_4=ruleCharacter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLiteralExpressionRule());
	        }
       		set(
       			$current, 
       			"literal_value",
        		lv_literal_value_0_4, 
        		"Character");
	        afterParserOrEnumRuleCall();
	    }

)

)
)
;





// Entry rule entryRuleTypeSpecifier
entryRuleTypeSpecifier returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeSpecifierRule()); }
	 iv_ruleTypeSpecifier=ruleTypeSpecifier 
	 { $current=$iv_ruleTypeSpecifier.current; } 
	 EOF 
;

// Rule TypeSpecifier
ruleTypeSpecifier returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
(
		lv_name_0_1=	'boolean' 
    {
        newLeafNode(lv_name_0_1, grammarAccess.getTypeSpecifierAccess().getNameBooleanKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeSpecifierRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_0_1, null);
	    }

    |		lv_name_0_2=	'byte' 
    {
        newLeafNode(lv_name_0_2, grammarAccess.getTypeSpecifierAccess().getNameByteKeyword_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeSpecifierRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_0_2, null);
	    }

    |		lv_name_0_3=	'char' 
    {
        newLeafNode(lv_name_0_3, grammarAccess.getTypeSpecifierAccess().getNameCharKeyword_0_2());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeSpecifierRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_0_3, null);
	    }

    |		lv_name_0_4=	'short' 
    {
        newLeafNode(lv_name_0_4, grammarAccess.getTypeSpecifierAccess().getNameShortKeyword_0_3());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeSpecifierRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_0_4, null);
	    }

    |		lv_name_0_5=	'int' 
    {
        newLeafNode(lv_name_0_5, grammarAccess.getTypeSpecifierAccess().getNameIntKeyword_0_4());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeSpecifierRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_0_5, null);
	    }

    |		lv_name_0_6=	'float' 
    {
        newLeafNode(lv_name_0_6, grammarAccess.getTypeSpecifierAccess().getNameFloatKeyword_0_5());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeSpecifierRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_0_6, null);
	    }

    |		lv_name_0_7=	'long' 
    {
        newLeafNode(lv_name_0_7, grammarAccess.getTypeSpecifierAccess().getNameLongKeyword_0_6());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeSpecifierRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_0_7, null);
	    }

    |		lv_name_0_8=	'double' 
    {
        newLeafNode(lv_name_0_8, grammarAccess.getTypeSpecifierAccess().getNameDoubleKeyword_0_7());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeSpecifierRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_0_8, null);
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getTypeSpecifierAccess().getNameObjectNameParserRuleCall_0_8()); 
	    }
		lv_name_0_9=ruleObjectName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeSpecifierRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_9, 
        		"ObjectName");
	        afterParserOrEnumRuleCall();
	    }

)

)
)
;





// Entry rule entryRuleModifier
entryRuleModifier returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getModifierRule()); } 
	 iv_ruleModifier=ruleModifier 
	 { $current=$iv_ruleModifier.current.getText(); }  
	 EOF 
;

// Rule Modifier
ruleModifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='public' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getModifierAccess().getPublicKeyword_0()); 
    }

    |
	kw='private' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getModifierAccess().getPrivateKeyword_1()); 
    }

    |
	kw='protected' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getModifierAccess().getProtectedKeyword_2()); 
    }

    |
	kw='static' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getModifierAccess().getStaticKeyword_3()); 
    }

    |
	kw='final' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getModifierAccess().getFinalKeyword_4()); 
    }

    |
	kw='native' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getModifierAccess().getNativeKeyword_5()); 
    }

    |
	kw='synchronized' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getModifierAccess().getSynchronizedKeyword_6()); 
    }

    |
	kw='abstract' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getModifierAccess().getAbstractKeyword_7()); 
    }

    |
	kw='threadsafe' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getModifierAccess().getThreadsafeKeyword_8()); 
    }

    |
	kw='transient' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getModifierAccess().getTransientKeyword_9()); 
    }
)
    ;





// Entry rule entryRuleCharacter
entryRuleCharacter returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getCharacterRule()); } 
	 iv_ruleCharacter=ruleCharacter 
	 { $current=$iv_ruleCharacter.current.getText(); }  
	 EOF 
;

// Rule Character
ruleCharacter returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_STRING_0=RULE_STRING    {
		$current.merge(this_STRING_0);
    }

    { 
    newLeafNode(this_STRING_0, grammarAccess.getCharacterAccess().getSTRINGTerminalRuleCall()); 
    }

    ;





// Entry rule entryRuledecimal_digits
entryRuledecimal_digits returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getDecimal_digitsRule()); } 
	 iv_ruledecimal_digits=ruledecimal_digits 
	 { $current=$iv_ruledecimal_digits.current.getText(); }  
	 EOF 
;

// Rule decimal_digits
ruledecimal_digits returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_INT_0=RULE_INT    {
		$current.merge(this_INT_0);
    }

    { 
    newLeafNode(this_INT_0, grammarAccess.getDecimal_digitsAccess().getINTTerminalRuleCall_0()); 
    }
(    this_INT_1=RULE_INT    {
		$current.merge(this_INT_1);
    }

    { 
    newLeafNode(this_INT_1, grammarAccess.getDecimal_digitsAccess().getINTTerminalRuleCall_1()); 
    }
)*)
    ;





// Entry rule entryRuleDoStatement
entryRuleDoStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDoStatementRule()); }
	 iv_ruleDoStatement=ruleDoStatement 
	 { $current=$iv_ruleDoStatement.current; } 
	 EOF 
;

// Rule DoStatement
ruleDoStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='do' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDoStatementAccess().getDoKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDoStatementAccess().getStatementStatementParserRuleCall_1_0()); 
	    }
		lv_statement_1_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDoStatementRule());
	        }
       		set(
       			$current, 
       			"statement",
        		lv_statement_1_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='while' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getDoStatementAccess().getWhileKeyword_2());
    }
	otherlv_3='(' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getDoStatementAccess().getLeftParenthesisKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDoStatementAccess().getExpressionExpressionParserRuleCall_4_0()); 
	    }
		lv_expression_4_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDoStatementRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_4_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getDoStatementAccess().getRightParenthesisKeyword_5());
    }
	otherlv_6=';' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getDoStatementAccess().getSemicolonKeyword_6());
    }
)
;





// Entry rule entryRuleexponent_part
entryRuleexponent_part returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getExponent_partRule()); } 
	 iv_ruleexponent_part=ruleexponent_part 
	 { $current=$iv_ruleexponent_part.current.getText(); }  
	 EOF 
;

// Rule exponent_part
ruleexponent_part returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='0..9e' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getExponent_partAccess().getEKeyword()); 
    }

    ;





// Entry rule entryRuleIntegerLiteral
entryRuleIntegerLiteral returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getIntegerLiteralRule()); } 
	 iv_ruleIntegerLiteral=ruleIntegerLiteral 
	 { $current=$iv_ruleIntegerLiteral.current.getText(); }  
	 EOF 
;

// Rule IntegerLiteral
ruleIntegerLiteral returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getIntegerLiteralAccess().getDecimal_integer_literalParserRuleCall_0()); 
    }
    this_decimal_integer_literal_0=ruledecimal_integer_literal    {
		$current.merge(this_decimal_integer_literal_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getIntegerLiteralAccess().getHex_integer_literalParserRuleCall_1()); 
    }
    this_hex_integer_literal_1=rulehex_integer_literal    {
		$current.merge(this_hex_integer_literal_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getIntegerLiteralAccess().getOctal_integer_literalParserRuleCall_2()); 
    }
    this_octal_integer_literal_2=ruleoctal_integer_literal    {
		$current.merge(this_octal_integer_literal_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuledecimal_integer_literal
entryRuledecimal_integer_literal returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getDecimal_integer_literalRule()); } 
	 iv_ruledecimal_integer_literal=ruledecimal_integer_literal 
	 { $current=$iv_ruledecimal_integer_literal.current.getText(); }  
	 EOF 
;

// Rule decimal_integer_literal
ruledecimal_integer_literal returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getDecimal_integer_literalAccess().getDecimal_digitsParserRuleCall_0()); 
    }
    this_decimal_digits_0=ruledecimal_digits    {
		$current.merge(this_decimal_digits_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(    this_NUMBER_SUFFIX_1=RULE_NUMBER_SUFFIX    {
		$current.merge(this_NUMBER_SUFFIX_1);
    }

    { 
    newLeafNode(this_NUMBER_SUFFIX_1, grammarAccess.getDecimal_integer_literalAccess().getNUMBER_SUFFIXTerminalRuleCall_1()); 
    }
)?)
    ;





// Entry rule entryRulehex_integer_literal
entryRulehex_integer_literal returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getHex_integer_literalRule()); } 
	 iv_rulehex_integer_literal=rulehex_integer_literal 
	 { $current=$iv_rulehex_integer_literal.current.getText(); }  
	 EOF 
;

// Rule hex_integer_literal
rulehex_integer_literal returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getHex_integer_literalAccess().getHexa_numeralParserRuleCall_0()); 
    }
    this_hexa_numeral_0=rulehexa_numeral    {
		$current.merge(this_hexa_numeral_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(    this_NUMBER_SUFFIX_1=RULE_NUMBER_SUFFIX    {
		$current.merge(this_NUMBER_SUFFIX_1);
    }

    { 
    newLeafNode(this_NUMBER_SUFFIX_1, grammarAccess.getHex_integer_literalAccess().getNUMBER_SUFFIXTerminalRuleCall_1()); 
    }
)?)
    ;





// Entry rule entryRulehexa_numeral
entryRulehexa_numeral returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getHexa_numeralRule()); } 
	 iv_rulehexa_numeral=rulehexa_numeral 
	 { $current=$iv_rulehexa_numeral.current.getText(); }  
	 EOF 
;

// Rule hexa_numeral
rulehexa_numeral returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
	kw='0x' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getHexa_numeralAccess().getXKeyword_0_0_0()); 
    }

    |
	kw='0X' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getHexa_numeralAccess().getXKeyword_0_0_1()); 
    }
)    this_HEXA_2=RULE_HEXA    {
		$current.merge(this_HEXA_2);
    }

    { 
    newLeafNode(this_HEXA_2, grammarAccess.getHexa_numeralAccess().getHEXATerminalRuleCall_0_1()); 
    }
)
    |    this_HEXA_3=RULE_HEXA    {
		$current.merge(this_HEXA_3);
    }

    { 
    newLeafNode(this_HEXA_3, grammarAccess.getHexa_numeralAccess().getHEXATerminalRuleCall_1()); 
    }
)
    ;





// Entry rule entryRuleoctal_integer_literal
entryRuleoctal_integer_literal returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getOctal_integer_literalRule()); } 
	 iv_ruleoctal_integer_literal=ruleoctal_integer_literal 
	 { $current=$iv_ruleoctal_integer_literal.current.getText(); }  
	 EOF 
;

// Rule octal_integer_literal
ruleoctal_integer_literal returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getOctal_integer_literalAccess().getOctal_numeralParserRuleCall_0()); 
    }
    this_octal_numeral_0=ruleoctal_numeral    {
		$current.merge(this_octal_numeral_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(    this_NUMBER_SUFFIX_1=RULE_NUMBER_SUFFIX    {
		$current.merge(this_NUMBER_SUFFIX_1);
    }

    { 
    newLeafNode(this_NUMBER_SUFFIX_1, grammarAccess.getOctal_integer_literalAccess().getNUMBER_SUFFIXTerminalRuleCall_1()); 
    }
)?)
    ;





// Entry rule entryRuleoctal_numeral
entryRuleoctal_numeral returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getOctal_numeralRule()); } 
	 iv_ruleoctal_numeral=ruleoctal_numeral 
	 { $current=$iv_ruleoctal_numeral.current.getText(); }  
	 EOF 
;

// Rule octal_numeral
ruleoctal_numeral returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ZERO_TO_SEVEN_0=RULE_ZERO_TO_SEVEN    {
		$current.merge(this_ZERO_TO_SEVEN_0);
    }

    { 
    newLeafNode(this_ZERO_TO_SEVEN_0, grammarAccess.getOctal_numeralAccess().getZERO_TO_SEVENTerminalRuleCall()); 
    }
)*
    ;





// Entry rule entryRuleFloatLiteral
entryRuleFloatLiteral returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getFloatLiteralRule()); } 
	 iv_ruleFloatLiteral=ruleFloatLiteral 
	 { $current=$iv_ruleFloatLiteral.current.getText(); }  
	 EOF 
;

// Rule FloatLiteral
ruleFloatLiteral returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    { 
        newCompositeNode(grammarAccess.getFloatLiteralAccess().getDecimal_digitsParserRuleCall_0_0()); 
    }
    this_decimal_digits_0=ruledecimal_digits    {
		$current.merge(this_decimal_digits_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFloatLiteralAccess().getFullStopKeyword_0_1()); 
    }
)?(
    { 
        newCompositeNode(grammarAccess.getFloatLiteralAccess().getDecimal_digitsParserRuleCall_0_2()); 
    }
    this_decimal_digits_2=ruledecimal_digits    {
		$current.merge(this_decimal_digits_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?(
    { 
        newCompositeNode(grammarAccess.getFloatLiteralAccess().getExponent_partParserRuleCall_0_3()); 
    }
    this_exponent_part_3=ruleexponent_part    {
		$current.merge(this_exponent_part_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?(    this_FLOAT_SUFFIX_4=RULE_FLOAT_SUFFIX    {
		$current.merge(this_FLOAT_SUFFIX_4);
    }

    { 
    newLeafNode(this_FLOAT_SUFFIX_4, grammarAccess.getFloatLiteralAccess().getFLOAT_SUFFIXTerminalRuleCall_0_4()); 
    }
)?)
    |(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFloatLiteralAccess().getFullStopKeyword_1_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getFloatLiteralAccess().getDecimal_digitsParserRuleCall_1_1()); 
    }
    this_decimal_digits_6=ruledecimal_digits    {
		$current.merge(this_decimal_digits_6);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
    { 
        newCompositeNode(grammarAccess.getFloatLiteralAccess().getExponent_partParserRuleCall_1_2()); 
    }
    this_exponent_part_7=ruleexponent_part    {
		$current.merge(this_exponent_part_7);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?(    this_FLOAT_SUFFIX_8=RULE_FLOAT_SUFFIX    {
		$current.merge(this_FLOAT_SUFFIX_8);
    }

    { 
    newLeafNode(this_FLOAT_SUFFIX_8, grammarAccess.getFloatLiteralAccess().getFLOAT_SUFFIXTerminalRuleCall_1_3()); 
    }
)?))
    ;





// Entry rule entryRuleForStatement
entryRuleForStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getForStatementRule()); }
	 iv_ruleForStatement=ruleForStatement 
	 { $current=$iv_ruleForStatement.current; } 
	 EOF 
;

// Rule ForStatement
ruleForStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='for' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getForStatementAccess().getForKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getForStatementAccess().getLeftParenthesisKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getForStatementAccess().getVariable_declarationVariableDeclarationParserRuleCall_2_0_0()); 
	    }
		lv_variable_declaration_2_0=ruleVariableDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForStatementRule());
	        }
       		set(
       			$current, 
       			"variable_declaration",
        		lv_variable_declaration_2_0, 
        		"VariableDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getForStatementAccess().getFor_expression1ExpressionParserRuleCall_2_1_0_0()); 
	    }
		lv_for_expression1_3_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForStatementRule());
	        }
       		set(
       			$current, 
       			"for_expression1",
        		lv_for_expression1_3_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=';' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getForStatementAccess().getSemicolonKeyword_2_1_1());
    }
)
    |	otherlv_5=';' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getForStatementAccess().getSemicolonKeyword_2_2());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getForStatementAccess().getFor_expression2ExpressionParserRuleCall_3_0()); 
	    }
		lv_for_expression2_6_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForStatementRule());
	        }
       		set(
       			$current, 
       			"for_expression2",
        		lv_for_expression2_6_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_7=';' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getForStatementAccess().getSemicolonKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForStatementAccess().getFor_expression3ExpressionParserRuleCall_5_0()); 
	    }
		lv_for_expression3_8_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForStatementRule());
	        }
       		set(
       			$current, 
       			"for_expression3",
        		lv_for_expression3_8_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_9=';' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getForStatementAccess().getSemicolonKeyword_6());
    }
	otherlv_10=')' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getForStatementAccess().getRightParenthesisKeyword_7());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForStatementAccess().getStatementStatementParserRuleCall_8_0()); 
	    }
		lv_statement_11_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForStatementRule());
	        }
       		set(
       			$current, 
       			"statement",
        		lv_statement_11_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleIfStatement
entryRuleIfStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIfStatementRule()); }
	 iv_ruleIfStatement=ruleIfStatement 
	 { $current=$iv_ruleIfStatement.current; } 
	 EOF 
;

// Rule IfStatement
ruleIfStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='if' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getIfStatementAccess().getIfKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getIfStatementAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfStatementAccess().getExpressionExpressionParserRuleCall_2_0()); 
	    }
		lv_expression_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfStatementRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getIfStatementAccess().getRightParenthesisKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfStatementAccess().getIf_statementStatementParserRuleCall_4_0()); 
	    }
		lv_if_statement_4_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfStatementRule());
	        }
       		set(
       			$current, 
       			"if_statement",
        		lv_if_statement_4_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_5='else' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getIfStatementAccess().getElseKeyword_5_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfStatementAccess().getElse_statementStatementParserRuleCall_5_1_0()); 
	    }
		lv_else_statement_6_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfStatementRule());
	        }
       		set(
       			$current, 
       			"else_statement",
        		lv_else_statement_6_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	 iv_ruleStatement=ruleStatement 
	 { $current=$iv_ruleStatement.current; } 
	 EOF 
;

// Rule Statement
ruleStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getStatementAccess().getVariable_declarationVariableDeclarationParserRuleCall_0_0()); 
	    }
		lv_variable_declaration_0_0=ruleVariableDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatementRule());
	        }
       		set(
       			$current, 
       			"variable_declaration",
        		lv_variable_declaration_0_0, 
        		"VariableDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getStatementAccess().getStatement_expressionExpressionParserRuleCall_1_0_0()); 
	    }
		lv_statement_expression_1_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatementRule());
	        }
       		set(
       			$current, 
       			"statement_expression",
        		lv_statement_expression_1_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=';' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getStatementAccess().getSemicolonKeyword_1_1());
    }
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getStatementAccess().getStatement_blockStatementBlockParserRuleCall_2_0()); 
	    }
		lv_statement_block_3_0=ruleStatementBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatementRule());
	        }
       		set(
       			$current, 
       			"statement_block",
        		lv_statement_block_3_0, 
        		"StatementBlock");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getStatementAccess().getIf_statementIfStatementParserRuleCall_3_0()); 
	    }
		lv_if_statement_4_0=ruleIfStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatementRule());
	        }
       		set(
       			$current, 
       			"if_statement",
        		lv_if_statement_4_0, 
        		"IfStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getStatementAccess().getDo_statementDoStatementParserRuleCall_4_0()); 
	    }
		lv_do_statement_5_0=ruleDoStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatementRule());
	        }
       		set(
       			$current, 
       			"do_statement",
        		lv_do_statement_5_0, 
        		"DoStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getStatementAccess().getWhile_statementWhile_statementParserRuleCall_5_0()); 
	    }
		lv_while_statement_6_0=rulewhile_statement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatementRule());
	        }
       		set(
       			$current, 
       			"while_statement",
        		lv_while_statement_6_0, 
        		"while_statement");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getStatementAccess().getFor_statementForStatementParserRuleCall_6_0()); 
	    }
		lv_for_statement_7_0=ruleForStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatementRule());
	        }
       		set(
       			$current, 
       			"for_statement",
        		lv_for_statement_7_0, 
        		"ForStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getStatementAccess().getTry_statementTryStatementParserRuleCall_7_0()); 
	    }
		lv_try_statement_8_0=ruleTryStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatementRule());
	        }
       		set(
       			$current, 
       			"try_statement",
        		lv_try_statement_8_0, 
        		"TryStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getStatementAccess().getSwith_statementSwitchStatementParserRuleCall_8_0()); 
	    }
		lv_swith_statement_9_0=ruleSwitchStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatementRule());
	        }
       		set(
       			$current, 
       			"swith_statement",
        		lv_swith_statement_9_0, 
        		"SwitchStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getStatementAccess().getStatementAction_9_0(),
            $current);
    }
)(	otherlv_11='synchronized' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getStatementAccess().getSynchronizedKeyword_9_1_0());
    }
	otherlv_12='(' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getStatementAccess().getLeftParenthesisKeyword_9_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStatementAccess().getSync_expressionExpressionParserRuleCall_9_1_2_0()); 
	    }
		lv_sync_expression_13_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatementRule());
	        }
       		set(
       			$current, 
       			"sync_expression",
        		lv_sync_expression_13_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_14=')' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getStatementAccess().getRightParenthesisKeyword_9_1_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStatementAccess().getSync_statementStatementParserRuleCall_9_1_4_0()); 
	    }
		lv_sync_statement_15_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatementRule());
	        }
       		set(
       			$current, 
       			"sync_statement",
        		lv_sync_statement_15_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
)))
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getStatementAccess().getStatementAction_10_0(),
            $current);
    }
)(	otherlv_17='return' 
    {
    	newLeafNode(otherlv_17, grammarAccess.getStatementAccess().getReturnKeyword_10_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStatementAccess().getReturn_expressionExpressionParserRuleCall_10_1_1_0()); 
	    }
		lv_return_expression_18_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatementRule());
	        }
       		set(
       			$current, 
       			"return_expression",
        		lv_return_expression_18_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_19=';' 
    {
    	newLeafNode(otherlv_19, grammarAccess.getStatementAccess().getSemicolonKeyword_10_1_2());
    }
))
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getStatementAccess().getStatementAction_11_0(),
            $current);
    }
)(	otherlv_21='throw' 
    {
    	newLeafNode(otherlv_21, grammarAccess.getStatementAccess().getThrowKeyword_11_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStatementAccess().getThrow_expressionExpressionParserRuleCall_11_1_1_0()); 
	    }
		lv_throw_expression_22_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatementRule());
	        }
       		set(
       			$current, 
       			"throw_expression",
        		lv_throw_expression_22_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_23=';' 
    {
    	newLeafNode(otherlv_23, grammarAccess.getStatementAccess().getSemicolonKeyword_11_1_2());
    }
))
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getStatementAccess().getStatementAction_12_0(),
            $current);
    }
)(this_ID_25=RULE_ID
    { 
    newLeafNode(this_ID_25, grammarAccess.getStatementAccess().getIDTerminalRuleCall_12_1_0()); 
    }
	otherlv_26=':' 
    {
    	newLeafNode(otherlv_26, grammarAccess.getStatementAccess().getColonKeyword_12_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStatementAccess().getNamed_statementStatementParserRuleCall_12_1_2_0()); 
	    }
		lv_named_statement_27_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatementRule());
	        }
       		set(
       			$current, 
       			"named_statement",
        		lv_named_statement_27_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
)))
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getStatementAccess().getStatementAction_13_0(),
            $current);
    }
)(	otherlv_29='break' 
    {
    	newLeafNode(otherlv_29, grammarAccess.getStatementAccess().getBreakKeyword_13_1_0());
    }
(this_ID_30=RULE_ID
    { 
    newLeafNode(this_ID_30, grammarAccess.getStatementAccess().getIDTerminalRuleCall_13_1_1()); 
    }
)?	otherlv_31=';' 
    {
    	newLeafNode(otherlv_31, grammarAccess.getStatementAccess().getSemicolonKeyword_13_1_2());
    }
))
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getStatementAccess().getStatementAction_14_0(),
            $current);
    }
)(	otherlv_33='continue' 
    {
    	newLeafNode(otherlv_33, grammarAccess.getStatementAccess().getContinueKeyword_14_1_0());
    }
(this_ID_34=RULE_ID
    { 
    newLeafNode(this_ID_34, grammarAccess.getStatementAccess().getIDTerminalRuleCall_14_1_1()); 
    }
)?	otherlv_35=';' 
    {
    	newLeafNode(otherlv_35, grammarAccess.getStatementAccess().getSemicolonKeyword_14_1_2());
    }
))
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getStatementAccess().getStatementAction_15_0(),
            $current);
    }
)	otherlv_37=';' 
    {
    	newLeafNode(otherlv_37, grammarAccess.getStatementAccess().getSemicolonKeyword_15_1());
    }
))
;





// Entry rule entryRuleSwitchStatement
entryRuleSwitchStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSwitchStatementRule()); }
	 iv_ruleSwitchStatement=ruleSwitchStatement 
	 { $current=$iv_ruleSwitchStatement.current; } 
	 EOF 
;

// Rule SwitchStatement
ruleSwitchStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='switch' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSwitchStatementAccess().getSwitchKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSwitchStatementAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSwitchStatementAccess().getSwitch_expressionExpressionParserRuleCall_2_0()); 
	    }
		lv_switch_expression_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSwitchStatementRule());
	        }
       		set(
       			$current, 
       			"switch_expression",
        		lv_switch_expression_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getSwitchStatementAccess().getRightParenthesisKeyword_3());
    }
	otherlv_4='{' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getSwitchStatementAccess().getLeftCurlyBracketKeyword_4());
    }
((	otherlv_5='case' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getSwitchStatementAccess().getCaseKeyword_5_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSwitchStatementAccess().getCase_expressionsExpressionParserRuleCall_5_0_1_0()); 
	    }
		lv_case_expressions_6_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSwitchStatementRule());
	        }
       		add(
       			$current, 
       			"case_expressions",
        		lv_case_expressions_6_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_7=':' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getSwitchStatementAccess().getColonKeyword_5_0_2());
    }
)
    |(	otherlv_8='default' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getSwitchStatementAccess().getDefaultKeyword_5_1_0());
    }
	otherlv_9=':' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getSwitchStatementAccess().getColonKeyword_5_1_1());
    }
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getSwitchStatementAccess().getStatementsStatementParserRuleCall_5_2_0()); 
	    }
		lv_statements_10_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSwitchStatementRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_10_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_11='}' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getSwitchStatementAccess().getRightCurlyBracketKeyword_6());
    }
)
;





// Entry rule entryRuleTryStatement
entryRuleTryStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTryStatementRule()); }
	 iv_ruleTryStatement=ruleTryStatement 
	 { $current=$iv_ruleTryStatement.current; } 
	 EOF 
;

// Rule TryStatement
ruleTryStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='try' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTryStatementAccess().getTryKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTryStatementAccess().getTry_statementStatementParserRuleCall_1_0()); 
	    }
		lv_try_statement_1_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTryStatementRule());
	        }
       		set(
       			$current, 
       			"try_statement",
        		lv_try_statement_1_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2='catch' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTryStatementAccess().getCatchKeyword_2_0());
    }
	otherlv_3='(' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getTryStatementAccess().getLeftParenthesisKeyword_2_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTryStatementAccess().getParamentersParameterParserRuleCall_2_2_0()); 
	    }
		lv_paramenters_4_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTryStatementRule());
	        }
       		add(
       			$current, 
       			"paramenters",
        		lv_paramenters_4_0, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getTryStatementAccess().getRightParenthesisKeyword_2_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTryStatementAccess().getCatch_statementsStatementParserRuleCall_2_4_0()); 
	    }
		lv_catch_statements_6_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTryStatementRule());
	        }
       		add(
       			$current, 
       			"catch_statements",
        		lv_catch_statements_6_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
))*(	otherlv_7='finally' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getTryStatementAccess().getFinallyKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTryStatementAccess().getFinally_statementStatementParserRuleCall_3_1_0()); 
	    }
		lv_finally_statement_8_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTryStatementRule());
	        }
       		set(
       			$current, 
       			"finally_statement",
        		lv_finally_statement_8_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRulewhile_statement
entryRulewhile_statement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getWhile_statementRule()); }
	 iv_rulewhile_statement=rulewhile_statement 
	 { $current=$iv_rulewhile_statement.current; } 
	 EOF 
;

// Rule while_statement
rulewhile_statement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='while' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getWhile_statementAccess().getWhileKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getWhile_statementAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getWhile_statementAccess().getExpressionExpressionParserRuleCall_2_0()); 
	    }
		lv_expression_2_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWhile_statementRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_2_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getWhile_statementAccess().getRightParenthesisKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getWhile_statementAccess().getStatementStatementParserRuleCall_4_0()); 
	    }
		lv_statement_4_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWhile_statementRule());
	        }
       		set(
       			$current, 
       			"statement",
        		lv_statement_4_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





RULE_HEXA : '0..9a..f';

RULE_FLOAT_SUFFIX : ('0..9f'|'0..9d');

RULE_NUMBER_SUFFIX : ('0..9L'|'0..9l');

RULE_ZERO_TO_SEVEN : '0..7';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


