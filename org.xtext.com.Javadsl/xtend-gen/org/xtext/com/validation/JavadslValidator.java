/**
 * generated by Xtext
 */
package org.xtext.com.validation;

import org.eclipse.xtext.validation.Check;
import org.xtext.com.javadsl.Expression;
import org.xtext.com.javadsl.IfStatement;
import org.xtext.com.javadsl.JavadslPackage;
import org.xtext.com.javadsl.LogicalExpression;
import org.xtext.com.javadsl.TestingExpression;
import org.xtext.com.javadsl.Type;
import org.xtext.com.javadsl.TypeSpecifier;
import org.xtext.com.javadsl.VariableDeclaration;
import org.xtext.com.validation.AbstractJavadslValidator;

/**
 * This class contains custom validation rules.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
@SuppressWarnings("all")
public class JavadslValidator extends AbstractJavadslValidator {
  public final static String INVALID_TYPE = "invalidType";
  
  @Check
  public void checkType(final VariableDeclaration v) {
    Type _type = v.getType();
    TypeSpecifier _specifier = _type.getSpecifier();
    boolean _equals = _specifier.equals("int");
    if (_equals) {
      this.error("Invalid type, int required", JavadslPackage.Literals.TYPE__SPECIFIER);
      return;
    }
  }
  
  @Check
  public void checkType(final IfStatement statement) {
    boolean _and = false;
    Expression _expression = statement.getExpression();
    boolean _not = (!(_expression instanceof TestingExpression));
    if (!_not) {
      _and = false;
    } else {
      Expression _expression_1 = statement.getExpression();
      boolean _not_1 = (!(_expression_1 instanceof LogicalExpression));
      _and = _not_1;
    }
    if (_and) {
      this.error("It\'s not boolean", JavadslPackage.Literals.IF_STATEMENT__EXPRESSION);
      return;
    }
  }
}
